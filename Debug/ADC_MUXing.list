
ADC_MUXing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081a4  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008360  08008360  00018360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083d0  080083d0  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080083d0  080083d0  000183d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083d8  080083d8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083d8  080083d8  000183d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083dc  080083dc  000183dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080083e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  20000018  080083f8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  080083f8  0002055c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000057  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f80f  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003796  00000000  00000000  0003f8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c78  00000000  00000000  00043048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016a0  00000000  00000000  00044cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002df42  00000000  00000000  00046360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d57a  00000000  00000000  000742a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00124183  00000000  00000000  0009181c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007950  00000000  00000000  001b59a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  001bd2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000b9a  00000000  00000000  001bd373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__aeabi_uldivmod>:
 80001bc:	b953      	cbnz	r3, 80001d4 <__aeabi_uldivmod+0x18>
 80001be:	b94a      	cbnz	r2, 80001d4 <__aeabi_uldivmod+0x18>
 80001c0:	2900      	cmp	r1, #0
 80001c2:	bf08      	it	eq
 80001c4:	2800      	cmpeq	r0, #0
 80001c6:	bf1c      	itt	ne
 80001c8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001cc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001d0:	f000 b80c 	b.w	80001ec <__aeabi_idiv0>
 80001d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001dc:	f007 ff50 	bl	8008080 <__udivmoddi4>
 80001e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001e8:	b004      	add	sp, #16
 80001ea:	4770      	bx	lr

080001ec <__aeabi_idiv0>:
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop

080001f0 <deregister_tm_clones>:
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <deregister_tm_clones+0x10>)
 80001f2:	4b04      	ldr	r3, [pc, #16]	; (8000204 <deregister_tm_clones+0x14>)
 80001f4:	4283      	cmp	r3, r0
 80001f6:	d002      	beq.n	80001fe <deregister_tm_clones+0xe>
 80001f8:	4b03      	ldr	r3, [pc, #12]	; (8000208 <deregister_tm_clones+0x18>)
 80001fa:	b103      	cbz	r3, 80001fe <deregister_tm_clones+0xe>
 80001fc:	4718      	bx	r3
 80001fe:	4770      	bx	lr
 8000200:	20000018 	.word	0x20000018
 8000204:	20000018 	.word	0x20000018
 8000208:	00000000 	.word	0x00000000

0800020c <register_tm_clones>:
 800020c:	4805      	ldr	r0, [pc, #20]	; (8000224 <register_tm_clones+0x18>)
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <register_tm_clones+0x1c>)
 8000210:	1a1b      	subs	r3, r3, r0
 8000212:	0fd9      	lsrs	r1, r3, #31
 8000214:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000218:	1049      	asrs	r1, r1, #1
 800021a:	d002      	beq.n	8000222 <register_tm_clones+0x16>
 800021c:	4b03      	ldr	r3, [pc, #12]	; (800022c <register_tm_clones+0x20>)
 800021e:	b103      	cbz	r3, 8000222 <register_tm_clones+0x16>
 8000220:	4718      	bx	r3
 8000222:	4770      	bx	lr
 8000224:	20000018 	.word	0x20000018
 8000228:	20000018 	.word	0x20000018
 800022c:	00000000 	.word	0x00000000

08000230 <__do_global_dtors_aux>:
 8000230:	b510      	push	{r4, lr}
 8000232:	4c06      	ldr	r4, [pc, #24]	; (800024c <__do_global_dtors_aux+0x1c>)
 8000234:	7823      	ldrb	r3, [r4, #0]
 8000236:	b943      	cbnz	r3, 800024a <__do_global_dtors_aux+0x1a>
 8000238:	f7ff ffda 	bl	80001f0 <deregister_tm_clones>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x20>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x16>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x24>)
 8000242:	f3af 8000 	nop.w
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000018 	.word	0x20000018
 8000250:	00000000 	.word	0x00000000
 8000254:	08008348 	.word	0x08008348

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b05      	ldr	r3, [pc, #20]	; (8000270 <frame_dummy+0x18>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4905      	ldr	r1, [pc, #20]	; (8000274 <frame_dummy+0x1c>)
 8000260:	4805      	ldr	r0, [pc, #20]	; (8000278 <frame_dummy+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800026a:	f7ff bfcf 	b.w	800020c <register_tm_clones>
 800026e:	bf00      	nop
 8000270:	00000000 	.word	0x00000000
 8000274:	2000001c 	.word	0x2000001c
 8000278:	08008348 	.word	0x08008348

0800027c <setDataReady>:
uint8_t RXone_Data[4] = {0,0,0,0};
uint8_t RXtwo_Data[4] = {0,0,0,0};
int milis = 0;


void setDataReady(){
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	if(flipped){
 8000280:	4b13      	ldr	r3, [pc, #76]	; (80002d0 <setDataReady+0x54>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d021      	beq.n	80002cc <setDataReady+0x50>
		if(pin){
 8000288:	4b12      	ldr	r3, [pc, #72]	; (80002d4 <setDataReady+0x58>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d008      	beq.n	80002a2 <setDataReady+0x26>
			HAL_SPI_Receive_IT(&hspi1, RXone_Data, sizeof(RXone_Data));
 8000290:	2204      	movs	r2, #4
 8000292:	4911      	ldr	r1, [pc, #68]	; (80002d8 <setDataReady+0x5c>)
 8000294:	4811      	ldr	r0, [pc, #68]	; (80002dc <setDataReady+0x60>)
 8000296:	f005 fa01 	bl	800569c <HAL_SPI_Receive_IT>
			flipped = 0;
 800029a:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <setDataReady+0x54>)
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
			}
			HAL_SPI_Receive_IT(&hspi1, RXtwo_Data, sizeof(RXtwo_Data));
			flipped = 0;
		}
	}
}
 80002a0:	e014      	b.n	80002cc <setDataReady+0x50>
			if(flagone){
 80002a2:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <setDataReady+0x64>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d008      	beq.n	80002bc <setDataReady+0x40>
				milis = HAL_GetTick();
 80002aa:	f001 fb21 	bl	80018f0 <HAL_GetTick>
 80002ae:	4603      	mov	r3, r0
 80002b0:	461a      	mov	r2, r3
 80002b2:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <setDataReady+0x68>)
 80002b4:	601a      	str	r2, [r3, #0]
				flagone = 0;
 80002b6:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <setDataReady+0x64>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
			HAL_SPI_Receive_IT(&hspi1, RXtwo_Data, sizeof(RXtwo_Data));
 80002bc:	2204      	movs	r2, #4
 80002be:	490a      	ldr	r1, [pc, #40]	; (80002e8 <setDataReady+0x6c>)
 80002c0:	4806      	ldr	r0, [pc, #24]	; (80002dc <setDataReady+0x60>)
 80002c2:	f005 f9eb 	bl	800569c <HAL_SPI_Receive_IT>
			flipped = 0;
 80002c6:	4b02      	ldr	r3, [pc, #8]	; (80002d0 <setDataReady+0x54>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	20000008 	.word	0x20000008
 80002d4:	20000520 	.word	0x20000520
 80002d8:	20000524 	.word	0x20000524
 80002dc:	200001cc 	.word	0x200001cc
 80002e0:	20000000 	.word	0x20000000
 80002e4:	2000052c 	.word	0x2000052c
 80002e8:	20000528 	.word	0x20000528

080002ec <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
    if(pin){
 80002f4:	4b17      	ldr	r3, [pc, #92]	; (8000354 <HAL_SPI_RxCpltCallback+0x68>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d01b      	beq.n	8000334 <HAL_SPI_RxCpltCallback+0x48>
    	if(flagtwo){
 80002fc:	4b16      	ldr	r3, [pc, #88]	; (8000358 <HAL_SPI_RxCpltCallback+0x6c>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d00b      	beq.n	800031c <HAL_SPI_RxCpltCallback+0x30>
    		milis = HAL_GetTick() - milis;
 8000304:	f001 faf4 	bl	80018f0 <HAL_GetTick>
 8000308:	4603      	mov	r3, r0
 800030a:	4a14      	ldr	r2, [pc, #80]	; (800035c <HAL_SPI_RxCpltCallback+0x70>)
 800030c:	6812      	ldr	r2, [r2, #0]
 800030e:	1a9b      	subs	r3, r3, r2
 8000310:	461a      	mov	r2, r3
 8000312:	4b12      	ldr	r3, [pc, #72]	; (800035c <HAL_SPI_RxCpltCallback+0x70>)
 8000314:	601a      	str	r2, [r3, #0]
    		flagtwo = 0;
 8000316:	4b10      	ldr	r3, [pc, #64]	; (8000358 <HAL_SPI_RxCpltCallback+0x6c>)
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
    	}
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2101      	movs	r1, #1
 8000320:	480f      	ldr	r0, [pc, #60]	; (8000360 <HAL_SPI_RxCpltCallback+0x74>)
 8000322:	f002 fe0b 	bl	8002f3c <HAL_GPIO_WritePin>
    	pin = 0;
 8000326:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <HAL_SPI_RxCpltCallback+0x68>)
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
    	flipped = 1;
 800032c:	4b0d      	ldr	r3, [pc, #52]	; (8000364 <HAL_SPI_RxCpltCallback+0x78>)
 800032e:	2201      	movs	r2, #1
 8000330:	601a      	str	r2, [r3, #0]
    else{
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
    	pin = 1;
    	flipped = 1;
    }
}
 8000332:	e00a      	b.n	800034a <HAL_SPI_RxCpltCallback+0x5e>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000334:	2201      	movs	r2, #1
 8000336:	2101      	movs	r1, #1
 8000338:	4809      	ldr	r0, [pc, #36]	; (8000360 <HAL_SPI_RxCpltCallback+0x74>)
 800033a:	f002 fdff 	bl	8002f3c <HAL_GPIO_WritePin>
    	pin = 1;
 800033e:	4b05      	ldr	r3, [pc, #20]	; (8000354 <HAL_SPI_RxCpltCallback+0x68>)
 8000340:	2201      	movs	r2, #1
 8000342:	601a      	str	r2, [r3, #0]
    	flipped = 1;
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <HAL_SPI_RxCpltCallback+0x78>)
 8000346:	2201      	movs	r2, #1
 8000348:	601a      	str	r2, [r3, #0]
}
 800034a:	bf00      	nop
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	20000520 	.word	0x20000520
 8000358:	20000004 	.word	0x20000004
 800035c:	2000052c 	.word	0x2000052c
 8000360:	48000800 	.word	0x48000800
 8000364:	20000008 	.word	0x20000008

08000368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800036e:	f001 fa56 	bl	800181e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000372:	f000 f84b 	bl	800040c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000376:	f000 f8ad 	bl	80004d4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800037a:	f000 fc79 	bl	8000c70 <MX_GPIO_Init>
  MX_ADC1_Init();
 800037e:	f000 f8d9 	bl	8000534 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000382:	f000 f93b 	bl	80005fc <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000386:	f000 f971 	bl	800066c <MX_I2C1_Init>
  MX_I2C2_Init();
 800038a:	f000 f9af 	bl	80006ec <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 800038e:	f000 f9ed 	bl	800076c <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8000392:	f000 fa41 	bl	8000818 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000396:	f000 fa7d 	bl	8000894 <MX_SPI3_Init>
  MX_TIM3_Init();
 800039a:	f000 fab9 	bl	8000910 <MX_TIM3_Init>
  MX_UART4_Init();
 800039e:	f000 fb2d 	bl	80009fc <MX_UART4_Init>
  MX_USART1_UART_Init();
 80003a2:	f000 fb77 	bl	8000a94 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80003a6:	f000 fbc1 	bl	8000b2c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80003aa:	f000 fc0d 	bl	8000bc8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80003ae:	f000 fc57 	bl	8000c60 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  uint8_t RXone_Data_local[4];
  uint8_t RXtwo_Data_local[4];
  //int xd = 0;
  HAL_TIM_Base_Start(&htim3);
 80003b2:	4811      	ldr	r0, [pc, #68]	; (80003f8 <main+0x90>)
 80003b4:	f005 ffce 	bl	8006354 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80003b8:	210c      	movs	r1, #12
 80003ba:	480f      	ldr	r0, [pc, #60]	; (80003f8 <main+0x90>)
 80003bc:	f006 f894 	bl	80064e8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	2101      	movs	r1, #1
 80003c4:	480d      	ldr	r0, [pc, #52]	; (80003fc <main+0x94>)
 80003c6:	f002 fdb9 	bl	8002f3c <HAL_GPIO_WritePin>
  //int milis = HAL_GetTick();
  int flagger = 1;
 80003ca:	2301      	movs	r3, #1
 80003cc:	60fb      	str	r3, [r7, #12]
  int time = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60bb      	str	r3, [r7, #8]
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <main+0x98>)
 80003d4:	681b      	ldr	r3, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 memcpy(RXone_Data_local, &RXone_Data, 4);
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	4b0a      	ldr	r3, [pc, #40]	; (8000404 <main+0x9c>)
 80003da:	681b      	ldr	r3, [r3, #0]
	 memcpy(RXtwo_Data_local, &RXtwo_Data, 4);
 80003dc:	603b      	str	r3, [r7, #0]
	 if(flagger){
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d0f6      	beq.n	80003d2 <main+0x6a>
		 //HAL_SPI_Receive(&hspi1, RX_Data, sizeof(RX_Data), 5000);
		 HAL_Delay(5000);
 80003e4:	f241 3088 	movw	r0, #5000	; 0x1388
 80003e8:	f001 fa8e 	bl	8001908 <HAL_Delay>
		 time = milis;
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <main+0xa0>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	60bb      	str	r3, [r7, #8]
		// milis = HAL_GetTick();
		 flagger = 0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60fb      	str	r3, [r7, #12]
  {
 80003f6:	e7ec      	b.n	80003d2 <main+0x6a>
 80003f8:	20000294 	.word	0x20000294
 80003fc:	48000800 	.word	0x48000800
 8000400:	20000524 	.word	0x20000524
 8000404:	20000528 	.word	0x20000528
 8000408:	2000052c 	.word	0x2000052c

0800040c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b096      	sub	sp, #88	; 0x58
 8000410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000412:	f107 0314 	add.w	r3, r7, #20
 8000416:	2244      	movs	r2, #68	; 0x44
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f007 fe28 	bl	8008070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000420:	463b      	mov	r3, r7
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
 800042c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800042e:	2000      	movs	r0, #0
 8000430:	f003 fbec 	bl	8003c0c <HAL_PWREx_ControlVoltageScaling>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800043a:	f000 fd6f 	bl	8000f1c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800043e:	f003 fbb5 	bl	8003bac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000442:	4b23      	ldr	r3, [pc, #140]	; (80004d0 <SystemClock_Config+0xc4>)
 8000444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000448:	4a21      	ldr	r2, [pc, #132]	; (80004d0 <SystemClock_Config+0xc4>)
 800044a:	f023 0318 	bic.w	r3, r3, #24
 800044e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000452:	2314      	movs	r3, #20
 8000454:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000456:	2301      	movs	r3, #1
 8000458:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800045a:	2301      	movs	r3, #1
 800045c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800045e:	2300      	movs	r3, #0
 8000460:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000462:	2360      	movs	r3, #96	; 0x60
 8000464:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000466:	2302      	movs	r3, #2
 8000468:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800046a:	2301      	movs	r3, #1
 800046c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800046e:	2301      	movs	r3, #1
 8000470:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000472:	233c      	movs	r3, #60	; 0x3c
 8000474:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000476:	2302      	movs	r3, #2
 8000478:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800047a:	2302      	movs	r3, #2
 800047c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800047e:	2302      	movs	r3, #2
 8000480:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000482:	f107 0314 	add.w	r3, r7, #20
 8000486:	4618      	mov	r0, r3
 8000488:	f003 fc64 	bl	8003d54 <HAL_RCC_OscConfig>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000492:	f000 fd43 	bl	8000f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000496:	230f      	movs	r3, #15
 8000498:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800049a:	2303      	movs	r3, #3
 800049c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800049e:	2300      	movs	r3, #0
 80004a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80004a2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80004a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80004a8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80004ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80004ae:	463b      	mov	r3, r7
 80004b0:	2105      	movs	r1, #5
 80004b2:	4618      	mov	r0, r3
 80004b4:	f004 f868 	bl	8004588 <HAL_RCC_ClockConfig>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80004be:	f000 fd2d 	bl	8000f1c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80004c2:	f004 fe4f 	bl	8005164 <HAL_RCCEx_EnableMSIPLLMode>
}
 80004c6:	bf00      	nop
 80004c8:	3758      	adds	r7, #88	; 0x58
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40021000 	.word	0x40021000

080004d4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b0a6      	sub	sp, #152	; 0x98
 80004d8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2294      	movs	r2, #148	; 0x94
 80004de:	2100      	movs	r1, #0
 80004e0:	4618      	mov	r0, r3
 80004e2:	f007 fdc5 	bl	8008070 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80004e6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80004ea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80004ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80004f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80004f8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80004fa:	2301      	movs	r3, #1
 80004fc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80004fe:	2301      	movs	r3, #1
 8000500:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000502:	2318      	movs	r3, #24
 8000504:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000506:	2302      	movs	r3, #2
 8000508:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800050a:	2302      	movs	r3, #2
 800050c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800050e:	2302      	movs	r3, #2
 8000510:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000512:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000516:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	4618      	mov	r0, r3
 800051c:	f004 faf2 	bl	8004b04 <HAL_RCCEx_PeriphCLKConfig>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000526:	f000 fcf9 	bl	8000f1c <Error_Handler>
  }
}
 800052a:	bf00      	nop
 800052c:	3798      	adds	r7, #152	; 0x98
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800053a:	463b      	mov	r3, r7
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]
 8000548:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800054a:	4b29      	ldr	r3, [pc, #164]	; (80005f0 <MX_ADC1_Init+0xbc>)
 800054c:	4a29      	ldr	r2, [pc, #164]	; (80005f4 <MX_ADC1_Init+0xc0>)
 800054e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000550:	4b27      	ldr	r3, [pc, #156]	; (80005f0 <MX_ADC1_Init+0xbc>)
 8000552:	2200      	movs	r2, #0
 8000554:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000556:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <MX_ADC1_Init+0xbc>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800055c:	4b24      	ldr	r3, [pc, #144]	; (80005f0 <MX_ADC1_Init+0xbc>)
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000562:	4b23      	ldr	r3, [pc, #140]	; (80005f0 <MX_ADC1_Init+0xbc>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000568:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <MX_ADC1_Init+0xbc>)
 800056a:	2204      	movs	r2, #4
 800056c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800056e:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <MX_ADC1_Init+0xbc>)
 8000570:	2200      	movs	r2, #0
 8000572:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000574:	4b1e      	ldr	r3, [pc, #120]	; (80005f0 <MX_ADC1_Init+0xbc>)
 8000576:	2200      	movs	r2, #0
 8000578:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800057a:	4b1d      	ldr	r3, [pc, #116]	; (80005f0 <MX_ADC1_Init+0xbc>)
 800057c:	2201      	movs	r2, #1
 800057e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000580:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <MX_ADC1_Init+0xbc>)
 8000582:	2200      	movs	r2, #0
 8000584:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000588:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <MX_ADC1_Init+0xbc>)
 800058a:	2200      	movs	r2, #0
 800058c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800058e:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <MX_ADC1_Init+0xbc>)
 8000590:	2200      	movs	r2, #0
 8000592:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000594:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <MX_ADC1_Init+0xbc>)
 8000596:	2200      	movs	r2, #0
 8000598:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <MX_ADC1_Init+0xbc>)
 800059e:	2200      	movs	r2, #0
 80005a0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005a2:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <MX_ADC1_Init+0xbc>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005aa:	4811      	ldr	r0, [pc, #68]	; (80005f0 <MX_ADC1_Init+0xbc>)
 80005ac:	f001 fb70 	bl	8001c90 <HAL_ADC_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80005b6:	f000 fcb1 	bl	8000f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <MX_ADC1_Init+0xc4>)
 80005bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005be:	2306      	movs	r3, #6
 80005c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005c6:	237f      	movs	r3, #127	; 0x7f
 80005c8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ca:	2304      	movs	r3, #4
 80005cc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d2:	463b      	mov	r3, r7
 80005d4:	4619      	mov	r1, r3
 80005d6:	4806      	ldr	r0, [pc, #24]	; (80005f0 <MX_ADC1_Init+0xbc>)
 80005d8:	f001 fca6 	bl	8001f28 <HAL_ADC_ConfigChannel>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005e2:	f000 fc9b 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000034 	.word	0x20000034
 80005f4:	50040000 	.word	0x50040000
 80005f8:	36902000 	.word	0x36902000

080005fc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_DFSDM1_Init+0x68>)
 8000602:	4a19      	ldr	r2, [pc, #100]	; (8000668 <MX_DFSDM1_Init+0x6c>)
 8000604:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <MX_DFSDM1_Init+0x68>)
 8000608:	2201      	movs	r2, #1
 800060a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_DFSDM1_Init+0x68>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_DFSDM1_Init+0x68>)
 8000614:	2202      	movs	r2, #2
 8000616:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_DFSDM1_Init+0x68>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_DFSDM1_Init+0x68>)
 8000620:	2200      	movs	r2, #0
 8000622:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_DFSDM1_Init+0x68>)
 8000626:	2200      	movs	r2, #0
 8000628:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_DFSDM1_Init+0x68>)
 800062c:	2200      	movs	r2, #0
 800062e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_DFSDM1_Init+0x68>)
 8000632:	2204      	movs	r2, #4
 8000634:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_DFSDM1_Init+0x68>)
 8000638:	2200      	movs	r2, #0
 800063a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_DFSDM1_Init+0x68>)
 800063e:	2201      	movs	r2, #1
 8000640:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_DFSDM1_Init+0x68>)
 8000644:	2200      	movs	r2, #0
 8000646:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_DFSDM1_Init+0x68>)
 800064a:	2200      	movs	r2, #0
 800064c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_DFSDM1_Init+0x68>)
 8000650:	f002 f976 	bl	8002940 <HAL_DFSDM_ChannelInit>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 800065a:	f000 fc5f 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	2000009c 	.word	0x2000009c
 8000668:	40016040 	.word	0x40016040

0800066c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000672:	4a1c      	ldr	r2, [pc, #112]	; (80006e4 <MX_I2C1_Init+0x78>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00101B29;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000678:	4a1b      	ldr	r2, [pc, #108]	; (80006e8 <MX_I2C1_Init+0x7c>)
 800067a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <MX_I2C1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000684:	2201      	movs	r2, #1
 8000686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <MX_I2C1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_I2C1_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_I2C1_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a6:	480e      	ldr	r0, [pc, #56]	; (80006e0 <MX_I2C1_Init+0x74>)
 80006a8:	f002 fc83 	bl	8002fb2 <HAL_I2C_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006b2:	f000 fc33 	bl	8000f1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006b6:	2100      	movs	r1, #0
 80006b8:	4809      	ldr	r0, [pc, #36]	; (80006e0 <MX_I2C1_Init+0x74>)
 80006ba:	f002 fd09 	bl	80030d0 <HAL_I2CEx_ConfigAnalogFilter>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006c4:	f000 fc2a 	bl	8000f1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006c8:	2100      	movs	r1, #0
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_I2C1_Init+0x74>)
 80006cc:	f002 fd4b 	bl	8003166 <HAL_I2CEx_ConfigDigitalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006d6:	f000 fc21 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200000d4 	.word	0x200000d4
 80006e4:	40005400 	.word	0x40005400
 80006e8:	00101b29 	.word	0x00101b29

080006ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <MX_I2C2_Init+0x74>)
 80006f2:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <MX_I2C2_Init+0x78>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00101B29;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_I2C2_Init+0x74>)
 80006f8:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <MX_I2C2_Init+0x7c>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006fc:	4b18      	ldr	r3, [pc, #96]	; (8000760 <MX_I2C2_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000702:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_I2C2_Init+0x74>)
 8000704:	2201      	movs	r2, #1
 8000706:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000708:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_I2C2_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_I2C2_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_I2C2_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_I2C2_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_I2C2_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000726:	480e      	ldr	r0, [pc, #56]	; (8000760 <MX_I2C2_Init+0x74>)
 8000728:	f002 fc43 	bl	8002fb2 <HAL_I2C_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000732:	f000 fbf3 	bl	8000f1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000736:	2100      	movs	r1, #0
 8000738:	4809      	ldr	r0, [pc, #36]	; (8000760 <MX_I2C2_Init+0x74>)
 800073a:	f002 fcc9 	bl	80030d0 <HAL_I2CEx_ConfigAnalogFilter>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000744:	f000 fbea 	bl	8000f1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000748:	2100      	movs	r1, #0
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_I2C2_Init+0x74>)
 800074c:	f002 fd0b 	bl	8003166 <HAL_I2CEx_ConfigDigitalFilter>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000756:	f000 fbe1 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000128 	.word	0x20000128
 8000764:	40005800 	.word	0x40005800
 8000768:	00101b29 	.word	0x00101b29

0800076c <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000780:	4b23      	ldr	r3, [pc, #140]	; (8000810 <MX_OCTOSPI1_Init+0xa4>)
 8000782:	4a24      	ldr	r2, [pc, #144]	; (8000814 <MX_OCTOSPI1_Init+0xa8>)
 8000784:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000786:	4b22      	ldr	r3, [pc, #136]	; (8000810 <MX_OCTOSPI1_Init+0xa4>)
 8000788:	2201      	movs	r2, #1
 800078a:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800078c:	4b20      	ldr	r3, [pc, #128]	; (8000810 <MX_OCTOSPI1_Init+0xa4>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <MX_OCTOSPI1_Init+0xa4>)
 8000794:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000798:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 800079a:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <MX_OCTOSPI1_Init+0xa4>)
 800079c:	2220      	movs	r2, #32
 800079e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_OCTOSPI1_Init+0xa4>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_OCTOSPI1_Init+0xa4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_OCTOSPI1_Init+0xa4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_OCTOSPI1_Init+0xa4>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_OCTOSPI1_Init+0xa4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_OCTOSPI1_Init+0xa4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_OCTOSPI1_Init+0xa4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_OCTOSPI1_Init+0xa4>)
 80007cc:	2208      	movs	r2, #8
 80007ce:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80007d0:	480f      	ldr	r0, [pc, #60]	; (8000810 <MX_OCTOSPI1_Init+0xa4>)
 80007d2:	f002 fd15 	bl	8003200 <HAL_OSPI_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 80007dc:	f000 fb9e 	bl	8000f1c <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 80007e4:	2301      	movs	r3, #1
 80007e6:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80007e8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80007ec:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80007f4:	4619      	mov	r1, r3
 80007f6:	4806      	ldr	r0, [pc, #24]	; (8000810 <MX_OCTOSPI1_Init+0xa4>)
 80007f8:	f002 fdbc 	bl	8003374 <HAL_OSPIM_Config>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000802:	f000 fb8b 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000017c 	.word	0x2000017c
 8000814:	a0001000 	.word	0xa0001000

08000818 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_SPI1_Init+0x74>)
 800081e:	4a1c      	ldr	r2, [pc, #112]	; (8000890 <MX_SPI1_Init+0x78>)
 8000820:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_SPI1_Init+0x74>)
 8000824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000828:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_SPI1_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000830:	4b16      	ldr	r3, [pc, #88]	; (800088c <MX_SPI1_Init+0x74>)
 8000832:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000836:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_SPI1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_SPI1_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_SPI1_Init+0x74>)
 8000846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800084a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_SPI1_Init+0x74>)
 800084e:	2238      	movs	r2, #56	; 0x38
 8000850:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_SPI1_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_SPI1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_SPI1_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_SPI1_Init+0x74>)
 8000866:	2207      	movs	r2, #7
 8000868:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_SPI1_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_SPI1_Init+0x74>)
 8000872:	2208      	movs	r2, #8
 8000874:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_SPI1_Init+0x74>)
 8000878:	f004 fe6c 	bl	8005554 <HAL_SPI_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000882:	f000 fb4b 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200001cc 	.word	0x200001cc
 8000890:	40013000 	.word	0x40013000

08000894 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_SPI3_Init+0x74>)
 800089a:	4a1c      	ldr	r2, [pc, #112]	; (800090c <MX_SPI3_Init+0x78>)
 800089c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_SPI3_Init+0x74>)
 80008a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_SPI3_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_SPI3_Init+0x74>)
 80008ae:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008b2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_SPI3_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <MX_SPI3_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_SPI3_Init+0x74>)
 80008c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_SPI3_Init+0x74>)
 80008ca:	2208      	movs	r2, #8
 80008cc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_SPI3_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_SPI3_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_SPI3_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_SPI3_Init+0x74>)
 80008e2:	2207      	movs	r2, #7
 80008e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_SPI3_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_SPI3_Init+0x74>)
 80008ee:	2208      	movs	r2, #8
 80008f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_SPI3_Init+0x74>)
 80008f4:	f004 fe2e 	bl	8005554 <HAL_SPI_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008fe:	f000 fb0d 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000230 	.word	0x20000230
 800090c:	40003c00 	.word	0x40003c00

08000910 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08e      	sub	sp, #56	; 0x38
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000916:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000930:	463b      	mov	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]
 800093e:	615a      	str	r2, [r3, #20]
 8000940:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000942:	4b2c      	ldr	r3, [pc, #176]	; (80009f4 <MX_TIM3_Init+0xe4>)
 8000944:	4a2c      	ldr	r2, [pc, #176]	; (80009f8 <MX_TIM3_Init+0xe8>)
 8000946:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000948:	4b2a      	ldr	r3, [pc, #168]	; (80009f4 <MX_TIM3_Init+0xe4>)
 800094a:	2200      	movs	r2, #0
 800094c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b29      	ldr	r3, [pc, #164]	; (80009f4 <MX_TIM3_Init+0xe4>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50;
 8000954:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <MX_TIM3_Init+0xe4>)
 8000956:	2232      	movs	r2, #50	; 0x32
 8000958:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095a:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <MX_TIM3_Init+0xe4>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000960:	4b24      	ldr	r3, [pc, #144]	; (80009f4 <MX_TIM3_Init+0xe4>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000966:	4823      	ldr	r0, [pc, #140]	; (80009f4 <MX_TIM3_Init+0xe4>)
 8000968:	f005 fc9c 	bl	80062a4 <HAL_TIM_Base_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000972:	f000 fad3 	bl	8000f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800097c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000980:	4619      	mov	r1, r3
 8000982:	481c      	ldr	r0, [pc, #112]	; (80009f4 <MX_TIM3_Init+0xe4>)
 8000984:	f005 ffca 	bl	800691c <HAL_TIM_ConfigClockSource>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800098e:	f000 fac5 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000992:	4818      	ldr	r0, [pc, #96]	; (80009f4 <MX_TIM3_Init+0xe4>)
 8000994:	f005 fd46 	bl	8006424 <HAL_TIM_PWM_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800099e:	f000 fabd 	bl	8000f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4810      	ldr	r0, [pc, #64]	; (80009f4 <MX_TIM3_Init+0xe4>)
 80009b2:	f006 fcad 	bl	8007310 <HAL_TIMEx_MasterConfigSynchronization>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80009bc:	f000 faae 	bl	8000f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c0:	2360      	movs	r3, #96	; 0x60
 80009c2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 23;
 80009c4:	2317      	movs	r3, #23
 80009c6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80009cc:	2304      	movs	r3, #4
 80009ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009d0:	463b      	mov	r3, r7
 80009d2:	220c      	movs	r2, #12
 80009d4:	4619      	mov	r1, r3
 80009d6:	4807      	ldr	r0, [pc, #28]	; (80009f4 <MX_TIM3_Init+0xe4>)
 80009d8:	f005 fe8c 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80009e2:	f000 fa9b 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009e6:	4803      	ldr	r0, [pc, #12]	; (80009f4 <MX_TIM3_Init+0xe4>)
 80009e8:	f000 fd12 	bl	8001410 <HAL_TIM_MspPostInit>

}
 80009ec:	bf00      	nop
 80009ee:	3738      	adds	r7, #56	; 0x38
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000294 	.word	0x20000294
 80009f8:	40000400 	.word	0x40000400

080009fc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a00:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <MX_UART4_Init+0x90>)
 8000a02:	4a23      	ldr	r2, [pc, #140]	; (8000a90 <MX_UART4_Init+0x94>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <MX_UART4_Init+0x90>)
 8000a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a0c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <MX_UART4_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <MX_UART4_Init+0x90>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <MX_UART4_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <MX_UART4_Init+0x90>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <MX_UART4_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <MX_UART4_Init+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a32:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <MX_UART4_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_UART4_Init+0x90>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_UART4_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a44:	4811      	ldr	r0, [pc, #68]	; (8000a8c <MX_UART4_Init+0x90>)
 8000a46:	f006 fceb 	bl	8007420 <HAL_UART_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000a50:	f000 fa64 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a54:	2100      	movs	r1, #0
 8000a56:	480d      	ldr	r0, [pc, #52]	; (8000a8c <MX_UART4_Init+0x90>)
 8000a58:	f007 fa1c 	bl	8007e94 <HAL_UARTEx_SetTxFifoThreshold>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000a62:	f000 fa5b 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a66:	2100      	movs	r1, #0
 8000a68:	4808      	ldr	r0, [pc, #32]	; (8000a8c <MX_UART4_Init+0x90>)
 8000a6a:	f007 fa51 	bl	8007f10 <HAL_UARTEx_SetRxFifoThreshold>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000a74:	f000 fa52 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000a78:	4804      	ldr	r0, [pc, #16]	; (8000a8c <MX_UART4_Init+0x90>)
 8000a7a:	f007 f9d2 	bl	8007e22 <HAL_UARTEx_DisableFifoMode>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000a84:	f000 fa4a 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	200002e0 	.word	0x200002e0
 8000a90:	40004c00 	.word	0x40004c00

08000a94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a98:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <MX_USART1_UART_Init+0x90>)
 8000a9a:	4a23      	ldr	r2, [pc, #140]	; (8000b28 <MX_USART1_UART_Init+0x94>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a9e:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <MX_USART1_UART_Init+0x90>)
 8000aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <MX_USART1_UART_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <MX_USART1_UART_Init+0x90>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <MX_USART1_UART_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <MX_USART1_UART_Init+0x90>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <MX_USART1_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <MX_USART1_UART_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aca:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <MX_USART1_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_USART1_UART_Init+0x90>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <MX_USART1_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000adc:	4811      	ldr	r0, [pc, #68]	; (8000b24 <MX_USART1_UART_Init+0x90>)
 8000ade:	f006 fc9f 	bl	8007420 <HAL_UART_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ae8:	f000 fa18 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aec:	2100      	movs	r1, #0
 8000aee:	480d      	ldr	r0, [pc, #52]	; (8000b24 <MX_USART1_UART_Init+0x90>)
 8000af0:	f007 f9d0 	bl	8007e94 <HAL_UARTEx_SetTxFifoThreshold>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000afa:	f000 fa0f 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afe:	2100      	movs	r1, #0
 8000b00:	4808      	ldr	r0, [pc, #32]	; (8000b24 <MX_USART1_UART_Init+0x90>)
 8000b02:	f007 fa05 	bl	8007f10 <HAL_UARTEx_SetRxFifoThreshold>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b0c:	f000 fa06 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b10:	4804      	ldr	r0, [pc, #16]	; (8000b24 <MX_USART1_UART_Init+0x90>)
 8000b12:	f007 f986 	bl	8007e22 <HAL_UARTEx_DisableFifoMode>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b1c:	f000 f9fe 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000370 	.word	0x20000370
 8000b28:	40013800 	.word	0x40013800

08000b2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b30:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <MX_USART2_UART_Init+0x94>)
 8000b32:	4a24      	ldr	r2, [pc, #144]	; (8000bc4 <MX_USART2_UART_Init+0x98>)
 8000b34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b36:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <MX_USART2_UART_Init+0x94>)
 8000b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <MX_USART2_UART_Init+0x94>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <MX_USART2_UART_Init+0x94>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <MX_USART2_UART_Init+0x94>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <MX_USART2_UART_Init+0x94>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000b56:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <MX_USART2_UART_Init+0x94>)
 8000b58:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b5c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5e:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <MX_USART2_UART_Init+0x94>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <MX_USART2_UART_Init+0x94>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <MX_USART2_UART_Init+0x94>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MX_USART2_UART_Init+0x94>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b76:	4812      	ldr	r0, [pc, #72]	; (8000bc0 <MX_USART2_UART_Init+0x94>)
 8000b78:	f006 fc52 	bl	8007420 <HAL_UART_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000b82:	f000 f9cb 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b86:	2100      	movs	r1, #0
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <MX_USART2_UART_Init+0x94>)
 8000b8a:	f007 f983 	bl	8007e94 <HAL_UARTEx_SetTxFifoThreshold>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000b94:	f000 f9c2 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4809      	ldr	r0, [pc, #36]	; (8000bc0 <MX_USART2_UART_Init+0x94>)
 8000b9c:	f007 f9b8 	bl	8007f10 <HAL_UARTEx_SetRxFifoThreshold>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000ba6:	f000 f9b9 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_USART2_UART_Init+0x94>)
 8000bac:	f007 f939 	bl	8007e22 <HAL_UARTEx_DisableFifoMode>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000bb6:	f000 f9b1 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000400 	.word	0x20000400
 8000bc4:	40004400 	.word	0x40004400

08000bc8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bcc:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000bce:	4a23      	ldr	r2, [pc, #140]	; (8000c5c <MX_USART3_UART_Init+0x94>)
 8000bd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bd2:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000bd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bda:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000be0:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000bee:	220c      	movs	r2, #12
 8000bf0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c10:	4811      	ldr	r0, [pc, #68]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c12:	f006 fc05 	bl	8007420 <HAL_UART_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c1c:	f000 f97e 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c20:	2100      	movs	r1, #0
 8000c22:	480d      	ldr	r0, [pc, #52]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c24:	f007 f936 	bl	8007e94 <HAL_UARTEx_SetTxFifoThreshold>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c2e:	f000 f975 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c32:	2100      	movs	r1, #0
 8000c34:	4808      	ldr	r0, [pc, #32]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c36:	f007 f96b 	bl	8007f10 <HAL_UARTEx_SetRxFifoThreshold>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c40:	f000 f96c 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_USART3_UART_Init+0x90>)
 8000c46:	f007 f8ec 	bl	8007e22 <HAL_UARTEx_DisableFifoMode>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c50:	f000 f964 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000490 	.word	0x20000490
 8000c5c:	40004800 	.word	0x40004800

08000c60 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08c      	sub	sp, #48	; 0x30
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c86:	4ba0      	ldr	r3, [pc, #640]	; (8000f08 <MX_GPIO_Init+0x298>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8a:	4a9f      	ldr	r2, [pc, #636]	; (8000f08 <MX_GPIO_Init+0x298>)
 8000c8c:	f043 0310 	orr.w	r3, r3, #16
 8000c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c92:	4b9d      	ldr	r3, [pc, #628]	; (8000f08 <MX_GPIO_Init+0x298>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	f003 0310 	and.w	r3, r3, #16
 8000c9a:	61bb      	str	r3, [r7, #24]
 8000c9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9e:	4b9a      	ldr	r3, [pc, #616]	; (8000f08 <MX_GPIO_Init+0x298>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	4a99      	ldr	r2, [pc, #612]	; (8000f08 <MX_GPIO_Init+0x298>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000caa:	4b97      	ldr	r3, [pc, #604]	; (8000f08 <MX_GPIO_Init+0x298>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb6:	4b94      	ldr	r3, [pc, #592]	; (8000f08 <MX_GPIO_Init+0x298>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cba:	4a93      	ldr	r2, [pc, #588]	; (8000f08 <MX_GPIO_Init+0x298>)
 8000cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc2:	4b91      	ldr	r3, [pc, #580]	; (8000f08 <MX_GPIO_Init+0x298>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b8e      	ldr	r3, [pc, #568]	; (8000f08 <MX_GPIO_Init+0x298>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	4a8d      	ldr	r2, [pc, #564]	; (8000f08 <MX_GPIO_Init+0x298>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cda:	4b8b      	ldr	r3, [pc, #556]	; (8000f08 <MX_GPIO_Init+0x298>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	4b88      	ldr	r3, [pc, #544]	; (8000f08 <MX_GPIO_Init+0x298>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	4a87      	ldr	r2, [pc, #540]	; (8000f08 <MX_GPIO_Init+0x298>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf2:	4b85      	ldr	r3, [pc, #532]	; (8000f08 <MX_GPIO_Init+0x298>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfe:	4b82      	ldr	r3, [pc, #520]	; (8000f08 <MX_GPIO_Init+0x298>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	4a81      	ldr	r2, [pc, #516]	; (8000f08 <MX_GPIO_Init+0x298>)
 8000d04:	f043 0308 	orr.w	r3, r3, #8
 8000d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0a:	4b7f      	ldr	r3, [pc, #508]	; (8000f08 <MX_GPIO_Init+0x298>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	f003 0308 	and.w	r3, r3, #8
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f240 1105 	movw	r1, #261	; 0x105
 8000d1c:	487b      	ldr	r0, [pc, #492]	; (8000f0c <MX_GPIO_Init+0x29c>)
 8000d1e:	f002 f90d 	bl	8002f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d22:	2200      	movs	r2, #0
 8000d24:	f240 214f 	movw	r1, #591	; 0x24f
 8000d28:	4879      	ldr	r0, [pc, #484]	; (8000f10 <MX_GPIO_Init+0x2a0>)
 8000d2a:	f002 f907 	bl	8002f3c <HAL_GPIO_WritePin>
                          |VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f248 110c 	movw	r1, #33036	; 0x810c
 8000d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d38:	f002 f900 	bl	8002f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f24f 0134 	movw	r1, #61492	; 0xf034
 8000d42:	4874      	ldr	r0, [pc, #464]	; (8000f14 <MX_GPIO_Init+0x2a4>)
 8000d44:	f002 f8fa 	bl	8002f3c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f242 0183 	movw	r1, #8323	; 0x2083
 8000d4e:	4872      	ldr	r0, [pc, #456]	; (8000f18 <MX_GPIO_Init+0x2a8>)
 8000d50:	f002 f8f4 	bl	8002f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000d54:	f240 1305 	movw	r3, #261	; 0x105
 8000d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4867      	ldr	r0, [pc, #412]	; (8000f0c <MX_GPIO_Init+0x29c>)
 8000d6e:	f001 ff53 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000d72:	236a      	movs	r3, #106	; 0x6a
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4619      	mov	r1, r3
 8000d86:	4861      	ldr	r0, [pc, #388]	; (8000f0c <MX_GPIO_Init+0x29c>)
 8000d88:	f001 ff46 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000d8c:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9c:	f107 031c 	add.w	r3, r7, #28
 8000da0:	4619      	mov	r1, r3
 8000da2:	485b      	ldr	r0, [pc, #364]	; (8000f10 <MX_GPIO_Init+0x2a0>)
 8000da4:	f001 ff38 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000da8:	230f      	movs	r3, #15
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4854      	ldr	r0, [pc, #336]	; (8000f10 <MX_GPIO_Init+0x2a0>)
 8000dc0:	f001 ff2a 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000dc4:	f248 130c 	movw	r3, #33036	; 0x810c
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de0:	f001 ff1a 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : D7_Pin */
  GPIO_InitStruct.Pin = D7_Pin;
 8000de4:	2310      	movs	r3, #16
 8000de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000de8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfc:	f001 ff0c 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000e00:	2301      	movs	r3, #1
 8000e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e04:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	483f      	ldr	r0, [pc, #252]	; (8000f14 <MX_GPIO_Init+0x2a4>)
 8000e16:	f001 feff 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e1a:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000e1e:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e20:	2301      	movs	r3, #1
 8000e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	4838      	ldr	r0, [pc, #224]	; (8000f14 <MX_GPIO_Init+0x2a4>)
 8000e34:	f001 fef0 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8000e38:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8000e3c:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e3e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4832      	ldr	r0, [pc, #200]	; (8000f18 <MX_GPIO_Init+0x2a8>)
 8000e50:	f001 fee2 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8000e54:	f242 0383 	movw	r3, #8323	; 0x2083
 8000e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	482a      	ldr	r0, [pc, #168]	; (8000f18 <MX_GPIO_Init+0x2a8>)
 8000e6e:	f001 fed3 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000e72:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4821      	ldr	r0, [pc, #132]	; (8000f10 <MX_GPIO_Init+0x2a0>)
 8000e8c:	f001 fec4 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea8:	f001 feb6 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000eac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ebe:	230a      	movs	r3, #10
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ecc:	f001 fea4 	bl	8002c18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	200a      	movs	r0, #10
 8000ed6:	f001 fcfc 	bl	80028d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000eda:	200a      	movs	r0, #10
 8000edc:	f001 fd15 	bl	800290a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2017      	movs	r0, #23
 8000ee6:	f001 fcf4 	bl	80028d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000eea:	2017      	movs	r0, #23
 8000eec:	f001 fd0d 	bl	800290a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2028      	movs	r0, #40	; 0x28
 8000ef6:	f001 fcec 	bl	80028d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000efa:	2028      	movs	r0, #40	; 0x28
 8000efc:	f001 fd05 	bl	800290a <HAL_NVIC_EnableIRQ>

}
 8000f00:	bf00      	nop
 8000f02:	3730      	adds	r7, #48	; 0x30
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	48001000 	.word	0x48001000
 8000f10:	48000800 	.word	0x48000800
 8000f14:	48000400 	.word	0x48000400
 8000f18:	48000c00 	.word	0x48000c00

08000f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f20:	b672      	cpsid	i
}
 8000f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <Error_Handler+0x8>
	...

08000f28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <HAL_MspInit+0x44>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f32:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <HAL_MspInit+0x44>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6613      	str	r3, [r2, #96]	; 0x60
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <HAL_MspInit+0x44>)
 8000f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <HAL_MspInit+0x44>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4a:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <HAL_MspInit+0x44>)
 8000f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f50:	6593      	str	r3, [r2, #88]	; 0x58
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_MspInit+0x44>)
 8000f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000

08000f70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a15      	ldr	r2, [pc, #84]	; (8000fe4 <HAL_ADC_MspInit+0x74>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d123      	bne.n	8000fda <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <HAL_ADC_MspInit+0x78>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4a14      	ldr	r2, [pc, #80]	; (8000fe8 <HAL_ADC_MspInit+0x78>)
 8000f98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_ADC_MspInit+0x78>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <HAL_ADC_MspInit+0x78>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <HAL_ADC_MspInit+0x78>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <HAL_ADC_MspInit+0x78>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8000fc2:	2330      	movs	r3, #48	; 0x30
 8000fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fc6:	230b      	movs	r3, #11
 8000fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <HAL_ADC_MspInit+0x7c>)
 8000fd6:	f001 fe1f 	bl	8002c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fda:	bf00      	nop
 8000fdc:	3728      	adds	r7, #40	; 0x28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	50040000 	.word	0x50040000
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	48000800 	.word	0x48000800

08000ff0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b0ae      	sub	sp, #184	; 0xb8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	2294      	movs	r2, #148	; 0x94
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f007 f82d 	bl	8008070 <memset>
  if(DFSDM1_Init == 0)
 8001016:	4b25      	ldr	r3, [pc, #148]	; (80010ac <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d142      	bne.n	80010a4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800101e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001022:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001024:	2300      	movs	r3, #0
 8001026:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800102a:	f107 0310 	add.w	r3, r7, #16
 800102e:	4618      	mov	r0, r3
 8001030:	f003 fd68 	bl	8004b04 <HAL_RCCEx_PeriphCLKConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800103a:	f7ff ff6f 	bl	8000f1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001042:	4a1b      	ldr	r2, [pc, #108]	; (80010b0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001044:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001048:	6613      	str	r3, [r2, #96]	; 0x60
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800104c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a15      	ldr	r2, [pc, #84]	; (80010b0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800105c:	f043 0310 	orr.w	r3, r3, #16
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0310 	and.w	r3, r3, #16
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800106e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001072:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001088:	2306      	movs	r3, #6
 800108a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800108e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001092:	4619      	mov	r1, r3
 8001094:	4807      	ldr	r0, [pc, #28]	; (80010b4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001096:	f001 fdbf 	bl	8002c18 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <HAL_DFSDM_ChannelMspInit+0xbc>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	3301      	adds	r3, #1
 80010a0:	4a02      	ldr	r2, [pc, #8]	; (80010ac <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010a2:	6013      	str	r3, [r2, #0]
  }

}
 80010a4:	bf00      	nop
 80010a6:	37b8      	adds	r7, #184	; 0xb8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000530 	.word	0x20000530
 80010b0:	40021000 	.word	0x40021000
 80010b4:	48001000 	.word	0x48001000

080010b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0b0      	sub	sp, #192	; 0xc0
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d0:	f107 0318 	add.w	r3, r7, #24
 80010d4:	2294      	movs	r2, #148	; 0x94
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f006 ffc9 	bl	8008070 <memset>
  if(hi2c->Instance==I2C1)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a42      	ldr	r2, [pc, #264]	; (80011ec <HAL_I2C_MspInit+0x134>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d13c      	bne.n	8001162 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010e8:	2340      	movs	r3, #64	; 0x40
 80010ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f0:	f107 0318 	add.w	r3, r7, #24
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 fd05 	bl	8004b04 <HAL_RCCEx_PeriphCLKConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001100:	f7ff ff0c 	bl	8000f1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001104:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <HAL_I2C_MspInit+0x138>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001108:	4a39      	ldr	r2, [pc, #228]	; (80011f0 <HAL_I2C_MspInit+0x138>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001110:	4b37      	ldr	r3, [pc, #220]	; (80011f0 <HAL_I2C_MspInit+0x138>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800111c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001120:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001124:	2312      	movs	r3, #18
 8001126:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800112a:	2301      	movs	r3, #1
 800112c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001136:	2304      	movs	r3, #4
 8001138:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001140:	4619      	mov	r1, r3
 8001142:	482c      	ldr	r0, [pc, #176]	; (80011f4 <HAL_I2C_MspInit+0x13c>)
 8001144:	f001 fd68 	bl	8002c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001148:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <HAL_I2C_MspInit+0x138>)
 800114a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114c:	4a28      	ldr	r2, [pc, #160]	; (80011f0 <HAL_I2C_MspInit+0x138>)
 800114e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001152:	6593      	str	r3, [r2, #88]	; 0x58
 8001154:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <HAL_I2C_MspInit+0x138>)
 8001156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001160:	e040      	b.n	80011e4 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a24      	ldr	r2, [pc, #144]	; (80011f8 <HAL_I2C_MspInit+0x140>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d13b      	bne.n	80011e4 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001170:	2300      	movs	r3, #0
 8001172:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001174:	f107 0318 	add.w	r3, r7, #24
 8001178:	4618      	mov	r0, r3
 800117a:	f003 fcc3 	bl	8004b04 <HAL_RCCEx_PeriphCLKConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001184:	f7ff feca 	bl	8000f1c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <HAL_I2C_MspInit+0x138>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118c:	4a18      	ldr	r2, [pc, #96]	; (80011f0 <HAL_I2C_MspInit+0x138>)
 800118e:	f043 0302 	orr.w	r3, r3, #2
 8001192:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <HAL_I2C_MspInit+0x138>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80011a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a8:	2312      	movs	r3, #18
 80011aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011ba:	2304      	movs	r3, #4
 80011bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011c4:	4619      	mov	r1, r3
 80011c6:	480b      	ldr	r0, [pc, #44]	; (80011f4 <HAL_I2C_MspInit+0x13c>)
 80011c8:	f001 fd26 	bl	8002c18 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_I2C_MspInit+0x138>)
 80011ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d0:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <HAL_I2C_MspInit+0x138>)
 80011d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011d6:	6593      	str	r3, [r2, #88]	; 0x58
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HAL_I2C_MspInit+0x138>)
 80011da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	68bb      	ldr	r3, [r7, #8]
}
 80011e4:	bf00      	nop
 80011e6:	37c0      	adds	r7, #192	; 0xc0
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40005400 	.word	0x40005400
 80011f0:	40021000 	.word	0x40021000
 80011f4:	48000400 	.word	0x48000400
 80011f8:	40005800 	.word	0x40005800

080011fc <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b0b0      	sub	sp, #192	; 0xc0
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001214:	f107 0318 	add.w	r3, r7, #24
 8001218:	2294      	movs	r2, #148	; 0x94
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f006 ff27 	bl	8008070 <memset>
  if(hospi->Instance==OCTOSPI1)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a28      	ldr	r2, [pc, #160]	; (80012c8 <HAL_OSPI_MspInit+0xcc>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d149      	bne.n	80012c0 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800122c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001230:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001232:	2300      	movs	r3, #0
 8001234:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001238:	f107 0318 	add.w	r3, r7, #24
 800123c:	4618      	mov	r0, r3
 800123e:	f003 fc61 	bl	8004b04 <HAL_RCCEx_PeriphCLKConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001248:	f7ff fe68 	bl	8000f1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 800124c:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <HAL_OSPI_MspInit+0xd0>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001250:	4a1e      	ldr	r2, [pc, #120]	; (80012cc <HAL_OSPI_MspInit+0xd0>)
 8001252:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001256:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <HAL_OSPI_MspInit+0xd0>)
 800125a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_OSPI_MspInit+0xd0>)
 8001266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001268:	4a18      	ldr	r2, [pc, #96]	; (80012cc <HAL_OSPI_MspInit+0xd0>)
 800126a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126e:	6513      	str	r3, [r2, #80]	; 0x50
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <HAL_OSPI_MspInit+0xd0>)
 8001272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <HAL_OSPI_MspInit+0xd0>)
 800127e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001280:	4a12      	ldr	r2, [pc, #72]	; (80012cc <HAL_OSPI_MspInit+0xd0>)
 8001282:	f043 0310 	orr.w	r3, r3, #16
 8001286:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001288:	4b10      	ldr	r3, [pc, #64]	; (80012cc <HAL_OSPI_MspInit+0xd0>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001294:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001298:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80012ae:	230a      	movs	r3, #10
 80012b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012b8:	4619      	mov	r1, r3
 80012ba:	4805      	ldr	r0, [pc, #20]	; (80012d0 <HAL_OSPI_MspInit+0xd4>)
 80012bc:	f001 fcac 	bl	8002c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80012c0:	bf00      	nop
 80012c2:	37c0      	adds	r7, #192	; 0xc0
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	a0001000 	.word	0xa0001000
 80012cc:	40021000 	.word	0x40021000
 80012d0:	48001000 	.word	0x48001000

080012d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08c      	sub	sp, #48	; 0x30
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a33      	ldr	r2, [pc, #204]	; (80013c0 <HAL_SPI_MspInit+0xec>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d131      	bne.n	800135a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012f6:	4b33      	ldr	r3, [pc, #204]	; (80013c4 <HAL_SPI_MspInit+0xf0>)
 80012f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fa:	4a32      	ldr	r2, [pc, #200]	; (80013c4 <HAL_SPI_MspInit+0xf0>)
 80012fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001300:	6613      	str	r3, [r2, #96]	; 0x60
 8001302:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <HAL_SPI_MspInit+0xf0>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800130a:	61bb      	str	r3, [r7, #24]
 800130c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <HAL_SPI_MspInit+0xf0>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	4a2c      	ldr	r2, [pc, #176]	; (80013c4 <HAL_SPI_MspInit+0xf0>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131a:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <HAL_SPI_MspInit+0xf0>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001326:	23e0      	movs	r3, #224	; 0xe0
 8001328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001336:	2305      	movs	r3, #5
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001344:	f001 fc68 	bl	8002c18 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001348:	2200      	movs	r2, #0
 800134a:	2100      	movs	r1, #0
 800134c:	2023      	movs	r0, #35	; 0x23
 800134e:	f001 fac0 	bl	80028d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001352:	2023      	movs	r0, #35	; 0x23
 8001354:	f001 fad9 	bl	800290a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001358:	e02d      	b.n	80013b6 <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI3)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <HAL_SPI_MspInit+0xf4>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d128      	bne.n	80013b6 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001364:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <HAL_SPI_MspInit+0xf0>)
 8001366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001368:	4a16      	ldr	r2, [pc, #88]	; (80013c4 <HAL_SPI_MspInit+0xf0>)
 800136a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800136e:	6593      	str	r3, [r2, #88]	; 0x58
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <HAL_SPI_MspInit+0xf0>)
 8001372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_SPI_MspInit+0xf0>)
 800137e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001380:	4a10      	ldr	r2, [pc, #64]	; (80013c4 <HAL_SPI_MspInit+0xf0>)
 8001382:	f043 0304 	orr.w	r3, r3, #4
 8001386:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_SPI_MspInit+0xf0>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001394:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a2:	2303      	movs	r3, #3
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013a6:	2306      	movs	r3, #6
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	4619      	mov	r1, r3
 80013b0:	4806      	ldr	r0, [pc, #24]	; (80013cc <HAL_SPI_MspInit+0xf8>)
 80013b2:	f001 fc31 	bl	8002c18 <HAL_GPIO_Init>
}
 80013b6:	bf00      	nop
 80013b8:	3730      	adds	r7, #48	; 0x30
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40013000 	.word	0x40013000
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40003c00 	.word	0x40003c00
 80013cc:	48000800 	.word	0x48000800

080013d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <HAL_TIM_Base_MspInit+0x38>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d10b      	bne.n	80013fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_TIM_Base_MspInit+0x3c>)
 80013e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e6:	4a09      	ldr	r2, [pc, #36]	; (800140c <HAL_TIM_Base_MspInit+0x3c>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	6593      	str	r3, [r2, #88]	; 0x58
 80013ee:	4b07      	ldr	r3, [pc, #28]	; (800140c <HAL_TIM_Base_MspInit+0x3c>)
 80013f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40000400 	.word	0x40000400
 800140c:	40021000 	.word	0x40021000

08001410 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a11      	ldr	r2, [pc, #68]	; (8001474 <HAL_TIM_MspPostInit+0x64>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d11b      	bne.n	800146a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_TIM_MspPostInit+0x68>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <HAL_TIM_MspPostInit+0x68>)
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_TIM_MspPostInit+0x68>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = ARD_D6_Pin;
 800144a:	2302      	movs	r3, #2
 800144c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800145a:	2302      	movs	r3, #2
 800145c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	4619      	mov	r1, r3
 8001464:	4805      	ldr	r0, [pc, #20]	; (800147c <HAL_TIM_MspPostInit+0x6c>)
 8001466:	f001 fbd7 	bl	8002c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800146a:	bf00      	nop
 800146c:	3720      	adds	r7, #32
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40000400 	.word	0x40000400
 8001478:	40021000 	.word	0x40021000
 800147c:	48000400 	.word	0x48000400

08001480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b0b4      	sub	sp, #208	; 0xd0
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800149c:	2294      	movs	r2, #148	; 0x94
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f006 fde5 	bl	8008070 <memset>
  if(huart->Instance==UART4)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a83      	ldr	r2, [pc, #524]	; (80016b8 <HAL_UART_MspInit+0x238>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d13c      	bne.n	800152a <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80014b0:	2308      	movs	r3, #8
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014bc:	4618      	mov	r0, r3
 80014be:	f003 fb21 	bl	8004b04 <HAL_RCCEx_PeriphCLKConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014c8:	f7ff fd28 	bl	8000f1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80014cc:	4b7b      	ldr	r3, [pc, #492]	; (80016bc <HAL_UART_MspInit+0x23c>)
 80014ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d0:	4a7a      	ldr	r2, [pc, #488]	; (80016bc <HAL_UART_MspInit+0x23c>)
 80014d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014d6:	6593      	str	r3, [r2, #88]	; 0x58
 80014d8:	4b78      	ldr	r3, [pc, #480]	; (80016bc <HAL_UART_MspInit+0x23c>)
 80014da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e4:	4b75      	ldr	r3, [pc, #468]	; (80016bc <HAL_UART_MspInit+0x23c>)
 80014e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e8:	4a74      	ldr	r2, [pc, #464]	; (80016bc <HAL_UART_MspInit+0x23c>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f0:	4b72      	ldr	r3, [pc, #456]	; (80016bc <HAL_UART_MspInit+0x23c>)
 80014f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	623b      	str	r3, [r7, #32]
 80014fa:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80014fc:	2303      	movs	r3, #3
 80014fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001514:	2308      	movs	r3, #8
 8001516:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800151e:	4619      	mov	r1, r3
 8001520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001524:	f001 fb78 	bl	8002c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001528:	e0c2      	b.n	80016b0 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a64      	ldr	r2, [pc, #400]	; (80016c0 <HAL_UART_MspInit+0x240>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d13b      	bne.n	80015ac <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001534:	2301      	movs	r3, #1
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001538:	2300      	movs	r3, #0
 800153a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800153c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001540:	4618      	mov	r0, r3
 8001542:	f003 fadf 	bl	8004b04 <HAL_RCCEx_PeriphCLKConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 800154c:	f7ff fce6 	bl	8000f1c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001550:	4b5a      	ldr	r3, [pc, #360]	; (80016bc <HAL_UART_MspInit+0x23c>)
 8001552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001554:	4a59      	ldr	r2, [pc, #356]	; (80016bc <HAL_UART_MspInit+0x23c>)
 8001556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155a:	6613      	str	r3, [r2, #96]	; 0x60
 800155c:	4b57      	ldr	r3, [pc, #348]	; (80016bc <HAL_UART_MspInit+0x23c>)
 800155e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001564:	61fb      	str	r3, [r7, #28]
 8001566:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001568:	4b54      	ldr	r3, [pc, #336]	; (80016bc <HAL_UART_MspInit+0x23c>)
 800156a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156c:	4a53      	ldr	r2, [pc, #332]	; (80016bc <HAL_UART_MspInit+0x23c>)
 800156e:	f043 0302 	orr.w	r3, r3, #2
 8001572:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001574:	4b51      	ldr	r3, [pc, #324]	; (80016bc <HAL_UART_MspInit+0x23c>)
 8001576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	61bb      	str	r3, [r7, #24]
 800157e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001580:	23c0      	movs	r3, #192	; 0xc0
 8001582:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001592:	2303      	movs	r3, #3
 8001594:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001598:	2307      	movs	r3, #7
 800159a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015a2:	4619      	mov	r1, r3
 80015a4:	4847      	ldr	r0, [pc, #284]	; (80016c4 <HAL_UART_MspInit+0x244>)
 80015a6:	f001 fb37 	bl	8002c18 <HAL_GPIO_Init>
}
 80015aa:	e081      	b.n	80016b0 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a45      	ldr	r2, [pc, #276]	; (80016c8 <HAL_UART_MspInit+0x248>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d13b      	bne.n	800162e <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015b6:	2302      	movs	r3, #2
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 fa9e 	bl	8004b04 <HAL_RCCEx_PeriphCLKConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_UART_MspInit+0x152>
      Error_Handler();
 80015ce:	f7ff fca5 	bl	8000f1c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015d2:	4b3a      	ldr	r3, [pc, #232]	; (80016bc <HAL_UART_MspInit+0x23c>)
 80015d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d6:	4a39      	ldr	r2, [pc, #228]	; (80016bc <HAL_UART_MspInit+0x23c>)
 80015d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015dc:	6593      	str	r3, [r2, #88]	; 0x58
 80015de:	4b37      	ldr	r3, [pc, #220]	; (80016bc <HAL_UART_MspInit+0x23c>)
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ea:	4b34      	ldr	r3, [pc, #208]	; (80016bc <HAL_UART_MspInit+0x23c>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	4a33      	ldr	r2, [pc, #204]	; (80016bc <HAL_UART_MspInit+0x23c>)
 80015f0:	f043 0308 	orr.w	r3, r3, #8
 80015f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f6:	4b31      	ldr	r3, [pc, #196]	; (80016bc <HAL_UART_MspInit+0x23c>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001602:	2378      	movs	r3, #120	; 0x78
 8001604:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800161a:	2307      	movs	r3, #7
 800161c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001620:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001624:	4619      	mov	r1, r3
 8001626:	4829      	ldr	r0, [pc, #164]	; (80016cc <HAL_UART_MspInit+0x24c>)
 8001628:	f001 faf6 	bl	8002c18 <HAL_GPIO_Init>
}
 800162c:	e040      	b.n	80016b0 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a27      	ldr	r2, [pc, #156]	; (80016d0 <HAL_UART_MspInit+0x250>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d13b      	bne.n	80016b0 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001638:	2304      	movs	r3, #4
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800163c:	2300      	movs	r3, #0
 800163e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001640:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001644:	4618      	mov	r0, r3
 8001646:	f003 fa5d 	bl	8004b04 <HAL_RCCEx_PeriphCLKConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8001650:	f7ff fc64 	bl	8000f1c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001654:	4b19      	ldr	r3, [pc, #100]	; (80016bc <HAL_UART_MspInit+0x23c>)
 8001656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001658:	4a18      	ldr	r2, [pc, #96]	; (80016bc <HAL_UART_MspInit+0x23c>)
 800165a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800165e:	6593      	str	r3, [r2, #88]	; 0x58
 8001660:	4b16      	ldr	r3, [pc, #88]	; (80016bc <HAL_UART_MspInit+0x23c>)
 8001662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001664:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <HAL_UART_MspInit+0x23c>)
 800166e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001670:	4a12      	ldr	r2, [pc, #72]	; (80016bc <HAL_UART_MspInit+0x23c>)
 8001672:	f043 0308 	orr.w	r3, r3, #8
 8001676:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001678:	4b10      	ldr	r3, [pc, #64]	; (80016bc <HAL_UART_MspInit+0x23c>)
 800167a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001684:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001688:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800169e:	2307      	movs	r3, #7
 80016a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016a8:	4619      	mov	r1, r3
 80016aa:	4808      	ldr	r0, [pc, #32]	; (80016cc <HAL_UART_MspInit+0x24c>)
 80016ac:	f001 fab4 	bl	8002c18 <HAL_GPIO_Init>
}
 80016b0:	bf00      	nop
 80016b2:	37d0      	adds	r7, #208	; 0xd0
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40004c00 	.word	0x40004c00
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40013800 	.word	0x40013800
 80016c4:	48000400 	.word	0x48000400
 80016c8:	40004400 	.word	0x40004400
 80016cc:	48000c00 	.word	0x48000c00
 80016d0:	40004800 	.word	0x40004800

080016d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <NMI_Handler+0x4>

080016da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <MemManage_Handler+0x4>

080016e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <BusFault_Handler+0x4>

080016ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <UsageFault_Handler+0x4>

080016f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001720:	f000 f8d2 	bl	80018c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}

08001728 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	setDataReady();
 800172c:	f7fe fda6 	bl	800027c <setDataReady>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(D7_Pin);
 8001730:	2010      	movs	r0, #16
 8001732:	f001 fc1b 	bl	8002f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}

0800173a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800173e:	2020      	movs	r0, #32
 8001740:	f001 fc14 	bl	8002f6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001744:	2040      	movs	r0, #64	; 0x40
 8001746:	f001 fc11 	bl	8002f6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800174a:	2080      	movs	r0, #128	; 0x80
 800174c:	f001 fc0e 	bl	8002f6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001750:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001754:	f001 fc0a 	bl	8002f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <SPI1_IRQHandler+0x10>)
 8001762:	f004 f8fb 	bl	800595c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200001cc 	.word	0x200001cc

08001770 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8001774:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001778:	f001 fbf8 	bl	8002f6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800177c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001780:	f001 fbf4 	bl	8002f6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8001784:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001788:	f001 fbf0 	bl	8002f6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800178c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001790:	f001 fbec 	bl	8002f6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001794:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001798:	f001 fbe8 	bl	8002f6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800179c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017a0:	f001 fbe4 	bl	8002f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <SystemInit+0x20>)
 80017ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <SystemInit+0x20>)
 80017b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001804 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017d0:	f7ff ffea 	bl	80017a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d4:	480c      	ldr	r0, [pc, #48]	; (8001808 <LoopForever+0x6>)
  ldr r1, =_edata
 80017d6:	490d      	ldr	r1, [pc, #52]	; (800180c <LoopForever+0xa>)
  ldr r2, =_sidata
 80017d8:	4a0d      	ldr	r2, [pc, #52]	; (8001810 <LoopForever+0xe>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017dc:	e002      	b.n	80017e4 <LoopCopyDataInit>

080017de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e2:	3304      	adds	r3, #4

080017e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e8:	d3f9      	bcc.n	80017de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ea:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017ec:	4c0a      	ldr	r4, [pc, #40]	; (8001818 <LoopForever+0x16>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f0:	e001      	b.n	80017f6 <LoopFillZerobss>

080017f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f4:	3204      	adds	r2, #4

080017f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f8:	d3fb      	bcc.n	80017f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017fa:	f006 fc15 	bl	8008028 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017fe:	f7fe fdb3 	bl	8000368 <main>

08001802 <LoopForever>:

LoopForever:
    b LoopForever
 8001802:	e7fe      	b.n	8001802 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001804:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800180c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001810:	080083e0 	.word	0x080083e0
  ldr r2, =_sbss
 8001814:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001818:	2000055c 	.word	0x2000055c

0800181c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800181c:	e7fe      	b.n	800181c <ADC1_IRQHandler>

0800181e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001828:	2003      	movs	r0, #3
 800182a:	f001 f847 	bl	80028bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800182e:	2000      	movs	r0, #0
 8001830:	f000 f80e 	bl	8001850 <HAL_InitTick>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	71fb      	strb	r3, [r7, #7]
 800183e:	e001      	b.n	8001844 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001840:	f7ff fb72 	bl	8000f28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001844:	79fb      	ldrb	r3, [r7, #7]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <HAL_InitTick+0x6c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d023      	beq.n	80018ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001864:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <HAL_InitTick+0x70>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <HAL_InitTick+0x6c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4619      	mov	r1, r3
 800186e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001872:	fbb3 f3f1 	udiv	r3, r3, r1
 8001876:	fbb2 f3f3 	udiv	r3, r2, r3
 800187a:	4618      	mov	r0, r3
 800187c:	f001 f853 	bl	8002926 <HAL_SYSTICK_Config>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10f      	bne.n	80018a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b0f      	cmp	r3, #15
 800188a:	d809      	bhi.n	80018a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188c:	2200      	movs	r2, #0
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001894:	f001 f81d 	bl	80028d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001898:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <HAL_InitTick+0x74>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	e007      	b.n	80018b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	e004      	b.n	80018b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	73fb      	strb	r3, [r7, #15]
 80018aa:	e001      	b.n	80018b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000014 	.word	0x20000014
 80018c0:	2000000c 	.word	0x2000000c
 80018c4:	20000010 	.word	0x20000010

080018c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_IncTick+0x20>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_IncTick+0x24>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	4a04      	ldr	r2, [pc, #16]	; (80018ec <HAL_IncTick+0x24>)
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000014 	.word	0x20000014
 80018ec:	20000534 	.word	0x20000534

080018f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return uwTick;
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <HAL_GetTick+0x14>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000534 	.word	0x20000534

08001908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001910:	f7ff ffee 	bl	80018f0 <HAL_GetTick>
 8001914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001920:	d005      	beq.n	800192e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_Delay+0x44>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4413      	add	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800192e:	bf00      	nop
 8001930:	f7ff ffde 	bl	80018f0 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	429a      	cmp	r2, r3
 800193e:	d8f7      	bhi.n	8001930 <HAL_Delay+0x28>
  {
  }
}
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000014 	.word	0x20000014

08001950 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	609a      	str	r2, [r3, #8]
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	609a      	str	r2, [r3, #8]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	3360      	adds	r3, #96	; 0x60
 80019ca:	461a      	mov	r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <LL_ADC_SetOffset+0x44>)
 80019da:	4013      	ands	r3, r2
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	4313      	orrs	r3, r2
 80019e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019f0:	bf00      	nop
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	03fff000 	.word	0x03fff000

08001a00 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3360      	adds	r3, #96	; 0x60
 8001a0e:	461a      	mov	r2, r3
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3360      	adds	r3, #96	; 0x60
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	431a      	orrs	r2, r3
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a56:	bf00      	nop
 8001a58:	371c      	adds	r7, #28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	615a      	str	r2, [r3, #20]
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b087      	sub	sp, #28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	3330      	adds	r3, #48	; 0x30
 8001a98:	461a      	mov	r2, r3
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	4413      	add	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f003 031f 	and.w	r3, r3, #31
 8001ab2:	211f      	movs	r1, #31
 8001ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	401a      	ands	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	0e9b      	lsrs	r3, r3, #26
 8001ac0:	f003 011f 	and.w	r1, r3, #31
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ad4:	bf00      	nop
 8001ad6:	371c      	adds	r7, #28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b087      	sub	sp, #28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	3314      	adds	r3, #20
 8001af0:	461a      	mov	r2, r3
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	0e5b      	lsrs	r3, r3, #25
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	4413      	add	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	0d1b      	lsrs	r3, r3, #20
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	2107      	movs	r1, #7
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	401a      	ands	r2, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	0d1b      	lsrs	r3, r3, #20
 8001b1a:	f003 031f 	and.w	r3, r3, #31
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	fa01 f303 	lsl.w	r3, r1, r3
 8001b24:	431a      	orrs	r2, r3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b2a:	bf00      	nop
 8001b2c:	371c      	adds	r7, #28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b50:	43db      	mvns	r3, r3
 8001b52:	401a      	ands	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0318 	and.w	r3, r3, #24
 8001b5a:	4908      	ldr	r1, [pc, #32]	; (8001b7c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b5c:	40d9      	lsrs	r1, r3
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	400b      	ands	r3, r1
 8001b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b66:	431a      	orrs	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	0007ffff 	.word	0x0007ffff

08001b80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6093      	str	r3, [r2, #8]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bb8:	d101      	bne.n	8001bbe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001bdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001be0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c08:	d101      	bne.n	8001c0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <LL_ADC_IsEnabled+0x18>
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <LL_ADC_IsEnabled+0x1a>
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d101      	bne.n	8001c5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d101      	bne.n	8001c80 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e12f      	b.n	8001f0a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d109      	bne.n	8001ccc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff f959 	bl	8000f70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff67 	bl	8001ba4 <LL_ADC_IsDeepPowerDownEnabled>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d004      	beq.n	8001ce6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff4d 	bl	8001b80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff82 	bl	8001bf4 <LL_ADC_IsInternalRegulatorEnabled>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d115      	bne.n	8001d22 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ff66 	bl	8001bcc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d00:	4b84      	ldr	r3, [pc, #528]	; (8001f14 <HAL_ADC_Init+0x284>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	099b      	lsrs	r3, r3, #6
 8001d06:	4a84      	ldr	r2, [pc, #528]	; (8001f18 <HAL_ADC_Init+0x288>)
 8001d08:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0c:	099b      	lsrs	r3, r3, #6
 8001d0e:	3301      	adds	r3, #1
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d14:	e002      	b.n	8001d1c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f9      	bne.n	8001d16 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ff64 	bl	8001bf4 <LL_ADC_IsInternalRegulatorEnabled>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10d      	bne.n	8001d4e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d36:	f043 0210 	orr.w	r2, r3, #16
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d42:	f043 0201 	orr.w	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff75 	bl	8001c42 <LL_ADC_REG_IsConversionOngoing>
 8001d58:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f040 80c8 	bne.w	8001ef8 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f040 80c4 	bne.w	8001ef8 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d78:	f043 0202 	orr.w	r2, r3, #2
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff49 	bl	8001c1c <LL_ADC_IsEnabled>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10b      	bne.n	8001da8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d90:	4862      	ldr	r0, [pc, #392]	; (8001f1c <HAL_ADC_Init+0x28c>)
 8001d92:	f7ff ff43 	bl	8001c1c <LL_ADC_IsEnabled>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d105      	bne.n	8001da8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	4619      	mov	r1, r3
 8001da2:	485f      	ldr	r0, [pc, #380]	; (8001f20 <HAL_ADC_Init+0x290>)
 8001da4:	f7ff fdd4 	bl	8001950 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	7e5b      	ldrb	r3, [r3, #25]
 8001dac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001db2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001db8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001dbe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d106      	bne.n	8001de4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	045b      	lsls	r3, r3, #17
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d009      	beq.n	8001e00 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	4b47      	ldr	r3, [pc, #284]	; (8001f24 <HAL_ADC_Init+0x294>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	69b9      	ldr	r1, [r7, #24]
 8001e10:	430b      	orrs	r3, r1
 8001e12:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff12 	bl	8001c42 <LL_ADC_REG_IsConversionOngoing>
 8001e1e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff1f 	bl	8001c68 <LL_ADC_INJ_IsConversionOngoing>
 8001e2a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d140      	bne.n	8001eb4 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d13d      	bne.n	8001eb4 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7e1b      	ldrb	r3, [r3, #24]
 8001e40:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e42:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e4a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e5a:	f023 0306 	bic.w	r3, r3, #6
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	69b9      	ldr	r1, [r7, #24]
 8001e64:	430b      	orrs	r3, r1
 8001e66:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d118      	bne.n	8001ea4 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e7c:	f023 0304 	bic.w	r3, r3, #4
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e88:	4311      	orrs	r1, r2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e8e:	4311      	orrs	r1, r2
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e94:	430a      	orrs	r2, r1
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f042 0201 	orr.w	r2, r2, #1
 8001ea0:	611a      	str	r2, [r3, #16]
 8001ea2:	e007      	b.n	8001eb4 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691a      	ldr	r2, [r3, #16]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0201 	bic.w	r2, r2, #1
 8001eb2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d10c      	bne.n	8001ed6 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f023 010f 	bic.w	r1, r3, #15
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	1e5a      	subs	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ed4:	e007      	b.n	8001ee6 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 020f 	bic.w	r2, r2, #15
 8001ee4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eea:	f023 0303 	bic.w	r3, r3, #3
 8001eee:	f043 0201 	orr.w	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	659a      	str	r2, [r3, #88]	; 0x58
 8001ef6:	e007      	b.n	8001f08 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	f043 0210 	orr.w	r2, r3, #16
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f08:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3720      	adds	r7, #32
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	2000000c 	.word	0x2000000c
 8001f18:	053e2d63 	.word	0x053e2d63
 8001f1c:	50040000 	.word	0x50040000
 8001f20:	50040300 	.word	0x50040300
 8001f24:	fff0c007 	.word	0xfff0c007

08001f28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b0b6      	sub	sp, #216	; 0xd8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d101      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x22>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e3d3      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x7ca>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fe73 	bl	8001c42 <LL_ADC_REG_IsConversionOngoing>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f040 83b8 	bne.w	80026d4 <HAL_ADC_ConfigChannel+0x7ac>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b05      	cmp	r3, #5
 8001f6a:	d824      	bhi.n	8001fb6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	3b02      	subs	r3, #2
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d81b      	bhi.n	8001fae <HAL_ADC_ConfigChannel+0x86>
 8001f76:	a201      	add	r2, pc, #4	; (adr r2, 8001f7c <HAL_ADC_ConfigChannel+0x54>)
 8001f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7c:	08001f8d 	.word	0x08001f8d
 8001f80:	08001f95 	.word	0x08001f95
 8001f84:	08001f9d 	.word	0x08001f9d
 8001f88:	08001fa5 	.word	0x08001fa5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	220c      	movs	r2, #12
 8001f90:	605a      	str	r2, [r3, #4]
          break;
 8001f92:	e010      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	2212      	movs	r2, #18
 8001f98:	605a      	str	r2, [r3, #4]
          break;
 8001f9a:	e00c      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	2218      	movs	r2, #24
 8001fa0:	605a      	str	r2, [r3, #4]
          break;
 8001fa2:	e008      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001faa:	605a      	str	r2, [r3, #4]
          break;
 8001fac:	e003      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2206      	movs	r2, #6
 8001fb2:	605a      	str	r2, [r3, #4]
          break;
 8001fb4:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6818      	ldr	r0, [r3, #0]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	6859      	ldr	r1, [r3, #4]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	f7ff fd60 	bl	8001a88 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fe38 	bl	8001c42 <LL_ADC_REG_IsConversionOngoing>
 8001fd2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fe44 	bl	8001c68 <LL_ADC_INJ_IsConversionOngoing>
 8001fe0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fe4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f040 81c1 	bne.w	8002370 <HAL_ADC_ConfigChannel+0x448>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f040 81bc 	bne.w	8002370 <HAL_ADC_ConfigChannel+0x448>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002000:	d10f      	bne.n	8002022 <HAL_ADC_ConfigChannel+0xfa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6818      	ldr	r0, [r3, #0]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2200      	movs	r2, #0
 800200c:	4619      	mov	r1, r3
 800200e:	f7ff fd67 	bl	8001ae0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fd21 	bl	8001a62 <LL_ADC_SetSamplingTimeCommonConfig>
 8002020:	e00e      	b.n	8002040 <HAL_ADC_ConfigChannel+0x118>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6818      	ldr	r0, [r3, #0]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	6819      	ldr	r1, [r3, #0]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	461a      	mov	r2, r3
 8002030:	f7ff fd56 	bl	8001ae0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2100      	movs	r1, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fd11 	bl	8001a62 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	695a      	ldr	r2, [r3, #20]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	08db      	lsrs	r3, r3, #3
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	2b04      	cmp	r3, #4
 8002060:	d00a      	beq.n	8002078 <HAL_ADC_ConfigChannel+0x150>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6919      	ldr	r1, [r3, #16]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002072:	f7ff fca1 	bl	80019b8 <LL_ADC_SetOffset>
 8002076:	e17b      	b.n	8002370 <HAL_ADC_ConfigChannel+0x448>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2100      	movs	r1, #0
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fcbe 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 8002084:	4603      	mov	r3, r0
 8002086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10a      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x17c>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fcb3 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 800209a:	4603      	mov	r3, r0
 800209c:	0e9b      	lsrs	r3, r3, #26
 800209e:	f003 021f 	and.w	r2, r3, #31
 80020a2:	e01e      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x1ba>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fca8 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80020c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x1ae>
  {
    return 32U;
 80020d2:	2320      	movs	r3, #32
 80020d4:	e004      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x1b8>
  }
  return __builtin_clz(value);
 80020d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020da:	fab3 f383 	clz	r3, r3
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d105      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x1d2>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	0e9b      	lsrs	r3, r3, #26
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	e018      	b.n	800212c <HAL_ADC_ConfigChannel+0x204>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002102:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002106:	fa93 f3a3 	rbit	r3, r3
 800210a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800210e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002112:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002116:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x1fa>
    return 32U;
 800211e:	2320      	movs	r3, #32
 8002120:	e004      	b.n	800212c <HAL_ADC_ConfigChannel+0x204>
  return __builtin_clz(value);
 8002122:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002126:	fab3 f383 	clz	r3, r3
 800212a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800212c:	429a      	cmp	r2, r3
 800212e:	d106      	bne.n	800213e <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2200      	movs	r2, #0
 8002136:	2100      	movs	r1, #0
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fc77 	bl	8001a2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2101      	movs	r1, #1
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fc5b 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 800214a:	4603      	mov	r3, r0
 800214c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10a      	bne.n	800216a <HAL_ADC_ConfigChannel+0x242>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2101      	movs	r1, #1
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff fc50 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 8002160:	4603      	mov	r3, r0
 8002162:	0e9b      	lsrs	r3, r3, #26
 8002164:	f003 021f 	and.w	r2, r3, #31
 8002168:	e01e      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x280>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2101      	movs	r1, #1
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fc45 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 8002176:	4603      	mov	r3, r0
 8002178:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002188:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800218c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002190:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_ADC_ConfigChannel+0x274>
    return 32U;
 8002198:	2320      	movs	r3, #32
 800219a:	e004      	b.n	80021a6 <HAL_ADC_ConfigChannel+0x27e>
  return __builtin_clz(value);
 800219c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021a0:	fab3 f383 	clz	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d105      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x298>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	0e9b      	lsrs	r3, r3, #26
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	e018      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x2ca>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021cc:	fa93 f3a3 	rbit	r3, r3
 80021d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80021d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80021dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 80021e4:	2320      	movs	r3, #32
 80021e6:	e004      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x2ca>
  return __builtin_clz(value);
 80021e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021ec:	fab3 f383 	clz	r3, r3
 80021f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d106      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2200      	movs	r2, #0
 80021fc:	2101      	movs	r1, #1
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fc14 	bl	8001a2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2102      	movs	r1, #2
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fbf8 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 8002210:	4603      	mov	r3, r0
 8002212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10a      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x308>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2102      	movs	r1, #2
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fbed 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 8002226:	4603      	mov	r3, r0
 8002228:	0e9b      	lsrs	r3, r3, #26
 800222a:	f003 021f 	and.w	r2, r3, #31
 800222e:	e01e      	b.n	800226e <HAL_ADC_ConfigChannel+0x346>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2102      	movs	r1, #2
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fbe2 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 800223c:	4603      	mov	r3, r0
 800223e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800224e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002252:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002256:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x33a>
    return 32U;
 800225e:	2320      	movs	r3, #32
 8002260:	e004      	b.n	800226c <HAL_ADC_ConfigChannel+0x344>
  return __builtin_clz(value);
 8002262:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002276:	2b00      	cmp	r3, #0
 8002278:	d105      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x35e>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	0e9b      	lsrs	r3, r3, #26
 8002280:	f003 031f 	and.w	r3, r3, #31
 8002284:	e016      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x38c>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002292:	fa93 f3a3 	rbit	r3, r3
 8002296:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002298:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800229a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800229e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x382>
    return 32U;
 80022a6:	2320      	movs	r3, #32
 80022a8:	e004      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x38c>
  return __builtin_clz(value);
 80022aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022ae:	fab3 f383 	clz	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d106      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x39e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2200      	movs	r2, #0
 80022be:	2102      	movs	r1, #2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff fbb3 	bl	8001a2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2103      	movs	r1, #3
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fb97 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10a      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x3ca>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2103      	movs	r1, #3
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fb8c 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 80022e8:	4603      	mov	r3, r0
 80022ea:	0e9b      	lsrs	r3, r3, #26
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	e017      	b.n	8002322 <HAL_ADC_ConfigChannel+0x3fa>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2103      	movs	r1, #3
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fb81 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 80022fe:	4603      	mov	r3, r0
 8002300:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002304:	fa93 f3a3 	rbit	r3, r3
 8002308:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800230a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800230c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800230e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x3f0>
    return 32U;
 8002314:	2320      	movs	r3, #32
 8002316:	e003      	b.n	8002320 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 8002318:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800231a:	fab3 f383 	clz	r3, r3
 800231e:	b2db      	uxtb	r3, r3
 8002320:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232a:	2b00      	cmp	r3, #0
 800232c:	d105      	bne.n	800233a <HAL_ADC_ConfigChannel+0x412>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	0e9b      	lsrs	r3, r3, #26
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	e011      	b.n	800235e <HAL_ADC_ConfigChannel+0x436>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800234a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800234c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x42e>
    return 32U;
 8002352:	2320      	movs	r3, #32
 8002354:	e003      	b.n	800235e <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8002356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002358:	fab3 f383 	clz	r3, r3
 800235c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800235e:	429a      	cmp	r2, r3
 8002360:	d106      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x448>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2200      	movs	r2, #0
 8002368:	2103      	movs	r1, #3
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fb5e 	bl	8001a2c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fc51 	bl	8001c1c <LL_ADC_IsEnabled>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	f040 813f 	bne.w	8002600 <HAL_ADC_ConfigChannel+0x6d8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	6819      	ldr	r1, [r3, #0]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	461a      	mov	r2, r3
 8002390:	f7ff fbd2 	bl	8001b38 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4a8e      	ldr	r2, [pc, #568]	; (80025d4 <HAL_ADC_ConfigChannel+0x6ac>)
 800239a:	4293      	cmp	r3, r2
 800239c:	f040 8130 	bne.w	8002600 <HAL_ADC_ConfigChannel+0x6d8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10b      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x4a0>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	0e9b      	lsrs	r3, r3, #26
 80023b6:	3301      	adds	r3, #1
 80023b8:	f003 031f 	and.w	r3, r3, #31
 80023bc:	2b09      	cmp	r3, #9
 80023be:	bf94      	ite	ls
 80023c0:	2301      	movls	r3, #1
 80023c2:	2300      	movhi	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	e019      	b.n	80023fc <HAL_ADC_ConfigChannel+0x4d4>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023d0:	fa93 f3a3 	rbit	r3, r3
 80023d4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80023d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023d8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80023da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x4bc>
    return 32U;
 80023e0:	2320      	movs	r3, #32
 80023e2:	e003      	b.n	80023ec <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 80023e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	3301      	adds	r3, #1
 80023ee:	f003 031f 	and.w	r3, r3, #31
 80023f2:	2b09      	cmp	r3, #9
 80023f4:	bf94      	ite	ls
 80023f6:	2301      	movls	r3, #1
 80023f8:	2300      	movhi	r3, #0
 80023fa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d079      	beq.n	80024f4 <HAL_ADC_ConfigChannel+0x5cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002408:	2b00      	cmp	r3, #0
 800240a:	d107      	bne.n	800241c <HAL_ADC_ConfigChannel+0x4f4>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	0e9b      	lsrs	r3, r3, #26
 8002412:	3301      	adds	r3, #1
 8002414:	069b      	lsls	r3, r3, #26
 8002416:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800241a:	e015      	b.n	8002448 <HAL_ADC_ConfigChannel+0x520>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002424:	fa93 f3a3 	rbit	r3, r3
 8002428:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800242a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800242c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800242e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x510>
    return 32U;
 8002434:	2320      	movs	r3, #32
 8002436:	e003      	b.n	8002440 <HAL_ADC_ConfigChannel+0x518>
  return __builtin_clz(value);
 8002438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800243a:	fab3 f383 	clz	r3, r3
 800243e:	b2db      	uxtb	r3, r3
 8002440:	3301      	adds	r3, #1
 8002442:	069b      	lsls	r3, r3, #26
 8002444:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002450:	2b00      	cmp	r3, #0
 8002452:	d109      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x540>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	0e9b      	lsrs	r3, r3, #26
 800245a:	3301      	adds	r3, #1
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	2101      	movs	r1, #1
 8002462:	fa01 f303 	lsl.w	r3, r1, r3
 8002466:	e017      	b.n	8002498 <HAL_ADC_ConfigChannel+0x570>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002470:	fa93 f3a3 	rbit	r3, r3
 8002474:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002478:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800247a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x55c>
    return 32U;
 8002480:	2320      	movs	r3, #32
 8002482:	e003      	b.n	800248c <HAL_ADC_ConfigChannel+0x564>
  return __builtin_clz(value);
 8002484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002486:	fab3 f383 	clz	r3, r3
 800248a:	b2db      	uxtb	r3, r3
 800248c:	3301      	adds	r3, #1
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	2101      	movs	r1, #1
 8002494:	fa01 f303 	lsl.w	r3, r1, r3
 8002498:	ea42 0103 	orr.w	r1, r2, r3
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10a      	bne.n	80024be <HAL_ADC_ConfigChannel+0x596>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	0e9b      	lsrs	r3, r3, #26
 80024ae:	3301      	adds	r3, #1
 80024b0:	f003 021f 	and.w	r2, r3, #31
 80024b4:	4613      	mov	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	051b      	lsls	r3, r3, #20
 80024bc:	e018      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x5c8>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c6:	fa93 f3a3 	rbit	r3, r3
 80024ca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80024d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80024d6:	2320      	movs	r3, #32
 80024d8:	e003      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80024da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	3301      	adds	r3, #1
 80024e4:	f003 021f 	and.w	r2, r3, #31
 80024e8:	4613      	mov	r3, r2
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	4413      	add	r3, r2
 80024ee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024f0:	430b      	orrs	r3, r1
 80024f2:	e080      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x6ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d107      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x5e8>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	0e9b      	lsrs	r3, r3, #26
 8002506:	3301      	adds	r3, #1
 8002508:	069b      	lsls	r3, r3, #26
 800250a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800250e:	e015      	b.n	800253c <HAL_ADC_ConfigChannel+0x614>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002518:	fa93 f3a3 	rbit	r3, r3
 800251c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800251e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002520:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_ADC_ConfigChannel+0x604>
    return 32U;
 8002528:	2320      	movs	r3, #32
 800252a:	e003      	b.n	8002534 <HAL_ADC_ConfigChannel+0x60c>
  return __builtin_clz(value);
 800252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	3301      	adds	r3, #1
 8002536:	069b      	lsls	r3, r3, #26
 8002538:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002544:	2b00      	cmp	r3, #0
 8002546:	d109      	bne.n	800255c <HAL_ADC_ConfigChannel+0x634>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	0e9b      	lsrs	r3, r3, #26
 800254e:	3301      	adds	r3, #1
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	2101      	movs	r1, #1
 8002556:	fa01 f303 	lsl.w	r3, r1, r3
 800255a:	e017      	b.n	800258c <HAL_ADC_ConfigChannel+0x664>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	61fb      	str	r3, [r7, #28]
  return result;
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x650>
    return 32U;
 8002574:	2320      	movs	r3, #32
 8002576:	e003      	b.n	8002580 <HAL_ADC_ConfigChannel+0x658>
  return __builtin_clz(value);
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	3301      	adds	r3, #1
 8002582:	f003 031f 	and.w	r3, r3, #31
 8002586:	2101      	movs	r1, #1
 8002588:	fa01 f303 	lsl.w	r3, r1, r3
 800258c:	ea42 0103 	orr.w	r1, r2, r3
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10d      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x690>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	0e9b      	lsrs	r3, r3, #26
 80025a2:	3301      	adds	r3, #1
 80025a4:	f003 021f 	and.w	r2, r3, #31
 80025a8:	4613      	mov	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4413      	add	r3, r2
 80025ae:	3b1e      	subs	r3, #30
 80025b0:	051b      	lsls	r3, r3, #20
 80025b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025b6:	e01d      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x6cc>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	613b      	str	r3, [r7, #16]
  return result;
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d103      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x6b0>
    return 32U;
 80025d0:	2320      	movs	r3, #32
 80025d2:	e005      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x6b8>
 80025d4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	3301      	adds	r3, #1
 80025e2:	f003 021f 	and.w	r2, r3, #31
 80025e6:	4613      	mov	r3, r2
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	4413      	add	r3, r2
 80025ec:	3b1e      	subs	r3, #30
 80025ee:	051b      	lsls	r3, r3, #20
 80025f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025f4:	430b      	orrs	r3, r1
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	6892      	ldr	r2, [r2, #8]
 80025fa:	4619      	mov	r1, r3
 80025fc:	f7ff fa70 	bl	8001ae0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b3d      	ldr	r3, [pc, #244]	; (80026fc <HAL_ADC_ConfigChannel+0x7d4>)
 8002606:	4013      	ands	r3, r2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d06c      	beq.n	80026e6 <HAL_ADC_ConfigChannel+0x7be>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800260c:	483c      	ldr	r0, [pc, #240]	; (8002700 <HAL_ADC_ConfigChannel+0x7d8>)
 800260e:	f7ff f9c5 	bl	800199c <LL_ADC_GetCommonPathInternalCh>
 8002612:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a3a      	ldr	r2, [pc, #232]	; (8002704 <HAL_ADC_ConfigChannel+0x7dc>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d127      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x748>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002620:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002624:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d121      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x748>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a35      	ldr	r2, [pc, #212]	; (8002708 <HAL_ADC_ConfigChannel+0x7e0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d157      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002636:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800263a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800263e:	4619      	mov	r1, r3
 8002640:	482f      	ldr	r0, [pc, #188]	; (8002700 <HAL_ADC_ConfigChannel+0x7d8>)
 8002642:	f7ff f998 	bl	8001976 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002646:	4b31      	ldr	r3, [pc, #196]	; (800270c <HAL_ADC_ConfigChannel+0x7e4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	099b      	lsrs	r3, r3, #6
 800264c:	4a30      	ldr	r2, [pc, #192]	; (8002710 <HAL_ADC_ConfigChannel+0x7e8>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	099b      	lsrs	r3, r3, #6
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	4613      	mov	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002660:	e002      	b.n	8002668 <HAL_ADC_ConfigChannel+0x740>
          {
            wait_loop_index--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	3b01      	subs	r3, #1
 8002666:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f9      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x73a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800266e:	e03a      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x7be>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a27      	ldr	r2, [pc, #156]	; (8002714 <HAL_ADC_ConfigChannel+0x7ec>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d113      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x77a>
 800267a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800267e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10d      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x77a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a1f      	ldr	r2, [pc, #124]	; (8002708 <HAL_ADC_ConfigChannel+0x7e0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d12a      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002690:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002694:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002698:	4619      	mov	r1, r3
 800269a:	4819      	ldr	r0, [pc, #100]	; (8002700 <HAL_ADC_ConfigChannel+0x7d8>)
 800269c:	f7ff f96b 	bl	8001976 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026a0:	e021      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x7be>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a1c      	ldr	r2, [pc, #112]	; (8002718 <HAL_ADC_ConfigChannel+0x7f0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d11c      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x7be>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d116      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x7be>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a12      	ldr	r2, [pc, #72]	; (8002708 <HAL_ADC_ConfigChannel+0x7e0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d111      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026ca:	4619      	mov	r1, r3
 80026cc:	480c      	ldr	r0, [pc, #48]	; (8002700 <HAL_ADC_ConfigChannel+0x7d8>)
 80026ce:	f7ff f952 	bl	8001976 <LL_ADC_SetCommonPathInternalCh>
 80026d2:	e008      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x7be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d8:	f043 0220 	orr.w	r2, r3, #32
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80026ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	37d8      	adds	r7, #216	; 0xd8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	80080000 	.word	0x80080000
 8002700:	50040300 	.word	0x50040300
 8002704:	c7520000 	.word	0xc7520000
 8002708:	50040000 	.word	0x50040000
 800270c:	2000000c 	.word	0x2000000c
 8002710:	053e2d63 	.word	0x053e2d63
 8002714:	cb840000 	.word	0xcb840000
 8002718:	80000001 	.word	0x80000001

0800271c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <__NVIC_SetPriorityGrouping+0x44>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002738:	4013      	ands	r3, r2
 800273a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800274c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800274e:	4a04      	ldr	r2, [pc, #16]	; (8002760 <__NVIC_SetPriorityGrouping+0x44>)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	60d3      	str	r3, [r2, #12]
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002768:	4b04      	ldr	r3, [pc, #16]	; (800277c <__NVIC_GetPriorityGrouping+0x18>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	f003 0307 	and.w	r3, r3, #7
}
 8002772:	4618      	mov	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	2b00      	cmp	r3, #0
 8002790:	db0b      	blt.n	80027aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	f003 021f 	and.w	r2, r3, #31
 8002798:	4907      	ldr	r1, [pc, #28]	; (80027b8 <__NVIC_EnableIRQ+0x38>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	2001      	movs	r0, #1
 80027a2:	fa00 f202 	lsl.w	r2, r0, r2
 80027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	e000e100 	.word	0xe000e100

080027bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	6039      	str	r1, [r7, #0]
 80027c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	db0a      	blt.n	80027e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	490c      	ldr	r1, [pc, #48]	; (8002808 <__NVIC_SetPriority+0x4c>)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	0112      	lsls	r2, r2, #4
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	440b      	add	r3, r1
 80027e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e4:	e00a      	b.n	80027fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	4908      	ldr	r1, [pc, #32]	; (800280c <__NVIC_SetPriority+0x50>)
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	3b04      	subs	r3, #4
 80027f4:	0112      	lsls	r2, r2, #4
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	440b      	add	r3, r1
 80027fa:	761a      	strb	r2, [r3, #24]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000e100 	.word	0xe000e100
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	; 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f1c3 0307 	rsb	r3, r3, #7
 800282a:	2b04      	cmp	r3, #4
 800282c:	bf28      	it	cs
 800282e:	2304      	movcs	r3, #4
 8002830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3304      	adds	r3, #4
 8002836:	2b06      	cmp	r3, #6
 8002838:	d902      	bls.n	8002840 <NVIC_EncodePriority+0x30>
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3b03      	subs	r3, #3
 800283e:	e000      	b.n	8002842 <NVIC_EncodePriority+0x32>
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43da      	mvns	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	401a      	ands	r2, r3
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002858:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	43d9      	mvns	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002868:	4313      	orrs	r3, r2
         );
}
 800286a:	4618      	mov	r0, r3
 800286c:	3724      	adds	r7, #36	; 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3b01      	subs	r3, #1
 8002884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002888:	d301      	bcc.n	800288e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800288a:	2301      	movs	r3, #1
 800288c:	e00f      	b.n	80028ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800288e:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <SysTick_Config+0x40>)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3b01      	subs	r3, #1
 8002894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002896:	210f      	movs	r1, #15
 8002898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800289c:	f7ff ff8e 	bl	80027bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <SysTick_Config+0x40>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a6:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <SysTick_Config+0x40>)
 80028a8:	2207      	movs	r2, #7
 80028aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	e000e010 	.word	0xe000e010

080028bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff ff29 	bl	800271c <__NVIC_SetPriorityGrouping>
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b086      	sub	sp, #24
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	4603      	mov	r3, r0
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028e4:	f7ff ff3e 	bl	8002764 <__NVIC_GetPriorityGrouping>
 80028e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	6978      	ldr	r0, [r7, #20]
 80028f0:	f7ff ff8e 	bl	8002810 <NVIC_EncodePriority>
 80028f4:	4602      	mov	r2, r0
 80028f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028fa:	4611      	mov	r1, r2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff5d 	bl	80027bc <__NVIC_SetPriority>
}
 8002902:	bf00      	nop
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	4603      	mov	r3, r0
 8002912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff31 	bl	8002780 <__NVIC_EnableIRQ>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff ffa2 	bl	8002878 <SysTick_Config>
 8002934:	4603      	mov	r3, r0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e0ac      	b.n	8002aac <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f000 f8b2 	bl	8002ac0 <DFSDM_GetChannelFromInstance>
 800295c:	4603      	mov	r3, r0
 800295e:	4a55      	ldr	r2, [pc, #340]	; (8002ab4 <HAL_DFSDM_ChannelInit+0x174>)
 8002960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e09f      	b.n	8002aac <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7fe fb3f 	bl	8000ff0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002972:	4b51      	ldr	r3, [pc, #324]	; (8002ab8 <HAL_DFSDM_ChannelInit+0x178>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	3301      	adds	r3, #1
 8002978:	4a4f      	ldr	r2, [pc, #316]	; (8002ab8 <HAL_DFSDM_ChannelInit+0x178>)
 800297a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800297c:	4b4e      	ldr	r3, [pc, #312]	; (8002ab8 <HAL_DFSDM_ChannelInit+0x178>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d125      	bne.n	80029d0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002984:	4b4d      	ldr	r3, [pc, #308]	; (8002abc <HAL_DFSDM_ChannelInit+0x17c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a4c      	ldr	r2, [pc, #304]	; (8002abc <HAL_DFSDM_ChannelInit+0x17c>)
 800298a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800298e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002990:	4b4a      	ldr	r3, [pc, #296]	; (8002abc <HAL_DFSDM_ChannelInit+0x17c>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4948      	ldr	r1, [pc, #288]	; (8002abc <HAL_DFSDM_ChannelInit+0x17c>)
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800299e:	4b47      	ldr	r3, [pc, #284]	; (8002abc <HAL_DFSDM_ChannelInit+0x17c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a46      	ldr	r2, [pc, #280]	; (8002abc <HAL_DFSDM_ChannelInit+0x17c>)
 80029a4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80029a8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	791b      	ldrb	r3, [r3, #4]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d108      	bne.n	80029c4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80029b2:	4b42      	ldr	r3, [pc, #264]	; (8002abc <HAL_DFSDM_ChannelInit+0x17c>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	041b      	lsls	r3, r3, #16
 80029be:	493f      	ldr	r1, [pc, #252]	; (8002abc <HAL_DFSDM_ChannelInit+0x17c>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80029c4:	4b3d      	ldr	r3, [pc, #244]	; (8002abc <HAL_DFSDM_ChannelInit+0x17c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a3c      	ldr	r2, [pc, #240]	; (8002abc <HAL_DFSDM_ChannelInit+0x17c>)
 80029ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029ce:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80029de:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6819      	ldr	r1, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80029ee:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80029f4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 020f 	bic.w	r2, r2, #15
 8002a0c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6819      	ldr	r1, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002a34:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6899      	ldr	r1, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	3b01      	subs	r3, #1
 8002a46:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f002 0207 	and.w	r2, r2, #7
 8002a60:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6859      	ldr	r1, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002a74:	431a      	orrs	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a8c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f810 	bl	8002ac0 <DFSDM_GetChannelFromInstance>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	4904      	ldr	r1, [pc, #16]	; (8002ab4 <HAL_DFSDM_ChannelInit+0x174>)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	2000053c 	.word	0x2000053c
 8002ab8:	20000538 	.word	0x20000538
 8002abc:	40016000 	.word	0x40016000

08002ac0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a1c      	ldr	r2, [pc, #112]	; (8002b3c <DFSDM_GetChannelFromInstance+0x7c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d102      	bne.n	8002ad6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	e02b      	b.n	8002b2e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a19      	ldr	r2, [pc, #100]	; (8002b40 <DFSDM_GetChannelFromInstance+0x80>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d102      	bne.n	8002ae4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	e024      	b.n	8002b2e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a17      	ldr	r2, [pc, #92]	; (8002b44 <DFSDM_GetChannelFromInstance+0x84>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d102      	bne.n	8002af2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002aec:	2302      	movs	r3, #2
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	e01d      	b.n	8002b2e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a14      	ldr	r2, [pc, #80]	; (8002b48 <DFSDM_GetChannelFromInstance+0x88>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d102      	bne.n	8002b00 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002afa:	2304      	movs	r3, #4
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	e016      	b.n	8002b2e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a12      	ldr	r2, [pc, #72]	; (8002b4c <DFSDM_GetChannelFromInstance+0x8c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d102      	bne.n	8002b0e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002b08:	2305      	movs	r3, #5
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	e00f      	b.n	8002b2e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a0f      	ldr	r2, [pc, #60]	; (8002b50 <DFSDM_GetChannelFromInstance+0x90>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d102      	bne.n	8002b1c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002b16:	2306      	movs	r3, #6
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	e008      	b.n	8002b2e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a0d      	ldr	r2, [pc, #52]	; (8002b54 <DFSDM_GetChannelFromInstance+0x94>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d102      	bne.n	8002b2a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002b24:	2307      	movs	r3, #7
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	e001      	b.n	8002b2e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	40016000 	.word	0x40016000
 8002b40:	40016020 	.word	0x40016020
 8002b44:	40016040 	.word	0x40016040
 8002b48:	40016080 	.word	0x40016080
 8002b4c:	400160a0 	.word	0x400160a0
 8002b50:	400160c0 	.word	0x400160c0
 8002b54:	400160e0 	.word	0x400160e0

08002b58 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d005      	beq.n	8002b7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2204      	movs	r2, #4
 8002b74:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
 8002b7a:	e047      	b.n	8002c0c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 020e 	bic.w	r2, r2, #14
 8002b8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002baa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb0:	f003 021c 	and.w	r2, r3, #28
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	2101      	movs	r1, #1
 8002bba:	fa01 f202 	lsl.w	r2, r1, r2
 8002bbe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002bc8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00c      	beq.n	8002bec <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002be0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002bea:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	4798      	blx	r3
    }
  }
  return status;
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c26:	e166      	b.n	8002ef6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	fa01 f303 	lsl.w	r3, r1, r3
 8002c34:	4013      	ands	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8158 	beq.w	8002ef0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d005      	beq.n	8002c58 <HAL_GPIO_Init+0x40>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d130      	bne.n	8002cba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	2203      	movs	r2, #3
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c8e:	2201      	movs	r2, #1
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	091b      	lsrs	r3, r3, #4
 8002ca4:	f003 0201 	and.w	r2, r3, #1
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d017      	beq.n	8002cf6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d123      	bne.n	8002d4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	08da      	lsrs	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3208      	adds	r2, #8
 8002d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	220f      	movs	r2, #15
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4013      	ands	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	691a      	ldr	r2, [r3, #16]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	08da      	lsrs	r2, r3, #3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3208      	adds	r2, #8
 8002d44:	6939      	ldr	r1, [r7, #16]
 8002d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	2203      	movs	r2, #3
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f003 0203 	and.w	r2, r3, #3
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 80b2 	beq.w	8002ef0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d8c:	4b61      	ldr	r3, [pc, #388]	; (8002f14 <HAL_GPIO_Init+0x2fc>)
 8002d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d90:	4a60      	ldr	r2, [pc, #384]	; (8002f14 <HAL_GPIO_Init+0x2fc>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	6613      	str	r3, [r2, #96]	; 0x60
 8002d98:	4b5e      	ldr	r3, [pc, #376]	; (8002f14 <HAL_GPIO_Init+0x2fc>)
 8002d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002da4:	4a5c      	ldr	r2, [pc, #368]	; (8002f18 <HAL_GPIO_Init+0x300>)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	089b      	lsrs	r3, r3, #2
 8002daa:	3302      	adds	r3, #2
 8002dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	220f      	movs	r2, #15
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002dce:	d02b      	beq.n	8002e28 <HAL_GPIO_Init+0x210>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a52      	ldr	r2, [pc, #328]	; (8002f1c <HAL_GPIO_Init+0x304>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d025      	beq.n	8002e24 <HAL_GPIO_Init+0x20c>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a51      	ldr	r2, [pc, #324]	; (8002f20 <HAL_GPIO_Init+0x308>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d01f      	beq.n	8002e20 <HAL_GPIO_Init+0x208>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a50      	ldr	r2, [pc, #320]	; (8002f24 <HAL_GPIO_Init+0x30c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d019      	beq.n	8002e1c <HAL_GPIO_Init+0x204>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a4f      	ldr	r2, [pc, #316]	; (8002f28 <HAL_GPIO_Init+0x310>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d013      	beq.n	8002e18 <HAL_GPIO_Init+0x200>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a4e      	ldr	r2, [pc, #312]	; (8002f2c <HAL_GPIO_Init+0x314>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00d      	beq.n	8002e14 <HAL_GPIO_Init+0x1fc>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a4d      	ldr	r2, [pc, #308]	; (8002f30 <HAL_GPIO_Init+0x318>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d007      	beq.n	8002e10 <HAL_GPIO_Init+0x1f8>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a4c      	ldr	r2, [pc, #304]	; (8002f34 <HAL_GPIO_Init+0x31c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d101      	bne.n	8002e0c <HAL_GPIO_Init+0x1f4>
 8002e08:	2307      	movs	r3, #7
 8002e0a:	e00e      	b.n	8002e2a <HAL_GPIO_Init+0x212>
 8002e0c:	2308      	movs	r3, #8
 8002e0e:	e00c      	b.n	8002e2a <HAL_GPIO_Init+0x212>
 8002e10:	2306      	movs	r3, #6
 8002e12:	e00a      	b.n	8002e2a <HAL_GPIO_Init+0x212>
 8002e14:	2305      	movs	r3, #5
 8002e16:	e008      	b.n	8002e2a <HAL_GPIO_Init+0x212>
 8002e18:	2304      	movs	r3, #4
 8002e1a:	e006      	b.n	8002e2a <HAL_GPIO_Init+0x212>
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e004      	b.n	8002e2a <HAL_GPIO_Init+0x212>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e002      	b.n	8002e2a <HAL_GPIO_Init+0x212>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <HAL_GPIO_Init+0x212>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	f002 0203 	and.w	r2, r2, #3
 8002e30:	0092      	lsls	r2, r2, #2
 8002e32:	4093      	lsls	r3, r2
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e3a:	4937      	ldr	r1, [pc, #220]	; (8002f18 <HAL_GPIO_Init+0x300>)
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	089b      	lsrs	r3, r3, #2
 8002e40:	3302      	adds	r3, #2
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e48:	4b3b      	ldr	r3, [pc, #236]	; (8002f38 <HAL_GPIO_Init+0x320>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4013      	ands	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e6c:	4a32      	ldr	r2, [pc, #200]	; (8002f38 <HAL_GPIO_Init+0x320>)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e72:	4b31      	ldr	r3, [pc, #196]	; (8002f38 <HAL_GPIO_Init+0x320>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e96:	4a28      	ldr	r2, [pc, #160]	; (8002f38 <HAL_GPIO_Init+0x320>)
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e9c:	4b26      	ldr	r3, [pc, #152]	; (8002f38 <HAL_GPIO_Init+0x320>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ec0:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <HAL_GPIO_Init+0x320>)
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ec6:	4b1c      	ldr	r3, [pc, #112]	; (8002f38 <HAL_GPIO_Init+0x320>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002eea:	4a13      	ldr	r2, [pc, #76]	; (8002f38 <HAL_GPIO_Init+0x320>)
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f47f ae91 	bne.w	8002c28 <HAL_GPIO_Init+0x10>
  }
}
 8002f06:	bf00      	nop
 8002f08:	bf00      	nop
 8002f0a:	371c      	adds	r7, #28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40010000 	.word	0x40010000
 8002f1c:	48000400 	.word	0x48000400
 8002f20:	48000800 	.word	0x48000800
 8002f24:	48000c00 	.word	0x48000c00
 8002f28:	48001000 	.word	0x48001000
 8002f2c:	48001400 	.word	0x48001400
 8002f30:	48001800 	.word	0x48001800
 8002f34:	48001c00 	.word	0x48001c00
 8002f38:	40010400 	.word	0x40010400

08002f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	807b      	strh	r3, [r7, #2]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f4c:	787b      	ldrb	r3, [r7, #1]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f52:	887a      	ldrh	r2, [r7, #2]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f58:	e002      	b.n	8002f60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f5a:	887a      	ldrh	r2, [r7, #2]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f76:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	88fb      	ldrh	r3, [r7, #6]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d006      	beq.n	8002f90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f82:	4a05      	ldr	r2, [pc, #20]	; (8002f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 f806 	bl	8002f9c <HAL_GPIO_EXTI_Callback>
  }
}
 8002f90:	bf00      	nop
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40010400 	.word	0x40010400

08002f9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e081      	b.n	80030c8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d106      	bne.n	8002fde <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7fe f86d 	bl	80010b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2224      	movs	r2, #36	; 0x24
 8002fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0201 	bic.w	r2, r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003002:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003012:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d107      	bne.n	800302c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003028:	609a      	str	r2, [r3, #8]
 800302a:	e006      	b.n	800303a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003038:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d104      	bne.n	800304c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800304a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6812      	ldr	r2, [r2, #0]
 8003056:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800305a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800305e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800306e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69d9      	ldr	r1, [r3, #28]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1a      	ldr	r2, [r3, #32]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b20      	cmp	r3, #32
 80030e4:	d138      	bne.n	8003158 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e032      	b.n	800315a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2224      	movs	r2, #36	; 0x24
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0201 	bic.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003122:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6819      	ldr	r1, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	e000      	b.n	800315a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003158:	2302      	movs	r3, #2
  }
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003166:	b480      	push	{r7}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b20      	cmp	r3, #32
 800317a:	d139      	bne.n	80031f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003186:	2302      	movs	r3, #2
 8003188:	e033      	b.n	80031f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2224      	movs	r2, #36	; 0x24
 8003196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0201 	bic.w	r2, r2, #1
 80031a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	021b      	lsls	r3, r3, #8
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	e000      	b.n	80031f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031f0:	2302      	movs	r3, #2
  }
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
	...

08003200 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af02      	add	r7, sp, #8
 8003206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800320c:	f7fe fb70 	bl	80018f0 <HAL_GetTick>
 8003210:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d102      	bne.n	800321e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
 800321c:	e092      	b.n	8003344 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003228:	2b00      	cmp	r3, #0
 800322a:	f040 808b 	bne.w	8003344 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fd ffe4 	bl	80011fc <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003234:	f241 3188 	movw	r1, #5000	; 0x1388
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f88b 	bl	8003354 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	4b42      	ldr	r3, [pc, #264]	; (8003350 <HAL_OSPI_Init+0x150>)
 8003246:	4013      	ands	r3, r2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	68d1      	ldr	r1, [r2, #12]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6912      	ldr	r2, [r2, #16]
 8003250:	3a01      	subs	r2, #1
 8003252:	0412      	lsls	r2, r2, #16
 8003254:	4311      	orrs	r1, r2
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6952      	ldr	r2, [r2, #20]
 800325a:	3a01      	subs	r2, #1
 800325c:	0212      	lsls	r2, r2, #8
 800325e:	4311      	orrs	r1, r2
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003264:	4311      	orrs	r1, r2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	69d2      	ldr	r2, [r2, #28]
 800326a:	4311      	orrs	r1, r2
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6812      	ldr	r2, [r2, #0]
 8003270:	430b      	orrs	r3, r1
 8003272:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	0412      	lsls	r2, r2, #16
 800327e:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	3b01      	subs	r3, #1
 8003290:	021a      	lsls	r2, r3, #8
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2200      	movs	r2, #0
 80032a4:	2120      	movs	r1, #32
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 fb98 	bl	80039dc <OSPI_WaitFlagStateUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d146      	bne.n	8003344 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	1e5a      	subs	r2, r3, #1
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80032ec:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0201 	orr.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d107      	bne.n	800332c <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0202 	orr.w	r2, r2, #2
 800332a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003334:	d103      	bne.n	800333e <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	645a      	str	r2, [r3, #68]	; 0x44
 800333c:	e002      	b.n	8003344 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2202      	movs	r2, #2
 8003342:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003344:	7bfb      	ldrb	r3, [r7, #15]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	f8e0f8f4 	.word	0xf8e0f8f4

08003354 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b092      	sub	sp, #72	; 0x48
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a08      	ldr	r2, [pc, #32]	; (80033b4 <HAL_OSPIM_Config+0x40>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d105      	bne.n	80033a2 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 800339a:	2301      	movs	r3, #1
 800339c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80033a0:	e004      	b.n	80033ac <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80033a2:	2301      	movs	r3, #1
 80033a4:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80033ac:	2300      	movs	r3, #0
 80033ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80033b2:	e01f      	b.n	80033f4 <HAL_OSPIM_Config+0x80>
 80033b4:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80033b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033bc:	3301      	adds	r3, #1
 80033be:	b2d8      	uxtb	r0, r3
 80033c0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80033c4:	f107 0114 	add.w	r1, r7, #20
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	4619      	mov	r1, r3
 80033d4:	f000 fb3a 	bl	8003a4c <OSPIM_GetConfig>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d005      	beq.n	80033ea <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2208      	movs	r2, #8
 80033e8:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80033ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033ee:	3301      	adds	r3, #1
 80033f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80033f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d9dd      	bls.n	80033b8 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80033fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003400:	2b00      	cmp	r3, #0
 8003402:	f040 82de 	bne.w	80039c2 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003406:	4bc6      	ldr	r3, [pc, #792]	; (8003720 <HAL_OSPIM_Config+0x3ac>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00b      	beq.n	800342a <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003412:	4bc3      	ldr	r3, [pc, #780]	; (8003720 <HAL_OSPIM_Config+0x3ac>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4ac2      	ldr	r2, [pc, #776]	; (8003720 <HAL_OSPIM_Config+0x3ac>)
 8003418:	f023 0301 	bic.w	r3, r3, #1
 800341c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800341e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800342a:	4bbe      	ldr	r3, [pc, #760]	; (8003724 <HAL_OSPIM_Config+0x3b0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00b      	beq.n	800344e <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003436:	4bbb      	ldr	r3, [pc, #748]	; (8003724 <HAL_OSPIM_Config+0x3b0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4aba      	ldr	r2, [pc, #744]	; (8003724 <HAL_OSPIM_Config+0x3b0>)
 800343c:	f023 0301 	bic.w	r3, r3, #1
 8003440:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003442:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003446:	f043 0302 	orr.w	r3, r3, #2
 800344a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800344e:	49b6      	ldr	r1, [pc, #728]	; (8003728 <HAL_OSPIM_Config+0x3b4>)
 8003450:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	3348      	adds	r3, #72	; 0x48
 800345c:	443b      	add	r3, r7
 800345e:	3b2c      	subs	r3, #44	; 0x2c
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	3b01      	subs	r3, #1
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	6859      	ldr	r1, [r3, #4]
 800346a:	48af      	ldr	r0, [pc, #700]	; (8003728 <HAL_OSPIM_Config+0x3b4>)
 800346c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	3348      	adds	r3, #72	; 0x48
 8003478:	443b      	add	r3, r7
 800347a:	3b2c      	subs	r3, #44	; 0x2c
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3b01      	subs	r3, #1
 8003480:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4403      	add	r3, r0
 8003488:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 800348a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	3348      	adds	r3, #72	; 0x48
 8003496:	443b      	add	r3, r7
 8003498:	3b34      	subs	r3, #52	; 0x34
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80a1 	beq.w	80035e4 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80034a2:	49a1      	ldr	r1, [pc, #644]	; (8003728 <HAL_OSPIM_Config+0x3b4>)
 80034a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	3348      	adds	r3, #72	; 0x48
 80034b0:	443b      	add	r3, r7
 80034b2:	3b34      	subs	r3, #52	; 0x34
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	6859      	ldr	r1, [r3, #4]
 80034be:	489a      	ldr	r0, [pc, #616]	; (8003728 <HAL_OSPIM_Config+0x3b4>)
 80034c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	3348      	adds	r3, #72	; 0x48
 80034cc:	443b      	add	r3, r7
 80034ce:	3b34      	subs	r3, #52	; 0x34
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	f021 0201 	bic.w	r2, r1, #1
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4403      	add	r3, r0
 80034dc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80034de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	3348      	adds	r3, #72	; 0x48
 80034ea:	443b      	add	r3, r7
 80034ec:	3b30      	subs	r3, #48	; 0x30
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d01d      	beq.n	8003530 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80034f4:	498c      	ldr	r1, [pc, #560]	; (8003728 <HAL_OSPIM_Config+0x3b4>)
 80034f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	3348      	adds	r3, #72	; 0x48
 8003502:	443b      	add	r3, r7
 8003504:	3b30      	subs	r3, #48	; 0x30
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3b01      	subs	r3, #1
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	6859      	ldr	r1, [r3, #4]
 8003510:	4885      	ldr	r0, [pc, #532]	; (8003728 <HAL_OSPIM_Config+0x3b4>)
 8003512:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	3348      	adds	r3, #72	; 0x48
 800351e:	443b      	add	r3, r7
 8003520:	3b30      	subs	r3, #48	; 0x30
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3b01      	subs	r3, #1
 8003526:	f021 0210 	bic.w	r2, r1, #16
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4403      	add	r3, r0
 800352e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003530:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	3348      	adds	r3, #72	; 0x48
 800353c:	443b      	add	r3, r7
 800353e:	3b28      	subs	r3, #40	; 0x28
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d021      	beq.n	800358a <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003546:	4978      	ldr	r1, [pc, #480]	; (8003728 <HAL_OSPIM_Config+0x3b4>)
 8003548:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	3348      	adds	r3, #72	; 0x48
 8003554:	443b      	add	r3, r7
 8003556:	3b28      	subs	r3, #40	; 0x28
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3b01      	subs	r3, #1
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	440b      	add	r3, r1
 8003564:	6859      	ldr	r1, [r3, #4]
 8003566:	4870      	ldr	r0, [pc, #448]	; (8003728 <HAL_OSPIM_Config+0x3b4>)
 8003568:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	3348      	adds	r3, #72	; 0x48
 8003574:	443b      	add	r3, r7
 8003576:	3b28      	subs	r3, #40	; 0x28
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	3b01      	subs	r3, #1
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4403      	add	r3, r0
 8003588:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800358a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	3348      	adds	r3, #72	; 0x48
 8003596:	443b      	add	r3, r7
 8003598:	3b24      	subs	r3, #36	; 0x24
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d021      	beq.n	80035e4 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80035a0:	4961      	ldr	r1, [pc, #388]	; (8003728 <HAL_OSPIM_Config+0x3b4>)
 80035a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	3348      	adds	r3, #72	; 0x48
 80035ae:	443b      	add	r3, r7
 80035b0:	3b24      	subs	r3, #36	; 0x24
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	6859      	ldr	r1, [r3, #4]
 80035c0:	4859      	ldr	r0, [pc, #356]	; (8003728 <HAL_OSPIM_Config+0x3b4>)
 80035c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	3348      	adds	r3, #72	; 0x48
 80035ce:	443b      	add	r3, r7
 80035d0:	3b24      	subs	r3, #36	; 0x24
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4403      	add	r3, r0
 80035e2:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	6819      	ldr	r1, [r3, #0]
 80035e8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	3348      	adds	r3, #72	; 0x48
 80035f6:	443b      	add	r3, r7
 80035f8:	3b34      	subs	r3, #52	; 0x34
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4299      	cmp	r1, r3
 80035fe:	d038      	beq.n	8003672 <HAL_OSPIM_Config+0x2fe>
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	6859      	ldr	r1, [r3, #4]
 8003604:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	3348      	adds	r3, #72	; 0x48
 8003612:	443b      	add	r3, r7
 8003614:	3b30      	subs	r3, #48	; 0x30
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4299      	cmp	r1, r3
 800361a:	d02a      	beq.n	8003672 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	6899      	ldr	r1, [r3, #8]
 8003620:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003624:	4613      	mov	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	3348      	adds	r3, #72	; 0x48
 800362e:	443b      	add	r3, r7
 8003630:	3b2c      	subs	r3, #44	; 0x2c
 8003632:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003634:	4299      	cmp	r1, r3
 8003636:	d01c      	beq.n	8003672 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	68d9      	ldr	r1, [r3, #12]
 800363c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	3348      	adds	r3, #72	; 0x48
 800364a:	443b      	add	r3, r7
 800364c:	3b28      	subs	r3, #40	; 0x28
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4299      	cmp	r1, r3
 8003652:	d00e      	beq.n	8003672 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	6919      	ldr	r1, [r3, #16]
 8003658:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	3348      	adds	r3, #72	; 0x48
 8003666:	443b      	add	r3, r7
 8003668:	3b24      	subs	r3, #36	; 0x24
 800366a:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800366c:	4299      	cmp	r1, r3
 800366e:	f040 80d3 	bne.w	8003818 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003672:	492d      	ldr	r1, [pc, #180]	; (8003728 <HAL_OSPIM_Config+0x3b4>)
 8003674:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	3348      	adds	r3, #72	; 0x48
 8003682:	443b      	add	r3, r7
 8003684:	3b34      	subs	r3, #52	; 0x34
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3b01      	subs	r3, #1
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	6859      	ldr	r1, [r3, #4]
 8003690:	4825      	ldr	r0, [pc, #148]	; (8003728 <HAL_OSPIM_Config+0x3b4>)
 8003692:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	3348      	adds	r3, #72	; 0x48
 80036a0:	443b      	add	r3, r7
 80036a2:	3b34      	subs	r3, #52	; 0x34
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	f021 0201 	bic.w	r2, r1, #1
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4403      	add	r3, r0
 80036b0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80036b2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	3348      	adds	r3, #72	; 0x48
 80036c0:	443b      	add	r3, r7
 80036c2:	3b30      	subs	r3, #48	; 0x30
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d01f      	beq.n	800370a <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80036ca:	4917      	ldr	r1, [pc, #92]	; (8003728 <HAL_OSPIM_Config+0x3b4>)
 80036cc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	3348      	adds	r3, #72	; 0x48
 80036da:	443b      	add	r3, r7
 80036dc:	3b30      	subs	r3, #48	; 0x30
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	6859      	ldr	r1, [r3, #4]
 80036e8:	480f      	ldr	r0, [pc, #60]	; (8003728 <HAL_OSPIM_Config+0x3b4>)
 80036ea:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	3348      	adds	r3, #72	; 0x48
 80036f8:	443b      	add	r3, r7
 80036fa:	3b30      	subs	r3, #48	; 0x30
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3b01      	subs	r3, #1
 8003700:	f021 0210 	bic.w	r2, r1, #16
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4403      	add	r3, r0
 8003708:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800370a:	4907      	ldr	r1, [pc, #28]	; (8003728 <HAL_OSPIM_Config+0x3b4>)
 800370c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	3348      	adds	r3, #72	; 0x48
 800371a:	443b      	add	r3, r7
 800371c:	3b2c      	subs	r3, #44	; 0x2c
 800371e:	e005      	b.n	800372c <HAL_OSPIM_Config+0x3b8>
 8003720:	a0001000 	.word	0xa0001000
 8003724:	a0001400 	.word	0xa0001400
 8003728:	50061c00 	.word	0x50061c00
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3b01      	subs	r3, #1
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	6859      	ldr	r1, [r3, #4]
 8003736:	48a6      	ldr	r0, [pc, #664]	; (80039d0 <HAL_OSPIM_Config+0x65c>)
 8003738:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	3348      	adds	r3, #72	; 0x48
 8003746:	443b      	add	r3, r7
 8003748:	3b2c      	subs	r3, #44	; 0x2c
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3b01      	subs	r3, #1
 800374e:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4403      	add	r3, r0
 8003756:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003758:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	3348      	adds	r3, #72	; 0x48
 8003766:	443b      	add	r3, r7
 8003768:	3b28      	subs	r3, #40	; 0x28
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d023      	beq.n	80037b8 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003770:	4997      	ldr	r1, [pc, #604]	; (80039d0 <HAL_OSPIM_Config+0x65c>)
 8003772:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	3348      	adds	r3, #72	; 0x48
 8003780:	443b      	add	r3, r7
 8003782:	3b28      	subs	r3, #40	; 0x28
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3b01      	subs	r3, #1
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	6859      	ldr	r1, [r3, #4]
 8003792:	488f      	ldr	r0, [pc, #572]	; (80039d0 <HAL_OSPIM_Config+0x65c>)
 8003794:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	3348      	adds	r3, #72	; 0x48
 80037a2:	443b      	add	r3, r7
 80037a4:	3b28      	subs	r3, #40	; 0x28
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4403      	add	r3, r0
 80037b6:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80037b8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	3348      	adds	r3, #72	; 0x48
 80037c6:	443b      	add	r3, r7
 80037c8:	3b24      	subs	r3, #36	; 0x24
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d023      	beq.n	8003818 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80037d0:	497f      	ldr	r1, [pc, #508]	; (80039d0 <HAL_OSPIM_Config+0x65c>)
 80037d2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	3348      	adds	r3, #72	; 0x48
 80037e0:	443b      	add	r3, r7
 80037e2:	3b24      	subs	r3, #36	; 0x24
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	6859      	ldr	r1, [r3, #4]
 80037f2:	4877      	ldr	r0, [pc, #476]	; (80039d0 <HAL_OSPIM_Config+0x65c>)
 80037f4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	3348      	adds	r3, #72	; 0x48
 8003802:	443b      	add	r3, r7
 8003804:	3b24      	subs	r3, #36	; 0x24
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3b01      	subs	r3, #1
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4403      	add	r3, r0
 8003816:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003818:	4a6d      	ldr	r2, [pc, #436]	; (80039d0 <HAL_OSPIM_Config+0x65c>)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	3b01      	subs	r3, #1
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800382a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800382c:	025b      	lsls	r3, r3, #9
 800382e:	431a      	orrs	r2, r3
 8003830:	4967      	ldr	r1, [pc, #412]	; (80039d0 <HAL_OSPIM_Config+0x65c>)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	3b01      	subs	r3, #1
 8003838:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003842:	4a63      	ldr	r2, [pc, #396]	; (80039d0 <HAL_OSPIM_Config+0x65c>)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3b01      	subs	r3, #1
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f023 0203 	bic.w	r2, r3, #3
 8003854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	431a      	orrs	r2, r3
 800385a:	495d      	ldr	r1, [pc, #372]	; (80039d0 <HAL_OSPIM_Config+0x65c>)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3b01      	subs	r3, #1
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d014      	beq.n	800389e <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003874:	4a56      	ldr	r2, [pc, #344]	; (80039d0 <HAL_OSPIM_Config+0x65c>)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	3b01      	subs	r3, #1
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003888:	015b      	lsls	r3, r3, #5
 800388a:	431a      	orrs	r2, r3
 800388c:	4950      	ldr	r1, [pc, #320]	; (80039d0 <HAL_OSPIM_Config+0x65c>)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	3b01      	subs	r3, #1
 8003894:	f042 0210 	orr.w	r2, r2, #16
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	440b      	add	r3, r1
 800389c:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d019      	beq.n	80038de <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80038aa:	4a49      	ldr	r2, [pc, #292]	; (80039d0 <HAL_OSPIM_Config+0x65c>)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	3b01      	subs	r3, #1
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80038c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038c2:	049b      	lsls	r3, r3, #18
 80038c4:	431a      	orrs	r2, r3
 80038c6:	4942      	ldr	r1, [pc, #264]	; (80039d0 <HAL_OSPIM_Config+0x65c>)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	605a      	str	r2, [r3, #4]
 80038dc:	e01c      	b.n	8003918 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d018      	beq.n	8003918 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80038e6:	4a3a      	ldr	r2, [pc, #232]	; (80039d0 <HAL_OSPIM_Config+0x65c>)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80038fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038fe:	069b      	lsls	r3, r3, #26
 8003900:	431a      	orrs	r2, r3
 8003902:	4933      	ldr	r1, [pc, #204]	; (80039d0 <HAL_OSPIM_Config+0x65c>)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	3b01      	subs	r3, #1
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d019      	beq.n	8003958 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003924:	4a2a      	ldr	r2, [pc, #168]	; (80039d0 <HAL_OSPIM_Config+0x65c>)
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	3b01      	subs	r3, #1
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800393a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800393c:	049b      	lsls	r3, r3, #18
 800393e:	431a      	orrs	r2, r3
 8003940:	4923      	ldr	r1, [pc, #140]	; (80039d0 <HAL_OSPIM_Config+0x65c>)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	3b01      	subs	r3, #1
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	e01c      	b.n	8003992 <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d018      	beq.n	8003992 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003960:	4a1b      	ldr	r2, [pc, #108]	; (80039d0 <HAL_OSPIM_Config+0x65c>)
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	3b01      	subs	r3, #1
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003978:	069b      	lsls	r3, r3, #26
 800397a:	431a      	orrs	r2, r3
 800397c:	4914      	ldr	r1, [pc, #80]	; (80039d0 <HAL_OSPIM_Config+0x65c>)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	3b01      	subs	r3, #1
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003992:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d005      	beq.n	80039aa <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800399e:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <HAL_OSPIM_Config+0x660>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a0c      	ldr	r2, [pc, #48]	; (80039d4 <HAL_OSPIM_Config+0x660>)
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80039aa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d005      	beq.n	80039c2 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80039b6:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <HAL_OSPIM_Config+0x664>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a07      	ldr	r2, [pc, #28]	; (80039d8 <HAL_OSPIM_Config+0x664>)
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80039c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3748      	adds	r7, #72	; 0x48
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	50061c00 	.word	0x50061c00
 80039d4:	a0001000 	.word	0xa0001000
 80039d8:	a0001400 	.word	0xa0001400

080039dc <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	4613      	mov	r3, r2
 80039ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80039ec:	e01a      	b.n	8003a24 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039f4:	d016      	beq.n	8003a24 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f6:	f7fd ff7b 	bl	80018f0 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d302      	bcc.n	8003a0c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10b      	bne.n	8003a24 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a12:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a18:	f043 0201 	orr.w	r2, r3, #1
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e00e      	b.n	8003a42 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6a1a      	ldr	r2, [r3, #32]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bf14      	ite	ne
 8003a32:	2301      	movne	r3, #1
 8003a34:	2300      	moveq	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d1d6      	bne.n	80039ee <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	6039      	str	r1, [r7, #0]
 8003a56:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <OSPIM_GetConfig+0x26>
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d802      	bhi.n	8003a72 <OSPIM_GetConfig+0x26>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	75fb      	strb	r3, [r7, #23]
 8003a76:	e08e      	b.n	8003b96 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2200      	movs	r2, #0
 8003a82:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	2200      	movs	r2, #0
 8003a88:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2200      	movs	r2, #0
 8003a94:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d101      	bne.n	8003aa0 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003a9c:	4b41      	ldr	r3, [pc, #260]	; (8003ba4 <OSPIM_GetConfig+0x158>)
 8003a9e:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	e074      	b.n	8003b90 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8003aa6:	4a40      	ldr	r2, [pc, #256]	; (8003ba8 <OSPIM_GetConfig+0x15c>)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00a      	beq.n	8003ad2 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4053      	eors	r3, r2
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d103      	bne.n	8003ad2 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f003 0310 	and.w	r3, r3, #16
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00a      	beq.n	8003af2 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4053      	eors	r3, r2
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d103      	bne.n	8003af2 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4053      	eors	r3, r2
 8003b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d103      	bne.n	8003b12 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d018      	beq.n	8003b4e <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4053      	eors	r3, r2
 8003b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d111      	bne.n	8003b4e <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d106      	bne.n	8003b42 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	3301      	adds	r3, #1
 8003b38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	60da      	str	r2, [r3, #12]
 8003b40:	e005      	b.n	8003b4e <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3301      	adds	r3, #1
 8003b46:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d018      	beq.n	8003b8a <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4053      	eors	r3, r2
 8003b5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d111      	bne.n	8003b8a <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d106      	bne.n	8003b7e <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	3301      	adds	r3, #1
 8003b74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	611a      	str	r2, [r3, #16]
 8003b7c:	e005      	b.n	8003b8a <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	3301      	adds	r3, #1
 8003b82:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d987      	bls.n	8003aa6 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8003b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	371c      	adds	r7, #28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	04040222 	.word	0x04040222
 8003ba8:	50061c00 	.word	0x50061c00

08003bac <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bb0:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a04      	ldr	r2, [pc, #16]	; (8003bc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bba:	6013      	str	r3, [r2, #0]
}
 8003bbc:	bf00      	nop
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40007000 	.word	0x40007000

08003bcc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bd0:	4b0d      	ldr	r3, [pc, #52]	; (8003c08 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bdc:	d102      	bne.n	8003be4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003be2:	e00b      	b.n	8003bfc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003be4:	4b08      	ldr	r3, [pc, #32]	; (8003c08 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf2:	d102      	bne.n	8003bfa <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bf8:	e000      	b.n	8003bfc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003bfa:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40007000 	.word	0x40007000

08003c0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d141      	bne.n	8003c9e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c1a:	4b4b      	ldr	r3, [pc, #300]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c26:	d131      	bne.n	8003c8c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c28:	4b47      	ldr	r3, [pc, #284]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c2e:	4a46      	ldr	r2, [pc, #280]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c38:	4b43      	ldr	r3, [pc, #268]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c40:	4a41      	ldr	r2, [pc, #260]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003c48:	4b40      	ldr	r3, [pc, #256]	; (8003d4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2232      	movs	r2, #50	; 0x32
 8003c4e:	fb02 f303 	mul.w	r3, r2, r3
 8003c52:	4a3f      	ldr	r2, [pc, #252]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c54:	fba2 2303 	umull	r2, r3, r2, r3
 8003c58:	0c9b      	lsrs	r3, r3, #18
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c5e:	e002      	b.n	8003c66 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c66:	4b38      	ldr	r3, [pc, #224]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c72:	d102      	bne.n	8003c7a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f2      	bne.n	8003c60 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c7a:	4b33      	ldr	r3, [pc, #204]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c86:	d158      	bne.n	8003d3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e057      	b.n	8003d3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c8c:	4b2e      	ldr	r3, [pc, #184]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c92:	4a2d      	ldr	r2, [pc, #180]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c9c:	e04d      	b.n	8003d3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ca4:	d141      	bne.n	8003d2a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ca6:	4b28      	ldr	r3, [pc, #160]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb2:	d131      	bne.n	8003d18 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cb4:	4b24      	ldr	r3, [pc, #144]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cba:	4a23      	ldr	r2, [pc, #140]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cc4:	4b20      	ldr	r3, [pc, #128]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ccc:	4a1e      	ldr	r2, [pc, #120]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003cd4:	4b1d      	ldr	r3, [pc, #116]	; (8003d4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2232      	movs	r2, #50	; 0x32
 8003cda:	fb02 f303 	mul.w	r3, r2, r3
 8003cde:	4a1c      	ldr	r2, [pc, #112]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce4:	0c9b      	lsrs	r3, r3, #18
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cea:	e002      	b.n	8003cf2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cf2:	4b15      	ldr	r3, [pc, #84]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfe:	d102      	bne.n	8003d06 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f2      	bne.n	8003cec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d06:	4b10      	ldr	r3, [pc, #64]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d12:	d112      	bne.n	8003d3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e011      	b.n	8003d3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d18:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d1e:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d28:	e007      	b.n	8003d3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d2a:	4b07      	ldr	r3, [pc, #28]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d32:	4a05      	ldr	r2, [pc, #20]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d38:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	40007000 	.word	0x40007000
 8003d4c:	2000000c 	.word	0x2000000c
 8003d50:	431bde83 	.word	0x431bde83

08003d54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d102      	bne.n	8003d68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	f000 bc08 	b.w	8004578 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d68:	4b96      	ldr	r3, [pc, #600]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 030c 	and.w	r3, r3, #12
 8003d70:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d72:	4b94      	ldr	r3, [pc, #592]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0310 	and.w	r3, r3, #16
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80e4 	beq.w	8003f52 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d007      	beq.n	8003da0 <HAL_RCC_OscConfig+0x4c>
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	2b0c      	cmp	r3, #12
 8003d94:	f040 808b 	bne.w	8003eae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	f040 8087 	bne.w	8003eae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003da0:	4b88      	ldr	r3, [pc, #544]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_RCC_OscConfig+0x64>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e3df      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a1a      	ldr	r2, [r3, #32]
 8003dbc:	4b81      	ldr	r3, [pc, #516]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0308 	and.w	r3, r3, #8
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d004      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x7e>
 8003dc8:	4b7e      	ldr	r3, [pc, #504]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dd0:	e005      	b.n	8003dde <HAL_RCC_OscConfig+0x8a>
 8003dd2:	4b7c      	ldr	r3, [pc, #496]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd8:	091b      	lsrs	r3, r3, #4
 8003dda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d223      	bcs.n	8003e2a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fdcc 	bl	8004984 <RCC_SetFlashLatencyFromMSIRange>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e3c0      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003df6:	4b73      	ldr	r3, [pc, #460]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a72      	ldr	r2, [pc, #456]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003dfc:	f043 0308 	orr.w	r3, r3, #8
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	4b70      	ldr	r3, [pc, #448]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	496d      	ldr	r1, [pc, #436]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e14:	4b6b      	ldr	r3, [pc, #428]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	021b      	lsls	r3, r3, #8
 8003e22:	4968      	ldr	r1, [pc, #416]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	604b      	str	r3, [r1, #4]
 8003e28:	e025      	b.n	8003e76 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e2a:	4b66      	ldr	r3, [pc, #408]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a65      	ldr	r2, [pc, #404]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e30:	f043 0308 	orr.w	r3, r3, #8
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	4b63      	ldr	r3, [pc, #396]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	4960      	ldr	r1, [pc, #384]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e48:	4b5e      	ldr	r3, [pc, #376]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	021b      	lsls	r3, r3, #8
 8003e56:	495b      	ldr	r1, [pc, #364]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d109      	bne.n	8003e76 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fd8c 	bl	8004984 <RCC_SetFlashLatencyFromMSIRange>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e380      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e76:	f000 fcc1 	bl	80047fc <HAL_RCC_GetSysClockFreq>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	4b51      	ldr	r3, [pc, #324]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	4950      	ldr	r1, [pc, #320]	; (8003fc8 <HAL_RCC_OscConfig+0x274>)
 8003e88:	5ccb      	ldrb	r3, [r1, r3]
 8003e8a:	f003 031f 	and.w	r3, r3, #31
 8003e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e92:	4a4e      	ldr	r2, [pc, #312]	; (8003fcc <HAL_RCC_OscConfig+0x278>)
 8003e94:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e96:	4b4e      	ldr	r3, [pc, #312]	; (8003fd0 <HAL_RCC_OscConfig+0x27c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fd fcd8 	bl	8001850 <HAL_InitTick>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d052      	beq.n	8003f50 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
 8003eac:	e364      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d032      	beq.n	8003f1c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003eb6:	4b43      	ldr	r3, [pc, #268]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a42      	ldr	r2, [pc, #264]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ec2:	f7fd fd15 	bl	80018f0 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003eca:	f7fd fd11 	bl	80018f0 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e34d      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003edc:	4b39      	ldr	r3, [pc, #228]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0f0      	beq.n	8003eca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ee8:	4b36      	ldr	r3, [pc, #216]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a35      	ldr	r2, [pc, #212]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003eee:	f043 0308 	orr.w	r3, r3, #8
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	4b33      	ldr	r3, [pc, #204]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	4930      	ldr	r1, [pc, #192]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f06:	4b2f      	ldr	r3, [pc, #188]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	021b      	lsls	r3, r3, #8
 8003f14:	492b      	ldr	r1, [pc, #172]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	604b      	str	r3, [r1, #4]
 8003f1a:	e01a      	b.n	8003f52 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f1c:	4b29      	ldr	r3, [pc, #164]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a28      	ldr	r2, [pc, #160]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f22:	f023 0301 	bic.w	r3, r3, #1
 8003f26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f28:	f7fd fce2 	bl	80018f0 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f30:	f7fd fcde 	bl	80018f0 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e31a      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f42:	4b20      	ldr	r3, [pc, #128]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f0      	bne.n	8003f30 <HAL_RCC_OscConfig+0x1dc>
 8003f4e:	e000      	b.n	8003f52 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d073      	beq.n	8004046 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d005      	beq.n	8003f70 <HAL_RCC_OscConfig+0x21c>
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	2b0c      	cmp	r3, #12
 8003f68:	d10e      	bne.n	8003f88 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d10b      	bne.n	8003f88 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f70:	4b14      	ldr	r3, [pc, #80]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d063      	beq.n	8004044 <HAL_RCC_OscConfig+0x2f0>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d15f      	bne.n	8004044 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e2f7      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f90:	d106      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x24c>
 8003f92:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a0b      	ldr	r2, [pc, #44]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	e025      	b.n	8003fec <HAL_RCC_OscConfig+0x298>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fa8:	d114      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x280>
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a05      	ldr	r2, [pc, #20]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	4b03      	ldr	r3, [pc, #12]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a02      	ldr	r2, [pc, #8]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	e013      	b.n	8003fec <HAL_RCC_OscConfig+0x298>
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	08008360 	.word	0x08008360
 8003fcc:	2000000c 	.word	0x2000000c
 8003fd0:	20000010 	.word	0x20000010
 8003fd4:	4ba0      	ldr	r3, [pc, #640]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a9f      	ldr	r2, [pc, #636]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8003fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fde:	6013      	str	r3, [r2, #0]
 8003fe0:	4b9d      	ldr	r3, [pc, #628]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a9c      	ldr	r2, [pc, #624]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8003fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d013      	beq.n	800401c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff4:	f7fd fc7c 	bl	80018f0 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ffc:	f7fd fc78 	bl	80018f0 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b64      	cmp	r3, #100	; 0x64
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e2b4      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800400e:	4b92      	ldr	r3, [pc, #584]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCC_OscConfig+0x2a8>
 800401a:	e014      	b.n	8004046 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7fd fc68 	bl	80018f0 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004024:	f7fd fc64 	bl	80018f0 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b64      	cmp	r3, #100	; 0x64
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e2a0      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004036:	4b88      	ldr	r3, [pc, #544]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f0      	bne.n	8004024 <HAL_RCC_OscConfig+0x2d0>
 8004042:	e000      	b.n	8004046 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d060      	beq.n	8004114 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	2b04      	cmp	r3, #4
 8004056:	d005      	beq.n	8004064 <HAL_RCC_OscConfig+0x310>
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	2b0c      	cmp	r3, #12
 800405c:	d119      	bne.n	8004092 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b02      	cmp	r3, #2
 8004062:	d116      	bne.n	8004092 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004064:	4b7c      	ldr	r3, [pc, #496]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <HAL_RCC_OscConfig+0x328>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e27d      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800407c:	4b76      	ldr	r3, [pc, #472]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	061b      	lsls	r3, r3, #24
 800408a:	4973      	ldr	r1, [pc, #460]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800408c:	4313      	orrs	r3, r2
 800408e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004090:	e040      	b.n	8004114 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d023      	beq.n	80040e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800409a:	4b6f      	ldr	r3, [pc, #444]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a6e      	ldr	r2, [pc, #440]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80040a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a6:	f7fd fc23 	bl	80018f0 <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ae:	f7fd fc1f 	bl	80018f0 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e25b      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040c0:	4b65      	ldr	r3, [pc, #404]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0f0      	beq.n	80040ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040cc:	4b62      	ldr	r3, [pc, #392]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	061b      	lsls	r3, r3, #24
 80040da:	495f      	ldr	r1, [pc, #380]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	604b      	str	r3, [r1, #4]
 80040e0:	e018      	b.n	8004114 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e2:	4b5d      	ldr	r3, [pc, #372]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a5c      	ldr	r2, [pc, #368]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80040e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ee:	f7fd fbff 	bl	80018f0 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f6:	f7fd fbfb 	bl	80018f0 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e237      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004108:	4b53      	ldr	r3, [pc, #332]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1f0      	bne.n	80040f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b00      	cmp	r3, #0
 800411e:	d03c      	beq.n	800419a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01c      	beq.n	8004162 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004128:	4b4b      	ldr	r3, [pc, #300]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800412a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800412e:	4a4a      	ldr	r2, [pc, #296]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004138:	f7fd fbda 	bl	80018f0 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004140:	f7fd fbd6 	bl	80018f0 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e212      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004152:	4b41      	ldr	r3, [pc, #260]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0ef      	beq.n	8004140 <HAL_RCC_OscConfig+0x3ec>
 8004160:	e01b      	b.n	800419a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004162:	4b3d      	ldr	r3, [pc, #244]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004168:	4a3b      	ldr	r2, [pc, #236]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800416a:	f023 0301 	bic.w	r3, r3, #1
 800416e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004172:	f7fd fbbd 	bl	80018f0 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800417a:	f7fd fbb9 	bl	80018f0 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e1f5      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800418c:	4b32      	ldr	r3, [pc, #200]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800418e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1ef      	bne.n	800417a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 80a6 	beq.w	80042f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041a8:	2300      	movs	r3, #0
 80041aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80041ac:	4b2a      	ldr	r3, [pc, #168]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80041ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10d      	bne.n	80041d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041b8:	4b27      	ldr	r3, [pc, #156]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80041ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041bc:	4a26      	ldr	r2, [pc, #152]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80041be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c2:	6593      	str	r3, [r2, #88]	; 0x58
 80041c4:	4b24      	ldr	r3, [pc, #144]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80041c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041d0:	2301      	movs	r3, #1
 80041d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041d4:	4b21      	ldr	r3, [pc, #132]	; (800425c <HAL_RCC_OscConfig+0x508>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d118      	bne.n	8004212 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041e0:	4b1e      	ldr	r3, [pc, #120]	; (800425c <HAL_RCC_OscConfig+0x508>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1d      	ldr	r2, [pc, #116]	; (800425c <HAL_RCC_OscConfig+0x508>)
 80041e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ec:	f7fd fb80 	bl	80018f0 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f4:	f7fd fb7c 	bl	80018f0 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e1b8      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004206:	4b15      	ldr	r3, [pc, #84]	; (800425c <HAL_RCC_OscConfig+0x508>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d108      	bne.n	800422c <HAL_RCC_OscConfig+0x4d8>
 800421a:	4b0f      	ldr	r3, [pc, #60]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800421c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004220:	4a0d      	ldr	r2, [pc, #52]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800422a:	e029      	b.n	8004280 <HAL_RCC_OscConfig+0x52c>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b05      	cmp	r3, #5
 8004232:	d115      	bne.n	8004260 <HAL_RCC_OscConfig+0x50c>
 8004234:	4b08      	ldr	r3, [pc, #32]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423a:	4a07      	ldr	r2, [pc, #28]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800423c:	f043 0304 	orr.w	r3, r3, #4
 8004240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004244:	4b04      	ldr	r3, [pc, #16]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	4a03      	ldr	r2, [pc, #12]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004254:	e014      	b.n	8004280 <HAL_RCC_OscConfig+0x52c>
 8004256:	bf00      	nop
 8004258:	40021000 	.word	0x40021000
 800425c:	40007000 	.word	0x40007000
 8004260:	4b9d      	ldr	r3, [pc, #628]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	4a9c      	ldr	r2, [pc, #624]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 8004268:	f023 0301 	bic.w	r3, r3, #1
 800426c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004270:	4b99      	ldr	r3, [pc, #612]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004276:	4a98      	ldr	r2, [pc, #608]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 8004278:	f023 0304 	bic.w	r3, r3, #4
 800427c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d016      	beq.n	80042b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004288:	f7fd fb32 	bl	80018f0 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800428e:	e00a      	b.n	80042a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004290:	f7fd fb2e 	bl	80018f0 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	f241 3288 	movw	r2, #5000	; 0x1388
 800429e:	4293      	cmp	r3, r2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e168      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042a6:	4b8c      	ldr	r3, [pc, #560]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 80042a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0ed      	beq.n	8004290 <HAL_RCC_OscConfig+0x53c>
 80042b4:	e015      	b.n	80042e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b6:	f7fd fb1b 	bl	80018f0 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042bc:	e00a      	b.n	80042d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042be:	f7fd fb17 	bl	80018f0 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e151      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042d4:	4b80      	ldr	r3, [pc, #512]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1ed      	bne.n	80042be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042e2:	7ffb      	ldrb	r3, [r7, #31]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d105      	bne.n	80042f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e8:	4b7b      	ldr	r3, [pc, #492]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 80042ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ec:	4a7a      	ldr	r2, [pc, #488]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 80042ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d03c      	beq.n	800437a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	2b00      	cmp	r3, #0
 8004306:	d01c      	beq.n	8004342 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004308:	4b73      	ldr	r3, [pc, #460]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 800430a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800430e:	4a72      	ldr	r2, [pc, #456]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 8004310:	f043 0301 	orr.w	r3, r3, #1
 8004314:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004318:	f7fd faea 	bl	80018f0 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004320:	f7fd fae6 	bl	80018f0 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e122      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004332:	4b69      	ldr	r3, [pc, #420]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 8004334:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0ef      	beq.n	8004320 <HAL_RCC_OscConfig+0x5cc>
 8004340:	e01b      	b.n	800437a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004342:	4b65      	ldr	r3, [pc, #404]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 8004344:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004348:	4a63      	ldr	r2, [pc, #396]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 800434a:	f023 0301 	bic.w	r3, r3, #1
 800434e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004352:	f7fd facd 	bl	80018f0 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800435a:	f7fd fac9 	bl	80018f0 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e105      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800436c:	4b5a      	ldr	r3, [pc, #360]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 800436e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1ef      	bne.n	800435a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 80f9 	beq.w	8004576 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	2b02      	cmp	r3, #2
 800438a:	f040 80cf 	bne.w	800452c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800438e:	4b52      	ldr	r3, [pc, #328]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f003 0203 	and.w	r2, r3, #3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439e:	429a      	cmp	r2, r3
 80043a0:	d12c      	bne.n	80043fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	3b01      	subs	r3, #1
 80043ae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d123      	bne.n	80043fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043be:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d11b      	bne.n	80043fc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d113      	bne.n	80043fc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043de:	085b      	lsrs	r3, r3, #1
 80043e0:	3b01      	subs	r3, #1
 80043e2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d109      	bne.n	80043fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	085b      	lsrs	r3, r3, #1
 80043f4:	3b01      	subs	r3, #1
 80043f6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d071      	beq.n	80044e0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	2b0c      	cmp	r3, #12
 8004400:	d068      	beq.n	80044d4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004402:	4b35      	ldr	r3, [pc, #212]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d105      	bne.n	800441a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800440e:	4b32      	ldr	r3, [pc, #200]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e0ac      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800441e:	4b2e      	ldr	r3, [pc, #184]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a2d      	ldr	r2, [pc, #180]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 8004424:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004428:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800442a:	f7fd fa61 	bl	80018f0 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004432:	f7fd fa5d 	bl	80018f0 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e099      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004444:	4b24      	ldr	r3, [pc, #144]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f0      	bne.n	8004432 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004450:	4b21      	ldr	r3, [pc, #132]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 8004452:	68da      	ldr	r2, [r3, #12]
 8004454:	4b21      	ldr	r3, [pc, #132]	; (80044dc <HAL_RCC_OscConfig+0x788>)
 8004456:	4013      	ands	r3, r2
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004460:	3a01      	subs	r2, #1
 8004462:	0112      	lsls	r2, r2, #4
 8004464:	4311      	orrs	r1, r2
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800446a:	0212      	lsls	r2, r2, #8
 800446c:	4311      	orrs	r1, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004472:	0852      	lsrs	r2, r2, #1
 8004474:	3a01      	subs	r2, #1
 8004476:	0552      	lsls	r2, r2, #21
 8004478:	4311      	orrs	r1, r2
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800447e:	0852      	lsrs	r2, r2, #1
 8004480:	3a01      	subs	r2, #1
 8004482:	0652      	lsls	r2, r2, #25
 8004484:	4311      	orrs	r1, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800448a:	06d2      	lsls	r2, r2, #27
 800448c:	430a      	orrs	r2, r1
 800448e:	4912      	ldr	r1, [pc, #72]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 8004490:	4313      	orrs	r3, r2
 8004492:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004494:	4b10      	ldr	r3, [pc, #64]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a0f      	ldr	r2, [pc, #60]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 800449a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800449e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044a0:	4b0d      	ldr	r3, [pc, #52]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4a0c      	ldr	r2, [pc, #48]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 80044a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044ac:	f7fd fa20 	bl	80018f0 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b4:	f7fd fa1c 	bl	80018f0 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e058      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044c6:	4b04      	ldr	r3, [pc, #16]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0f0      	beq.n	80044b4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044d2:	e050      	b.n	8004576 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e04f      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
 80044d8:	40021000 	.word	0x40021000
 80044dc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044e0:	4b27      	ldr	r3, [pc, #156]	; (8004580 <HAL_RCC_OscConfig+0x82c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d144      	bne.n	8004576 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044ec:	4b24      	ldr	r3, [pc, #144]	; (8004580 <HAL_RCC_OscConfig+0x82c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a23      	ldr	r2, [pc, #140]	; (8004580 <HAL_RCC_OscConfig+0x82c>)
 80044f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044f8:	4b21      	ldr	r3, [pc, #132]	; (8004580 <HAL_RCC_OscConfig+0x82c>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	4a20      	ldr	r2, [pc, #128]	; (8004580 <HAL_RCC_OscConfig+0x82c>)
 80044fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004502:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004504:	f7fd f9f4 	bl	80018f0 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450c:	f7fd f9f0 	bl	80018f0 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e02c      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800451e:	4b18      	ldr	r3, [pc, #96]	; (8004580 <HAL_RCC_OscConfig+0x82c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f0      	beq.n	800450c <HAL_RCC_OscConfig+0x7b8>
 800452a:	e024      	b.n	8004576 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	2b0c      	cmp	r3, #12
 8004530:	d01f      	beq.n	8004572 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004532:	4b13      	ldr	r3, [pc, #76]	; (8004580 <HAL_RCC_OscConfig+0x82c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a12      	ldr	r2, [pc, #72]	; (8004580 <HAL_RCC_OscConfig+0x82c>)
 8004538:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800453c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453e:	f7fd f9d7 	bl	80018f0 <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004546:	f7fd f9d3 	bl	80018f0 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e00f      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004558:	4b09      	ldr	r3, [pc, #36]	; (8004580 <HAL_RCC_OscConfig+0x82c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1f0      	bne.n	8004546 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004564:	4b06      	ldr	r3, [pc, #24]	; (8004580 <HAL_RCC_OscConfig+0x82c>)
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	4905      	ldr	r1, [pc, #20]	; (8004580 <HAL_RCC_OscConfig+0x82c>)
 800456a:	4b06      	ldr	r3, [pc, #24]	; (8004584 <HAL_RCC_OscConfig+0x830>)
 800456c:	4013      	ands	r3, r2
 800456e:	60cb      	str	r3, [r1, #12]
 8004570:	e001      	b.n	8004576 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3720      	adds	r7, #32
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40021000 	.word	0x40021000
 8004584:	feeefffc 	.word	0xfeeefffc

08004588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004592:	2300      	movs	r3, #0
 8004594:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e11d      	b.n	80047dc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045a0:	4b90      	ldr	r3, [pc, #576]	; (80047e4 <HAL_RCC_ClockConfig+0x25c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 030f 	and.w	r3, r3, #15
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d910      	bls.n	80045d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ae:	4b8d      	ldr	r3, [pc, #564]	; (80047e4 <HAL_RCC_ClockConfig+0x25c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 020f 	bic.w	r2, r3, #15
 80045b6:	498b      	ldr	r1, [pc, #556]	; (80047e4 <HAL_RCC_ClockConfig+0x25c>)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045be:	4b89      	ldr	r3, [pc, #548]	; (80047e4 <HAL_RCC_ClockConfig+0x25c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d001      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e105      	b.n	80047dc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d010      	beq.n	80045fe <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	4b81      	ldr	r3, [pc, #516]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d908      	bls.n	80045fe <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ec:	4b7e      	ldr	r3, [pc, #504]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	497b      	ldr	r1, [pc, #492]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d079      	beq.n	80046fe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b03      	cmp	r3, #3
 8004610:	d11e      	bne.n	8004650 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004612:	4b75      	ldr	r3, [pc, #468]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e0dc      	b.n	80047dc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004622:	f000 fa09 	bl	8004a38 <RCC_GetSysClockFreqFromPLLSource>
 8004626:	4603      	mov	r3, r0
 8004628:	4a70      	ldr	r2, [pc, #448]	; (80047ec <HAL_RCC_ClockConfig+0x264>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d946      	bls.n	80046bc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800462e:	4b6e      	ldr	r3, [pc, #440]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d140      	bne.n	80046bc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800463a:	4b6b      	ldr	r3, [pc, #428]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004642:	4a69      	ldr	r2, [pc, #420]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 8004644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004648:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800464a:	2380      	movs	r3, #128	; 0x80
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	e035      	b.n	80046bc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2b02      	cmp	r3, #2
 8004656:	d107      	bne.n	8004668 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004658:	4b63      	ldr	r3, [pc, #396]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d115      	bne.n	8004690 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e0b9      	b.n	80047dc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d107      	bne.n	8004680 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004670:	4b5d      	ldr	r3, [pc, #372]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d109      	bne.n	8004690 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e0ad      	b.n	80047dc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004680:	4b59      	ldr	r3, [pc, #356]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e0a5      	b.n	80047dc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004690:	f000 f8b4 	bl	80047fc <HAL_RCC_GetSysClockFreq>
 8004694:	4603      	mov	r3, r0
 8004696:	4a55      	ldr	r2, [pc, #340]	; (80047ec <HAL_RCC_ClockConfig+0x264>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d90f      	bls.n	80046bc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800469c:	4b52      	ldr	r3, [pc, #328]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d109      	bne.n	80046bc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046a8:	4b4f      	ldr	r3, [pc, #316]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046b0:	4a4d      	ldr	r2, [pc, #308]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 80046b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046bc:	4b4a      	ldr	r3, [pc, #296]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f023 0203 	bic.w	r2, r3, #3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	4947      	ldr	r1, [pc, #284]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ce:	f7fd f90f 	bl	80018f0 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d4:	e00a      	b.n	80046ec <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d6:	f7fd f90b 	bl	80018f0 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e077      	b.n	80047dc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ec:	4b3e      	ldr	r3, [pc, #248]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 020c 	and.w	r2, r3, #12
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d1eb      	bne.n	80046d6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2b80      	cmp	r3, #128	; 0x80
 8004702:	d105      	bne.n	8004710 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004704:	4b38      	ldr	r3, [pc, #224]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	4a37      	ldr	r2, [pc, #220]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 800470a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800470e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d010      	beq.n	800473e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	4b31      	ldr	r3, [pc, #196]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004728:	429a      	cmp	r2, r3
 800472a:	d208      	bcs.n	800473e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800472c:	4b2e      	ldr	r3, [pc, #184]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	492b      	ldr	r1, [pc, #172]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 800473a:	4313      	orrs	r3, r2
 800473c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800473e:	4b29      	ldr	r3, [pc, #164]	; (80047e4 <HAL_RCC_ClockConfig+0x25c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d210      	bcs.n	800476e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800474c:	4b25      	ldr	r3, [pc, #148]	; (80047e4 <HAL_RCC_ClockConfig+0x25c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f023 020f 	bic.w	r2, r3, #15
 8004754:	4923      	ldr	r1, [pc, #140]	; (80047e4 <HAL_RCC_ClockConfig+0x25c>)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	4313      	orrs	r3, r2
 800475a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800475c:	4b21      	ldr	r3, [pc, #132]	; (80047e4 <HAL_RCC_ClockConfig+0x25c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 030f 	and.w	r3, r3, #15
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d001      	beq.n	800476e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e036      	b.n	80047dc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	d008      	beq.n	800478c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800477a:	4b1b      	ldr	r3, [pc, #108]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	4918      	ldr	r1, [pc, #96]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 8004788:	4313      	orrs	r3, r2
 800478a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0308 	and.w	r3, r3, #8
 8004794:	2b00      	cmp	r3, #0
 8004796:	d009      	beq.n	80047ac <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004798:	4b13      	ldr	r3, [pc, #76]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	4910      	ldr	r1, [pc, #64]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047ac:	f000 f826 	bl	80047fc <HAL_RCC_GetSysClockFreq>
 80047b0:	4602      	mov	r2, r0
 80047b2:	4b0d      	ldr	r3, [pc, #52]	; (80047e8 <HAL_RCC_ClockConfig+0x260>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	091b      	lsrs	r3, r3, #4
 80047b8:	f003 030f 	and.w	r3, r3, #15
 80047bc:	490c      	ldr	r1, [pc, #48]	; (80047f0 <HAL_RCC_ClockConfig+0x268>)
 80047be:	5ccb      	ldrb	r3, [r1, r3]
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	fa22 f303 	lsr.w	r3, r2, r3
 80047c8:	4a0a      	ldr	r2, [pc, #40]	; (80047f4 <HAL_RCC_ClockConfig+0x26c>)
 80047ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <HAL_RCC_ClockConfig+0x270>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7fd f83d 	bl	8001850 <HAL_InitTick>
 80047d6:	4603      	mov	r3, r0
 80047d8:	73fb      	strb	r3, [r7, #15]

  return status;
 80047da:	7bfb      	ldrb	r3, [r7, #15]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3718      	adds	r7, #24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40022000 	.word	0x40022000
 80047e8:	40021000 	.word	0x40021000
 80047ec:	04c4b400 	.word	0x04c4b400
 80047f0:	08008360 	.word	0x08008360
 80047f4:	2000000c 	.word	0x2000000c
 80047f8:	20000010 	.word	0x20000010

080047fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b089      	sub	sp, #36	; 0x24
 8004800:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]
 8004806:	2300      	movs	r3, #0
 8004808:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800480a:	4b3e      	ldr	r3, [pc, #248]	; (8004904 <HAL_RCC_GetSysClockFreq+0x108>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004814:	4b3b      	ldr	r3, [pc, #236]	; (8004904 <HAL_RCC_GetSysClockFreq+0x108>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d005      	beq.n	8004830 <HAL_RCC_GetSysClockFreq+0x34>
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	2b0c      	cmp	r3, #12
 8004828:	d121      	bne.n	800486e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d11e      	bne.n	800486e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004830:	4b34      	ldr	r3, [pc, #208]	; (8004904 <HAL_RCC_GetSysClockFreq+0x108>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b00      	cmp	r3, #0
 800483a:	d107      	bne.n	800484c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800483c:	4b31      	ldr	r3, [pc, #196]	; (8004904 <HAL_RCC_GetSysClockFreq+0x108>)
 800483e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004842:	0a1b      	lsrs	r3, r3, #8
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	61fb      	str	r3, [r7, #28]
 800484a:	e005      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800484c:	4b2d      	ldr	r3, [pc, #180]	; (8004904 <HAL_RCC_GetSysClockFreq+0x108>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	091b      	lsrs	r3, r3, #4
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004858:	4a2b      	ldr	r2, [pc, #172]	; (8004908 <HAL_RCC_GetSysClockFreq+0x10c>)
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004860:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10d      	bne.n	8004884 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800486c:	e00a      	b.n	8004884 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	2b04      	cmp	r3, #4
 8004872:	d102      	bne.n	800487a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004874:	4b25      	ldr	r3, [pc, #148]	; (800490c <HAL_RCC_GetSysClockFreq+0x110>)
 8004876:	61bb      	str	r3, [r7, #24]
 8004878:	e004      	b.n	8004884 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	2b08      	cmp	r3, #8
 800487e:	d101      	bne.n	8004884 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004880:	4b23      	ldr	r3, [pc, #140]	; (8004910 <HAL_RCC_GetSysClockFreq+0x114>)
 8004882:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	2b0c      	cmp	r3, #12
 8004888:	d134      	bne.n	80048f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800488a:	4b1e      	ldr	r3, [pc, #120]	; (8004904 <HAL_RCC_GetSysClockFreq+0x108>)
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2b02      	cmp	r3, #2
 8004898:	d003      	beq.n	80048a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b03      	cmp	r3, #3
 800489e:	d003      	beq.n	80048a8 <HAL_RCC_GetSysClockFreq+0xac>
 80048a0:	e005      	b.n	80048ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80048a2:	4b1a      	ldr	r3, [pc, #104]	; (800490c <HAL_RCC_GetSysClockFreq+0x110>)
 80048a4:	617b      	str	r3, [r7, #20]
      break;
 80048a6:	e005      	b.n	80048b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80048a8:	4b19      	ldr	r3, [pc, #100]	; (8004910 <HAL_RCC_GetSysClockFreq+0x114>)
 80048aa:	617b      	str	r3, [r7, #20]
      break;
 80048ac:	e002      	b.n	80048b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	617b      	str	r3, [r7, #20]
      break;
 80048b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048b4:	4b13      	ldr	r3, [pc, #76]	; (8004904 <HAL_RCC_GetSysClockFreq+0x108>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	091b      	lsrs	r3, r3, #4
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	3301      	adds	r3, #1
 80048c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80048c2:	4b10      	ldr	r3, [pc, #64]	; (8004904 <HAL_RCC_GetSysClockFreq+0x108>)
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	0a1b      	lsrs	r3, r3, #8
 80048c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	fb03 f202 	mul.w	r2, r3, r2
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048da:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <HAL_RCC_GetSysClockFreq+0x108>)
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	0e5b      	lsrs	r3, r3, #25
 80048e0:	f003 0303 	and.w	r3, r3, #3
 80048e4:	3301      	adds	r3, #1
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80048f4:	69bb      	ldr	r3, [r7, #24]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3724      	adds	r7, #36	; 0x24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	40021000 	.word	0x40021000
 8004908:	08008378 	.word	0x08008378
 800490c:	00f42400 	.word	0x00f42400
 8004910:	007a1200 	.word	0x007a1200

08004914 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004918:	4b03      	ldr	r3, [pc, #12]	; (8004928 <HAL_RCC_GetHCLKFreq+0x14>)
 800491a:	681b      	ldr	r3, [r3, #0]
}
 800491c:	4618      	mov	r0, r3
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	2000000c 	.word	0x2000000c

0800492c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004930:	f7ff fff0 	bl	8004914 <HAL_RCC_GetHCLKFreq>
 8004934:	4602      	mov	r2, r0
 8004936:	4b06      	ldr	r3, [pc, #24]	; (8004950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	0a1b      	lsrs	r3, r3, #8
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	4904      	ldr	r1, [pc, #16]	; (8004954 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004942:	5ccb      	ldrb	r3, [r1, r3]
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800494c:	4618      	mov	r0, r3
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40021000 	.word	0x40021000
 8004954:	08008370 	.word	0x08008370

08004958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800495c:	f7ff ffda 	bl	8004914 <HAL_RCC_GetHCLKFreq>
 8004960:	4602      	mov	r2, r0
 8004962:	4b06      	ldr	r3, [pc, #24]	; (800497c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	0adb      	lsrs	r3, r3, #11
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	4904      	ldr	r1, [pc, #16]	; (8004980 <HAL_RCC_GetPCLK2Freq+0x28>)
 800496e:	5ccb      	ldrb	r3, [r1, r3]
 8004970:	f003 031f 	and.w	r3, r3, #31
 8004974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004978:	4618      	mov	r0, r3
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40021000 	.word	0x40021000
 8004980:	08008370 	.word	0x08008370

08004984 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800498c:	2300      	movs	r3, #0
 800498e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004990:	4b27      	ldr	r3, [pc, #156]	; (8004a30 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800499c:	f7ff f916 	bl	8003bcc <HAL_PWREx_GetVoltageRange>
 80049a0:	6178      	str	r0, [r7, #20]
 80049a2:	e014      	b.n	80049ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80049a4:	4b22      	ldr	r3, [pc, #136]	; (8004a30 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80049a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a8:	4a21      	ldr	r2, [pc, #132]	; (8004a30 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80049aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ae:	6593      	str	r3, [r2, #88]	; 0x58
 80049b0:	4b1f      	ldr	r3, [pc, #124]	; (8004a30 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80049b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049bc:	f7ff f906 	bl	8003bcc <HAL_PWREx_GetVoltageRange>
 80049c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049c2:	4b1b      	ldr	r3, [pc, #108]	; (8004a30 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80049c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c6:	4a1a      	ldr	r2, [pc, #104]	; (8004a30 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80049c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d4:	d10b      	bne.n	80049ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b80      	cmp	r3, #128	; 0x80
 80049da:	d913      	bls.n	8004a04 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2ba0      	cmp	r3, #160	; 0xa0
 80049e0:	d902      	bls.n	80049e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049e2:	2302      	movs	r3, #2
 80049e4:	613b      	str	r3, [r7, #16]
 80049e6:	e00d      	b.n	8004a04 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049e8:	2301      	movs	r3, #1
 80049ea:	613b      	str	r3, [r7, #16]
 80049ec:	e00a      	b.n	8004a04 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b7f      	cmp	r3, #127	; 0x7f
 80049f2:	d902      	bls.n	80049fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80049f4:	2302      	movs	r3, #2
 80049f6:	613b      	str	r3, [r7, #16]
 80049f8:	e004      	b.n	8004a04 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b70      	cmp	r3, #112	; 0x70
 80049fe:	d101      	bne.n	8004a04 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a00:	2301      	movs	r3, #1
 8004a02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a04:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f023 020f 	bic.w	r2, r3, #15
 8004a0c:	4909      	ldr	r1, [pc, #36]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a14:	4b07      	ldr	r3, [pc, #28]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d001      	beq.n	8004a26 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3718      	adds	r7, #24
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40021000 	.word	0x40021000
 8004a34:	40022000 	.word	0x40022000

08004a38 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a3e:	4b2d      	ldr	r3, [pc, #180]	; (8004af4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d00b      	beq.n	8004a66 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2b03      	cmp	r3, #3
 8004a52:	d825      	bhi.n	8004aa0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d008      	beq.n	8004a6c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d11f      	bne.n	8004aa0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004a60:	4b25      	ldr	r3, [pc, #148]	; (8004af8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004a62:	613b      	str	r3, [r7, #16]
    break;
 8004a64:	e01f      	b.n	8004aa6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004a66:	4b25      	ldr	r3, [pc, #148]	; (8004afc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004a68:	613b      	str	r3, [r7, #16]
    break;
 8004a6a:	e01c      	b.n	8004aa6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a6c:	4b21      	ldr	r3, [pc, #132]	; (8004af4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0308 	and.w	r3, r3, #8
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d107      	bne.n	8004a88 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a78:	4b1e      	ldr	r3, [pc, #120]	; (8004af4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a7e:	0a1b      	lsrs	r3, r3, #8
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	e005      	b.n	8004a94 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a88:	4b1a      	ldr	r3, [pc, #104]	; (8004af4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	091b      	lsrs	r3, r3, #4
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004a94:	4a1a      	ldr	r2, [pc, #104]	; (8004b00 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a9c:	613b      	str	r3, [r7, #16]
    break;
 8004a9e:	e002      	b.n	8004aa6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	613b      	str	r3, [r7, #16]
    break;
 8004aa4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004aa6:	4b13      	ldr	r3, [pc, #76]	; (8004af4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	091b      	lsrs	r3, r3, #4
 8004aac:	f003 030f 	and.w	r3, r3, #15
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ab4:	4b0f      	ldr	r3, [pc, #60]	; (8004af4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	0a1b      	lsrs	r3, r3, #8
 8004aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	fb03 f202 	mul.w	r2, r3, r2
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aca:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004acc:	4b09      	ldr	r3, [pc, #36]	; (8004af4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	0e5b      	lsrs	r3, r3, #25
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004ae6:	683b      	ldr	r3, [r7, #0]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	371c      	adds	r7, #28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	40021000 	.word	0x40021000
 8004af8:	00f42400 	.word	0x00f42400
 8004afc:	007a1200 	.word	0x007a1200
 8004b00:	08008378 	.word	0x08008378

08004b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b10:	2300      	movs	r3, #0
 8004b12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d040      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b24:	2b80      	cmp	r3, #128	; 0x80
 8004b26:	d02a      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004b28:	2b80      	cmp	r3, #128	; 0x80
 8004b2a:	d825      	bhi.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004b2c:	2b60      	cmp	r3, #96	; 0x60
 8004b2e:	d026      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004b30:	2b60      	cmp	r3, #96	; 0x60
 8004b32:	d821      	bhi.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004b34:	2b40      	cmp	r3, #64	; 0x40
 8004b36:	d006      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004b38:	2b40      	cmp	r3, #64	; 0x40
 8004b3a:	d81d      	bhi.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d009      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d010      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004b44:	e018      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b46:	4b89      	ldr	r3, [pc, #548]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	4a88      	ldr	r2, [pc, #544]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b50:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b52:	e015      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	3304      	adds	r3, #4
 8004b58:	2100      	movs	r1, #0
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fb12 	bl	8005184 <RCCEx_PLLSAI1_Config>
 8004b60:	4603      	mov	r3, r0
 8004b62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b64:	e00c      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3320      	adds	r3, #32
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fbfd 	bl	800536c <RCCEx_PLLSAI2_Config>
 8004b72:	4603      	mov	r3, r0
 8004b74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b76:	e003      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	74fb      	strb	r3, [r7, #19]
      break;
 8004b7c:	e000      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004b7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b80:	7cfb      	ldrb	r3, [r7, #19]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10b      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b86:	4b79      	ldr	r3, [pc, #484]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b8c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b94:	4975      	ldr	r1, [pc, #468]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004b9c:	e001      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ba0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d047      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb6:	d030      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bbc:	d82a      	bhi.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004bbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bc2:	d02a      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004bc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bc8:	d824      	bhi.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bce:	d008      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd4:	d81e      	bhi.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bde:	d010      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004be0:	e018      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004be2:	4b62      	ldr	r3, [pc, #392]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	4a61      	ldr	r2, [pc, #388]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bec:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bee:	e015      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fac4 	bl	8005184 <RCCEx_PLLSAI1_Config>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c00:	e00c      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3320      	adds	r3, #32
 8004c06:	2100      	movs	r1, #0
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 fbaf 	bl	800536c <RCCEx_PLLSAI2_Config>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c12:	e003      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	74fb      	strb	r3, [r7, #19]
      break;
 8004c18:	e000      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c1c:	7cfb      	ldrb	r3, [r7, #19]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10b      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c22:	4b52      	ldr	r3, [pc, #328]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c30:	494e      	ldr	r1, [pc, #312]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004c38:	e001      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3a:	7cfb      	ldrb	r3, [r7, #19]
 8004c3c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 809f 	beq.w	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c50:	4b46      	ldr	r3, [pc, #280]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e000      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004c60:	2300      	movs	r3, #0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00d      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c66:	4b41      	ldr	r3, [pc, #260]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6a:	4a40      	ldr	r2, [pc, #256]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c70:	6593      	str	r3, [r2, #88]	; 0x58
 8004c72:	4b3e      	ldr	r3, [pc, #248]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7a:	60bb      	str	r3, [r7, #8]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c82:	4b3b      	ldr	r3, [pc, #236]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a3a      	ldr	r2, [pc, #232]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c8e:	f7fc fe2f 	bl	80018f0 <HAL_GetTick>
 8004c92:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c94:	e009      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c96:	f7fc fe2b 	bl	80018f0 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d902      	bls.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	74fb      	strb	r3, [r7, #19]
        break;
 8004ca8:	e005      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004caa:	4b31      	ldr	r3, [pc, #196]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0ef      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004cb6:	7cfb      	ldrb	r3, [r7, #19]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d15b      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004cbc:	4b2b      	ldr	r3, [pc, #172]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d01f      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d019      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cda:	4b24      	ldr	r3, [pc, #144]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ce6:	4b21      	ldr	r3, [pc, #132]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cec:	4a1f      	ldr	r2, [pc, #124]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cf6:	4b1d      	ldr	r3, [pc, #116]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfc:	4a1b      	ldr	r2, [pc, #108]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d06:	4a19      	ldr	r2, [pc, #100]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d016      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fc fdea 	bl	80018f0 <HAL_GetTick>
 8004d1c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d1e:	e00b      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d20:	f7fc fde6 	bl	80018f0 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d902      	bls.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	74fb      	strb	r3, [r7, #19]
            break;
 8004d36:	e006      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d38:	4b0c      	ldr	r3, [pc, #48]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0ec      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004d46:	7cfb      	ldrb	r3, [r7, #19]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10c      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d4c:	4b07      	ldr	r3, [pc, #28]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5c:	4903      	ldr	r1, [pc, #12]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d64:	e008      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d66:	7cfb      	ldrb	r3, [r7, #19]
 8004d68:	74bb      	strb	r3, [r7, #18]
 8004d6a:	e005      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d74:	7cfb      	ldrb	r3, [r7, #19]
 8004d76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d78:	7c7b      	ldrb	r3, [r7, #17]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d105      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d7e:	4ba0      	ldr	r3, [pc, #640]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d82:	4a9f      	ldr	r2, [pc, #636]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d88:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d96:	4b9a      	ldr	r3, [pc, #616]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9c:	f023 0203 	bic.w	r2, r3, #3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da4:	4996      	ldr	r1, [pc, #600]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00a      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004db8:	4b91      	ldr	r3, [pc, #580]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbe:	f023 020c 	bic.w	r2, r3, #12
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	498e      	ldr	r1, [pc, #568]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0304 	and.w	r3, r3, #4
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dda:	4b89      	ldr	r3, [pc, #548]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de8:	4985      	ldr	r1, [pc, #532]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0308 	and.w	r3, r3, #8
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004dfc:	4b80      	ldr	r3, [pc, #512]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e0a:	497d      	ldr	r1, [pc, #500]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e1e:	4b78      	ldr	r3, [pc, #480]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e2c:	4974      	ldr	r1, [pc, #464]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0320 	and.w	r3, r3, #32
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00a      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e40:	4b6f      	ldr	r3, [pc, #444]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e4e:	496c      	ldr	r1, [pc, #432]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e62:	4b67      	ldr	r3, [pc, #412]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e70:	4963      	ldr	r1, [pc, #396]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00a      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e84:	4b5e      	ldr	r3, [pc, #376]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e92:	495b      	ldr	r1, [pc, #364]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00a      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ea6:	4b56      	ldr	r3, [pc, #344]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb4:	4952      	ldr	r1, [pc, #328]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00a      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ec8:	4b4d      	ldr	r3, [pc, #308]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ece:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed6:	494a      	ldr	r1, [pc, #296]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00a      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004eea:	4b45      	ldr	r3, [pc, #276]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef8:	4941      	ldr	r1, [pc, #260]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00a      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f0c:	4b3c      	ldr	r3, [pc, #240]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f12:	f023 0203 	bic.w	r2, r3, #3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f1a:	4939      	ldr	r1, [pc, #228]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d028      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f2e:	4b34      	ldr	r3, [pc, #208]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f3c:	4930      	ldr	r1, [pc, #192]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f4c:	d106      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f4e:	4b2c      	ldr	r3, [pc, #176]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	4a2b      	ldr	r2, [pc, #172]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f58:	60d3      	str	r3, [r2, #12]
 8004f5a:	e011      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f64:	d10c      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 f909 	bl	8005184 <RCCEx_PLLSAI1_Config>
 8004f72:	4603      	mov	r3, r0
 8004f74:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f76:	7cfb      	ldrb	r3, [r7, #19]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004f7c:	7cfb      	ldrb	r3, [r7, #19]
 8004f7e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d04d      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f94:	d108      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004f96:	4b1a      	ldr	r3, [pc, #104]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f9c:	4a18      	ldr	r2, [pc, #96]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fa2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004fa6:	e012      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004fa8:	4b15      	ldr	r3, [pc, #84]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004faa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fae:	4a14      	ldr	r2, [pc, #80]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fb4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004fb8:	4b11      	ldr	r3, [pc, #68]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fc6:	490e      	ldr	r1, [pc, #56]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fd6:	d106      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fd8:	4b09      	ldr	r3, [pc, #36]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	4a08      	ldr	r2, [pc, #32]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fe2:	60d3      	str	r3, [r2, #12]
 8004fe4:	e020      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fee:	d109      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ff0:	4b03      	ldr	r3, [pc, #12]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	4a02      	ldr	r2, [pc, #8]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffa:	60d3      	str	r3, [r2, #12]
 8004ffc:	e014      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004ffe:	bf00      	nop
 8005000:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005008:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800500c:	d10c      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3304      	adds	r3, #4
 8005012:	2101      	movs	r1, #1
 8005014:	4618      	mov	r0, r3
 8005016:	f000 f8b5 	bl	8005184 <RCCEx_PLLSAI1_Config>
 800501a:	4603      	mov	r3, r0
 800501c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800501e:	7cfb      	ldrb	r3, [r7, #19]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005024:	7cfb      	ldrb	r3, [r7, #19]
 8005026:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d028      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005034:	4b4a      	ldr	r3, [pc, #296]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005042:	4947      	ldr	r1, [pc, #284]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005044:	4313      	orrs	r3, r2
 8005046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800504e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005052:	d106      	bne.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005054:	4b42      	ldr	r3, [pc, #264]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	4a41      	ldr	r2, [pc, #260]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800505a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800505e:	60d3      	str	r3, [r2, #12]
 8005060:	e011      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005066:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800506a:	d10c      	bne.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3304      	adds	r3, #4
 8005070:	2101      	movs	r1, #1
 8005072:	4618      	mov	r0, r3
 8005074:	f000 f886 	bl	8005184 <RCCEx_PLLSAI1_Config>
 8005078:	4603      	mov	r3, r0
 800507a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800507c:	7cfb      	ldrb	r3, [r7, #19]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005082:	7cfb      	ldrb	r3, [r7, #19]
 8005084:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d01e      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005092:	4b33      	ldr	r3, [pc, #204]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005098:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050a2:	492f      	ldr	r1, [pc, #188]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050b4:	d10c      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	3304      	adds	r3, #4
 80050ba:	2102      	movs	r1, #2
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 f861 	bl	8005184 <RCCEx_PLLSAI1_Config>
 80050c2:	4603      	mov	r3, r0
 80050c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050c6:	7cfb      	ldrb	r3, [r7, #19]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80050cc:	7cfb      	ldrb	r3, [r7, #19]
 80050ce:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00b      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050dc:	4b20      	ldr	r3, [pc, #128]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050e2:	f023 0204 	bic.w	r2, r3, #4
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ec:	491c      	ldr	r1, [pc, #112]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00b      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005100:	4b17      	ldr	r3, [pc, #92]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005102:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005106:	f023 0218 	bic.w	r2, r3, #24
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005110:	4913      	ldr	r1, [pc, #76]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d017      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005124:	4b0e      	ldr	r3, [pc, #56]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005126:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800512a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005134:	490a      	ldr	r1, [pc, #40]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005142:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005146:	d105      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005148:	4b05      	ldr	r3, [pc, #20]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	4a04      	ldr	r2, [pc, #16]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800514e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005152:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005154:	7cbb      	ldrb	r3, [r7, #18]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	40021000 	.word	0x40021000

08005164 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005168:	4b05      	ldr	r3, [pc, #20]	; (8005180 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a04      	ldr	r2, [pc, #16]	; (8005180 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800516e:	f043 0304 	orr.w	r3, r3, #4
 8005172:	6013      	str	r3, [r2, #0]
}
 8005174:	bf00      	nop
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40021000 	.word	0x40021000

08005184 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005192:	4b72      	ldr	r3, [pc, #456]	; (800535c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f003 0303 	and.w	r3, r3, #3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00e      	beq.n	80051bc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800519e:	4b6f      	ldr	r3, [pc, #444]	; (800535c <RCCEx_PLLSAI1_Config+0x1d8>)
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f003 0203 	and.w	r2, r3, #3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d103      	bne.n	80051b6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
       ||
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d142      	bne.n	800523c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	73fb      	strb	r3, [r7, #15]
 80051ba:	e03f      	b.n	800523c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b03      	cmp	r3, #3
 80051c2:	d018      	beq.n	80051f6 <RCCEx_PLLSAI1_Config+0x72>
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d825      	bhi.n	8005214 <RCCEx_PLLSAI1_Config+0x90>
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d002      	beq.n	80051d2 <RCCEx_PLLSAI1_Config+0x4e>
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d009      	beq.n	80051e4 <RCCEx_PLLSAI1_Config+0x60>
 80051d0:	e020      	b.n	8005214 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051d2:	4b62      	ldr	r3, [pc, #392]	; (800535c <RCCEx_PLLSAI1_Config+0x1d8>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d11d      	bne.n	800521a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051e2:	e01a      	b.n	800521a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051e4:	4b5d      	ldr	r3, [pc, #372]	; (800535c <RCCEx_PLLSAI1_Config+0x1d8>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d116      	bne.n	800521e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051f4:	e013      	b.n	800521e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051f6:	4b59      	ldr	r3, [pc, #356]	; (800535c <RCCEx_PLLSAI1_Config+0x1d8>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10f      	bne.n	8005222 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005202:	4b56      	ldr	r3, [pc, #344]	; (800535c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d109      	bne.n	8005222 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005212:	e006      	b.n	8005222 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	73fb      	strb	r3, [r7, #15]
      break;
 8005218:	e004      	b.n	8005224 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800521a:	bf00      	nop
 800521c:	e002      	b.n	8005224 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800521e:	bf00      	nop
 8005220:	e000      	b.n	8005224 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005222:	bf00      	nop
    }

    if(status == HAL_OK)
 8005224:	7bfb      	ldrb	r3, [r7, #15]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d108      	bne.n	800523c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800522a:	4b4c      	ldr	r3, [pc, #304]	; (800535c <RCCEx_PLLSAI1_Config+0x1d8>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f023 0203 	bic.w	r2, r3, #3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4949      	ldr	r1, [pc, #292]	; (800535c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005238:	4313      	orrs	r3, r2
 800523a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800523c:	7bfb      	ldrb	r3, [r7, #15]
 800523e:	2b00      	cmp	r3, #0
 8005240:	f040 8086 	bne.w	8005350 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005244:	4b45      	ldr	r3, [pc, #276]	; (800535c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a44      	ldr	r2, [pc, #272]	; (800535c <RCCEx_PLLSAI1_Config+0x1d8>)
 800524a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800524e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005250:	f7fc fb4e 	bl	80018f0 <HAL_GetTick>
 8005254:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005256:	e009      	b.n	800526c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005258:	f7fc fb4a 	bl	80018f0 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d902      	bls.n	800526c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	73fb      	strb	r3, [r7, #15]
        break;
 800526a:	e005      	b.n	8005278 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800526c:	4b3b      	ldr	r3, [pc, #236]	; (800535c <RCCEx_PLLSAI1_Config+0x1d8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1ef      	bne.n	8005258 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005278:	7bfb      	ldrb	r3, [r7, #15]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d168      	bne.n	8005350 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d113      	bne.n	80052ac <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005284:	4b35      	ldr	r3, [pc, #212]	; (800535c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	4b35      	ldr	r3, [pc, #212]	; (8005360 <RCCEx_PLLSAI1_Config+0x1dc>)
 800528a:	4013      	ands	r3, r2
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6892      	ldr	r2, [r2, #8]
 8005290:	0211      	lsls	r1, r2, #8
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	68d2      	ldr	r2, [r2, #12]
 8005296:	06d2      	lsls	r2, r2, #27
 8005298:	4311      	orrs	r1, r2
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6852      	ldr	r2, [r2, #4]
 800529e:	3a01      	subs	r2, #1
 80052a0:	0112      	lsls	r2, r2, #4
 80052a2:	430a      	orrs	r2, r1
 80052a4:	492d      	ldr	r1, [pc, #180]	; (800535c <RCCEx_PLLSAI1_Config+0x1d8>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	610b      	str	r3, [r1, #16]
 80052aa:	e02d      	b.n	8005308 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d115      	bne.n	80052de <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052b2:	4b2a      	ldr	r3, [pc, #168]	; (800535c <RCCEx_PLLSAI1_Config+0x1d8>)
 80052b4:	691a      	ldr	r2, [r3, #16]
 80052b6:	4b2b      	ldr	r3, [pc, #172]	; (8005364 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052b8:	4013      	ands	r3, r2
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6892      	ldr	r2, [r2, #8]
 80052be:	0211      	lsls	r1, r2, #8
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6912      	ldr	r2, [r2, #16]
 80052c4:	0852      	lsrs	r2, r2, #1
 80052c6:	3a01      	subs	r2, #1
 80052c8:	0552      	lsls	r2, r2, #21
 80052ca:	4311      	orrs	r1, r2
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6852      	ldr	r2, [r2, #4]
 80052d0:	3a01      	subs	r2, #1
 80052d2:	0112      	lsls	r2, r2, #4
 80052d4:	430a      	orrs	r2, r1
 80052d6:	4921      	ldr	r1, [pc, #132]	; (800535c <RCCEx_PLLSAI1_Config+0x1d8>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	610b      	str	r3, [r1, #16]
 80052dc:	e014      	b.n	8005308 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052de:	4b1f      	ldr	r3, [pc, #124]	; (800535c <RCCEx_PLLSAI1_Config+0x1d8>)
 80052e0:	691a      	ldr	r2, [r3, #16]
 80052e2:	4b21      	ldr	r3, [pc, #132]	; (8005368 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052e4:	4013      	ands	r3, r2
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	6892      	ldr	r2, [r2, #8]
 80052ea:	0211      	lsls	r1, r2, #8
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6952      	ldr	r2, [r2, #20]
 80052f0:	0852      	lsrs	r2, r2, #1
 80052f2:	3a01      	subs	r2, #1
 80052f4:	0652      	lsls	r2, r2, #25
 80052f6:	4311      	orrs	r1, r2
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6852      	ldr	r2, [r2, #4]
 80052fc:	3a01      	subs	r2, #1
 80052fe:	0112      	lsls	r2, r2, #4
 8005300:	430a      	orrs	r2, r1
 8005302:	4916      	ldr	r1, [pc, #88]	; (800535c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005304:	4313      	orrs	r3, r2
 8005306:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005308:	4b14      	ldr	r3, [pc, #80]	; (800535c <RCCEx_PLLSAI1_Config+0x1d8>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a13      	ldr	r2, [pc, #76]	; (800535c <RCCEx_PLLSAI1_Config+0x1d8>)
 800530e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005312:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005314:	f7fc faec 	bl	80018f0 <HAL_GetTick>
 8005318:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800531a:	e009      	b.n	8005330 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800531c:	f7fc fae8 	bl	80018f0 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d902      	bls.n	8005330 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	73fb      	strb	r3, [r7, #15]
          break;
 800532e:	e005      	b.n	800533c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005330:	4b0a      	ldr	r3, [pc, #40]	; (800535c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d0ef      	beq.n	800531c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800533c:	7bfb      	ldrb	r3, [r7, #15]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d106      	bne.n	8005350 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005342:	4b06      	ldr	r3, [pc, #24]	; (800535c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005344:	691a      	ldr	r2, [r3, #16]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	4904      	ldr	r1, [pc, #16]	; (800535c <RCCEx_PLLSAI1_Config+0x1d8>)
 800534c:	4313      	orrs	r3, r2
 800534e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005350:	7bfb      	ldrb	r3, [r7, #15]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	40021000 	.word	0x40021000
 8005360:	07ff800f 	.word	0x07ff800f
 8005364:	ff9f800f 	.word	0xff9f800f
 8005368:	f9ff800f 	.word	0xf9ff800f

0800536c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800537a:	4b72      	ldr	r3, [pc, #456]	; (8005544 <RCCEx_PLLSAI2_Config+0x1d8>)
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00e      	beq.n	80053a4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005386:	4b6f      	ldr	r3, [pc, #444]	; (8005544 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f003 0203 	and.w	r2, r3, #3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d103      	bne.n	800539e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
       ||
 800539a:	2b00      	cmp	r3, #0
 800539c:	d142      	bne.n	8005424 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	73fb      	strb	r3, [r7, #15]
 80053a2:	e03f      	b.n	8005424 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d018      	beq.n	80053de <RCCEx_PLLSAI2_Config+0x72>
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d825      	bhi.n	80053fc <RCCEx_PLLSAI2_Config+0x90>
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d002      	beq.n	80053ba <RCCEx_PLLSAI2_Config+0x4e>
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d009      	beq.n	80053cc <RCCEx_PLLSAI2_Config+0x60>
 80053b8:	e020      	b.n	80053fc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053ba:	4b62      	ldr	r3, [pc, #392]	; (8005544 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d11d      	bne.n	8005402 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ca:	e01a      	b.n	8005402 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053cc:	4b5d      	ldr	r3, [pc, #372]	; (8005544 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d116      	bne.n	8005406 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053dc:	e013      	b.n	8005406 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80053de:	4b59      	ldr	r3, [pc, #356]	; (8005544 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10f      	bne.n	800540a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053ea:	4b56      	ldr	r3, [pc, #344]	; (8005544 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d109      	bne.n	800540a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053fa:	e006      	b.n	800540a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005400:	e004      	b.n	800540c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005402:	bf00      	nop
 8005404:	e002      	b.n	800540c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005406:	bf00      	nop
 8005408:	e000      	b.n	800540c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800540a:	bf00      	nop
    }

    if(status == HAL_OK)
 800540c:	7bfb      	ldrb	r3, [r7, #15]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d108      	bne.n	8005424 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005412:	4b4c      	ldr	r3, [pc, #304]	; (8005544 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f023 0203 	bic.w	r2, r3, #3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4949      	ldr	r1, [pc, #292]	; (8005544 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005420:	4313      	orrs	r3, r2
 8005422:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005424:	7bfb      	ldrb	r3, [r7, #15]
 8005426:	2b00      	cmp	r3, #0
 8005428:	f040 8086 	bne.w	8005538 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800542c:	4b45      	ldr	r3, [pc, #276]	; (8005544 <RCCEx_PLLSAI2_Config+0x1d8>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a44      	ldr	r2, [pc, #272]	; (8005544 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005438:	f7fc fa5a 	bl	80018f0 <HAL_GetTick>
 800543c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800543e:	e009      	b.n	8005454 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005440:	f7fc fa56 	bl	80018f0 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d902      	bls.n	8005454 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	73fb      	strb	r3, [r7, #15]
        break;
 8005452:	e005      	b.n	8005460 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005454:	4b3b      	ldr	r3, [pc, #236]	; (8005544 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1ef      	bne.n	8005440 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005460:	7bfb      	ldrb	r3, [r7, #15]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d168      	bne.n	8005538 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d113      	bne.n	8005494 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800546c:	4b35      	ldr	r3, [pc, #212]	; (8005544 <RCCEx_PLLSAI2_Config+0x1d8>)
 800546e:	695a      	ldr	r2, [r3, #20]
 8005470:	4b35      	ldr	r3, [pc, #212]	; (8005548 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005472:	4013      	ands	r3, r2
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	6892      	ldr	r2, [r2, #8]
 8005478:	0211      	lsls	r1, r2, #8
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	68d2      	ldr	r2, [r2, #12]
 800547e:	06d2      	lsls	r2, r2, #27
 8005480:	4311      	orrs	r1, r2
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6852      	ldr	r2, [r2, #4]
 8005486:	3a01      	subs	r2, #1
 8005488:	0112      	lsls	r2, r2, #4
 800548a:	430a      	orrs	r2, r1
 800548c:	492d      	ldr	r1, [pc, #180]	; (8005544 <RCCEx_PLLSAI2_Config+0x1d8>)
 800548e:	4313      	orrs	r3, r2
 8005490:	614b      	str	r3, [r1, #20]
 8005492:	e02d      	b.n	80054f0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d115      	bne.n	80054c6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800549a:	4b2a      	ldr	r3, [pc, #168]	; (8005544 <RCCEx_PLLSAI2_Config+0x1d8>)
 800549c:	695a      	ldr	r2, [r3, #20]
 800549e:	4b2b      	ldr	r3, [pc, #172]	; (800554c <RCCEx_PLLSAI2_Config+0x1e0>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6892      	ldr	r2, [r2, #8]
 80054a6:	0211      	lsls	r1, r2, #8
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6912      	ldr	r2, [r2, #16]
 80054ac:	0852      	lsrs	r2, r2, #1
 80054ae:	3a01      	subs	r2, #1
 80054b0:	0552      	lsls	r2, r2, #21
 80054b2:	4311      	orrs	r1, r2
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6852      	ldr	r2, [r2, #4]
 80054b8:	3a01      	subs	r2, #1
 80054ba:	0112      	lsls	r2, r2, #4
 80054bc:	430a      	orrs	r2, r1
 80054be:	4921      	ldr	r1, [pc, #132]	; (8005544 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	614b      	str	r3, [r1, #20]
 80054c4:	e014      	b.n	80054f0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80054c6:	4b1f      	ldr	r3, [pc, #124]	; (8005544 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054c8:	695a      	ldr	r2, [r3, #20]
 80054ca:	4b21      	ldr	r3, [pc, #132]	; (8005550 <RCCEx_PLLSAI2_Config+0x1e4>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6892      	ldr	r2, [r2, #8]
 80054d2:	0211      	lsls	r1, r2, #8
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6952      	ldr	r2, [r2, #20]
 80054d8:	0852      	lsrs	r2, r2, #1
 80054da:	3a01      	subs	r2, #1
 80054dc:	0652      	lsls	r2, r2, #25
 80054de:	4311      	orrs	r1, r2
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6852      	ldr	r2, [r2, #4]
 80054e4:	3a01      	subs	r2, #1
 80054e6:	0112      	lsls	r2, r2, #4
 80054e8:	430a      	orrs	r2, r1
 80054ea:	4916      	ldr	r1, [pc, #88]	; (8005544 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80054f0:	4b14      	ldr	r3, [pc, #80]	; (8005544 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a13      	ldr	r2, [pc, #76]	; (8005544 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054fc:	f7fc f9f8 	bl	80018f0 <HAL_GetTick>
 8005500:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005502:	e009      	b.n	8005518 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005504:	f7fc f9f4 	bl	80018f0 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d902      	bls.n	8005518 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	73fb      	strb	r3, [r7, #15]
          break;
 8005516:	e005      	b.n	8005524 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005518:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <RCCEx_PLLSAI2_Config+0x1d8>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0ef      	beq.n	8005504 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005524:	7bfb      	ldrb	r3, [r7, #15]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d106      	bne.n	8005538 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800552a:	4b06      	ldr	r3, [pc, #24]	; (8005544 <RCCEx_PLLSAI2_Config+0x1d8>)
 800552c:	695a      	ldr	r2, [r3, #20]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	4904      	ldr	r1, [pc, #16]	; (8005544 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005534:	4313      	orrs	r3, r2
 8005536:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005538:	7bfb      	ldrb	r3, [r7, #15]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	40021000 	.word	0x40021000
 8005548:	07ff800f 	.word	0x07ff800f
 800554c:	ff9f800f 	.word	0xff9f800f
 8005550:	f9ff800f 	.word	0xf9ff800f

08005554 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e095      	b.n	8005692 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	2b00      	cmp	r3, #0
 800556c:	d108      	bne.n	8005580 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005576:	d009      	beq.n	800558c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	61da      	str	r2, [r3, #28]
 800557e:	e005      	b.n	800558c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d106      	bne.n	80055ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7fb fe94 	bl	80012d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055cc:	d902      	bls.n	80055d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	e002      	b.n	80055da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80055e2:	d007      	beq.n	80055f4 <HAL_SPI_Init+0xa0>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055ec:	d002      	beq.n	80055f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005604:	431a      	orrs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	431a      	orrs	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005636:	ea42 0103 	orr.w	r1, r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	0c1b      	lsrs	r3, r3, #16
 8005650:	f003 0204 	and.w	r2, r3, #4
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	f003 0310 	and.w	r3, r3, #16
 800565c:	431a      	orrs	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005670:	ea42 0103 	orr.w	r1, r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
	...

0800569c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	4613      	mov	r3, r2
 80056a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d110      	bne.n	80056d8 <HAL_SPI_Receive_IT+0x3c>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056be:	d10b      	bne.n	80056d8 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2204      	movs	r2, #4
 80056c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80056c8:	88fb      	ldrh	r3, [r7, #6]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 f894 	bl	80057fc <HAL_SPI_TransmitReceive_IT>
 80056d4:	4603      	mov	r3, r0
 80056d6:	e089      	b.n	80057ec <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d101      	bne.n	80056e6 <HAL_SPI_Receive_IT+0x4a>
 80056e2:	2302      	movs	r3, #2
 80056e4:	e082      	b.n	80057ec <HAL_SPI_Receive_IT+0x150>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d002      	beq.n	8005700 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80056fa:	2302      	movs	r3, #2
 80056fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056fe:	e070      	b.n	80057e2 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <HAL_SPI_Receive_IT+0x70>
 8005706:	88fb      	ldrh	r3, [r7, #6]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d102      	bne.n	8005712 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005710:	e067      	b.n	80057e2 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2204      	movs	r2, #4
 8005716:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	88fa      	ldrh	r2, [r7, #6]
 800572a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	88fa      	ldrh	r2, [r7, #6]
 8005732:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005756:	d90b      	bls.n	8005770 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005766:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4a22      	ldr	r2, [pc, #136]	; (80057f4 <HAL_SPI_Receive_IT+0x158>)
 800576c:	64da      	str	r2, [r3, #76]	; 0x4c
 800576e:	e00a      	b.n	8005786 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800577e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4a1d      	ldr	r2, [pc, #116]	; (80057f8 <HAL_SPI_Receive_IT+0x15c>)
 8005784:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800578e:	d10f      	bne.n	80057b0 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800579e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057ae:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80057be:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ca:	2b40      	cmp	r3, #64	; 0x40
 80057cc:	d008      	beq.n	80057e0 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	e000      	b.n	80057e2 <HAL_SPI_Receive_IT+0x146>
  }

error :
 80057e0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80057ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3718      	adds	r7, #24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	08005dfd 	.word	0x08005dfd
 80057f8:	08005dad 	.word	0x08005dad

080057fc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005814:	2b01      	cmp	r3, #1
 8005816:	d101      	bne.n	800581c <HAL_SPI_TransmitReceive_IT+0x20>
 8005818:	2302      	movs	r3, #2
 800581a:	e091      	b.n	8005940 <HAL_SPI_TransmitReceive_IT+0x144>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800582a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005832:	7dbb      	ldrb	r3, [r7, #22]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d00d      	beq.n	8005854 <HAL_SPI_TransmitReceive_IT+0x58>
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800583e:	d106      	bne.n	800584e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d102      	bne.n	800584e <HAL_SPI_TransmitReceive_IT+0x52>
 8005848:	7dbb      	ldrb	r3, [r7, #22]
 800584a:	2b04      	cmp	r3, #4
 800584c:	d002      	beq.n	8005854 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800584e:	2302      	movs	r3, #2
 8005850:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005852:	e070      	b.n	8005936 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d005      	beq.n	8005866 <HAL_SPI_TransmitReceive_IT+0x6a>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <HAL_SPI_TransmitReceive_IT+0x6a>
 8005860:	887b      	ldrh	r3, [r7, #2]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d102      	bne.n	800586c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	75fb      	strb	r3, [r7, #23]
    goto error;
 800586a:	e064      	b.n	8005936 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b04      	cmp	r3, #4
 8005876:	d003      	beq.n	8005880 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2205      	movs	r2, #5
 800587c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	887a      	ldrh	r2, [r7, #2]
 8005890:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	887a      	ldrh	r2, [r7, #2]
 8005896:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	887a      	ldrh	r2, [r7, #2]
 80058a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	887a      	ldrh	r2, [r7, #2]
 80058aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058b6:	d906      	bls.n	80058c6 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4a24      	ldr	r2, [pc, #144]	; (800594c <HAL_SPI_TransmitReceive_IT+0x150>)
 80058bc:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4a23      	ldr	r2, [pc, #140]	; (8005950 <HAL_SPI_TransmitReceive_IT+0x154>)
 80058c2:	651a      	str	r2, [r3, #80]	; 0x50
 80058c4:	e005      	b.n	80058d2 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4a22      	ldr	r2, [pc, #136]	; (8005954 <HAL_SPI_TransmitReceive_IT+0x158>)
 80058ca:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4a22      	ldr	r2, [pc, #136]	; (8005958 <HAL_SPI_TransmitReceive_IT+0x15c>)
 80058d0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058da:	d802      	bhi.n	80058e2 <HAL_SPI_TransmitReceive_IT+0xe6>
 80058dc:	887b      	ldrh	r3, [r7, #2]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d908      	bls.n	80058f4 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058f0:	605a      	str	r2, [r3, #4]
 80058f2:	e007      	b.n	8005904 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005902:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8005912:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591e:	2b40      	cmp	r3, #64	; 0x40
 8005920:	d008      	beq.n	8005934 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	e000      	b.n	8005936 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8005934:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800593e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005940:	4618      	mov	r0, r3
 8005942:	371c      	adds	r7, #28
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	08005ce7 	.word	0x08005ce7
 8005950:	08005d4d 	.word	0x08005d4d
 8005954:	08005b97 	.word	0x08005b97
 8005958:	08005c55 	.word	0x08005c55

0800595c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10e      	bne.n	800599c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005984:	2b00      	cmp	r3, #0
 8005986:	d009      	beq.n	800599c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598e:	2b00      	cmp	r3, #0
 8005990:	d004      	beq.n	800599c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	4798      	blx	r3
    return;
 800599a:	e0ce      	b.n	8005b3a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d009      	beq.n	80059ba <HAL_SPI_IRQHandler+0x5e>
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d004      	beq.n	80059ba <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	4798      	blx	r3
    return;
 80059b8:	e0bf      	b.n	8005b3a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	f003 0320 	and.w	r3, r3, #32
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10a      	bne.n	80059da <HAL_SPI_IRQHandler+0x7e>
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d105      	bne.n	80059da <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 80b0 	beq.w	8005b3a <HAL_SPI_IRQHandler+0x1de>
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	f003 0320 	and.w	r3, r3, #32
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 80aa 	beq.w	8005b3a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d023      	beq.n	8005a38 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b03      	cmp	r3, #3
 80059fa:	d011      	beq.n	8005a20 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a00:	f043 0204 	orr.w	r2, r3, #4
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a08:	2300      	movs	r3, #0
 8005a0a:	617b      	str	r3, [r7, #20]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	e00b      	b.n	8005a38 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a20:	2300      	movs	r3, #0
 8005a22:	613b      	str	r3, [r7, #16]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	613b      	str	r3, [r7, #16]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	693b      	ldr	r3, [r7, #16]
        return;
 8005a36:	e080      	b.n	8005b3a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	f003 0320 	and.w	r3, r3, #32
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d014      	beq.n	8005a6c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a46:	f043 0201 	orr.w	r2, r3, #1
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00c      	beq.n	8005a90 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a7a:	f043 0208 	orr.w	r2, r3, #8
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005a82:	2300      	movs	r3, #0
 8005a84:	60bb      	str	r3, [r7, #8]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	60bb      	str	r3, [r7, #8]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d04f      	beq.n	8005b38 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005aa6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d104      	bne.n	8005ac4 <HAL_SPI_IRQHandler+0x168>
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d034      	beq.n	8005b2e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0203 	bic.w	r2, r2, #3
 8005ad2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d011      	beq.n	8005b00 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae0:	4a17      	ldr	r2, [pc, #92]	; (8005b40 <HAL_SPI_IRQHandler+0x1e4>)
 8005ae2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7fd f835 	bl	8002b58 <HAL_DMA_Abort_IT>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d016      	beq.n	8005b36 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0c:	4a0c      	ldr	r2, [pc, #48]	; (8005b40 <HAL_SPI_IRQHandler+0x1e4>)
 8005b0e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fd f81f 	bl	8002b58 <HAL_DMA_Abort_IT>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00a      	beq.n	8005b36 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005b2c:	e003      	b.n	8005b36 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f812 	bl	8005b58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005b34:	e000      	b.n	8005b38 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005b36:	bf00      	nop
    return;
 8005b38:	bf00      	nop
  }
}
 8005b3a:	3720      	adds	r7, #32
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	08005b6d 	.word	0x08005b6d

08005b44 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b78:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f7ff ffe5 	bl	8005b58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b8e:	bf00      	nop
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b082      	sub	sp, #8
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d923      	bls.n	8005bf2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb4:	b292      	uxth	r2, r2
 8005bb6:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	1c9a      	adds	r2, r3, #2
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	3b02      	subs	r3, #2
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d11f      	bne.n	8005c20 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bee:	605a      	str	r2, [r3, #4]
 8005bf0:	e016      	b.n	8005c20 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f103 020c 	add.w	r2, r3, #12
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	7812      	ldrb	r2, [r2, #0]
 8005c00:	b2d2      	uxtb	r2, r2
 8005c02:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	1c5a      	adds	r2, r3, #1
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	3b01      	subs	r3, #1
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10f      	bne.n	8005c4c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c3a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d102      	bne.n	8005c4c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 faba 	bl	80061c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005c4c:	bf00      	nop
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d912      	bls.n	8005c8c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6a:	881a      	ldrh	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c76:	1c9a      	adds	r2, r3, #2
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	3b02      	subs	r3, #2
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c8a:	e012      	b.n	8005cb2 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	330c      	adds	r3, #12
 8005c96:	7812      	ldrb	r2, [r2, #0]
 8005c98:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9e:	1c5a      	adds	r2, r3, #1
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	3b01      	subs	r3, #1
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d110      	bne.n	8005cde <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cca:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d102      	bne.n	8005cde <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fa71 	bl	80061c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005cde:	bf00      	nop
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b082      	sub	sp, #8
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68da      	ldr	r2, [r3, #12]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	b292      	uxth	r2, r2
 8005cfa:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	1c9a      	adds	r2, r3, #2
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10f      	bne.n	8005d44 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d32:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d102      	bne.n	8005d44 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fa3e 	bl	80061c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005d44:	bf00      	nop
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d58:	881a      	ldrh	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d64:	1c9a      	adds	r2, r3, #2
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	3b01      	subs	r3, #1
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d110      	bne.n	8005da4 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d90:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d102      	bne.n	8005da4 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fa0e 	bl	80061c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005da4:	bf00      	nop
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f103 020c 	add.w	r2, r3, #12
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc0:	7812      	ldrb	r2, [r2, #0]
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d102      	bne.n	8005df4 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fa28 	bl	8006244 <SPI_CloseRx_ISR>
  }
}
 8005df4:	bf00      	nop
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	b292      	uxth	r2, r2
 8005e10:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	1c9a      	adds	r2, r3, #2
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	3b01      	subs	r3, #1
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d102      	bne.n	8005e40 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fa02 	bl	8006244 <SPI_CloseRx_ISR>
  }
}
 8005e40:	bf00      	nop
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	603b      	str	r3, [r7, #0]
 8005e54:	4613      	mov	r3, r2
 8005e56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e58:	f7fb fd4a 	bl	80018f0 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e60:	1a9b      	subs	r3, r3, r2
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	4413      	add	r3, r2
 8005e66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e68:	f7fb fd42 	bl	80018f0 <HAL_GetTick>
 8005e6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e6e:	4b39      	ldr	r3, [pc, #228]	; (8005f54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	015b      	lsls	r3, r3, #5
 8005e74:	0d1b      	lsrs	r3, r3, #20
 8005e76:	69fa      	ldr	r2, [r7, #28]
 8005e78:	fb02 f303 	mul.w	r3, r2, r3
 8005e7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e7e:	e054      	b.n	8005f2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e86:	d050      	beq.n	8005f2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e88:	f7fb fd32 	bl	80018f0 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	69fa      	ldr	r2, [r7, #28]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d902      	bls.n	8005e9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d13d      	bne.n	8005f1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005eac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eb6:	d111      	bne.n	8005edc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ec0:	d004      	beq.n	8005ecc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eca:	d107      	bne.n	8005edc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee4:	d10f      	bne.n	8005f06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e017      	b.n	8005f4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	3b01      	subs	r3, #1
 8005f28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	4013      	ands	r3, r2
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	bf0c      	ite	eq
 8005f3a:	2301      	moveq	r3, #1
 8005f3c:	2300      	movne	r3, #0
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	461a      	mov	r2, r3
 8005f42:	79fb      	ldrb	r3, [r7, #7]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d19b      	bne.n	8005e80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3720      	adds	r7, #32
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	2000000c 	.word	0x2000000c

08005f58 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08a      	sub	sp, #40	; 0x28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
 8005f64:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f66:	2300      	movs	r3, #0
 8005f68:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f6a:	f7fb fcc1 	bl	80018f0 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f72:	1a9b      	subs	r3, r3, r2
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	4413      	add	r3, r2
 8005f78:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005f7a:	f7fb fcb9 	bl	80018f0 <HAL_GetTick>
 8005f7e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	330c      	adds	r3, #12
 8005f86:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f88:	4b3d      	ldr	r3, [pc, #244]	; (8006080 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	00da      	lsls	r2, r3, #3
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	0d1b      	lsrs	r3, r3, #20
 8005f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f9a:	fb02 f303 	mul.w	r3, r2, r3
 8005f9e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005fa0:	e060      	b.n	8006064 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005fa8:	d107      	bne.n	8005fba <SPI_WaitFifoStateUntilTimeout+0x62>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d104      	bne.n	8005fba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005fb8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fc0:	d050      	beq.n	8006064 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fc2:	f7fb fc95 	bl	80018f0 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d902      	bls.n	8005fd8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d13d      	bne.n	8006054 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fe6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ff0:	d111      	bne.n	8006016 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ffa:	d004      	beq.n	8006006 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006004:	d107      	bne.n	8006016 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006014:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800601e:	d10f      	bne.n	8006040 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800603e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e010      	b.n	8006076 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800605a:	2300      	movs	r3, #0
 800605c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	3b01      	subs	r3, #1
 8006062:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689a      	ldr	r2, [r3, #8]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	4013      	ands	r3, r2
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	429a      	cmp	r2, r3
 8006072:	d196      	bne.n	8005fa2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3728      	adds	r7, #40	; 0x28
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	2000000c 	.word	0x2000000c

08006084 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af02      	add	r7, sp, #8
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006098:	d111      	bne.n	80060be <SPI_EndRxTransaction+0x3a>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060a2:	d004      	beq.n	80060ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ac:	d107      	bne.n	80060be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060bc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2200      	movs	r2, #0
 80060c6:	2180      	movs	r1, #128	; 0x80
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f7ff febd 	bl	8005e48 <SPI_WaitFlagStateUntilTimeout>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d007      	beq.n	80060e4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d8:	f043 0220 	orr.w	r2, r3, #32
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e023      	b.n	800612c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ec:	d11d      	bne.n	800612a <SPI_EndRxTransaction+0xa6>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060f6:	d004      	beq.n	8006102 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006100:	d113      	bne.n	800612a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2200      	movs	r2, #0
 800610a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f7ff ff22 	bl	8005f58 <SPI_WaitFifoStateUntilTimeout>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d007      	beq.n	800612a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800611e:	f043 0220 	orr.w	r2, r3, #32
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e000      	b.n	800612c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af02      	add	r7, sp, #8
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2200      	movs	r2, #0
 8006148:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f7ff ff03 	bl	8005f58 <SPI_WaitFifoStateUntilTimeout>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d007      	beq.n	8006168 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800615c:	f043 0220 	orr.w	r2, r3, #32
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e027      	b.n	80061b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2200      	movs	r2, #0
 8006170:	2180      	movs	r1, #128	; 0x80
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f7ff fe68 	bl	8005e48 <SPI_WaitFlagStateUntilTimeout>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d007      	beq.n	800618e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006182:	f043 0220 	orr.w	r2, r3, #32
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e014      	b.n	80061b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	2200      	movs	r2, #0
 8006196:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f7ff fedc 	bl	8005f58 <SPI_WaitFifoStateUntilTimeout>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d007      	beq.n	80061b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061aa:	f043 0220 	orr.w	r2, r3, #32
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e000      	b.n	80061b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061c8:	f7fb fb92 	bl	80018f0 <HAL_GetTick>
 80061cc:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 0220 	bic.w	r2, r2, #32
 80061dc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	2164      	movs	r1, #100	; 0x64
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7ff ffa6 	bl	8006134 <SPI_EndRxTxTransaction>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d005      	beq.n	80061fa <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f2:	f043 0220 	orr.w	r2, r3, #32
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d115      	bne.n	800622e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b04      	cmp	r3, #4
 800620c:	d107      	bne.n	800621e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7fa f868 	bl	80002ec <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800621c:	e00e      	b.n	800623c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7ff fc8c 	bl	8005b44 <HAL_SPI_TxRxCpltCallback>
}
 800622c:	e006      	b.n	800623c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7ff fc8e 	bl	8005b58 <HAL_SPI_ErrorCallback>
}
 800623c:	bf00      	nop
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800625a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800625c:	f7fb fb48 	bl	80018f0 <HAL_GetTick>
 8006260:	4603      	mov	r3, r0
 8006262:	461a      	mov	r2, r3
 8006264:	2164      	movs	r1, #100	; 0x64
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7ff ff0c 	bl	8006084 <SPI_EndRxTransaction>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d005      	beq.n	800627e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006276:	f043 0220 	orr.w	r2, r3, #32
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800628a:	2b00      	cmp	r3, #0
 800628c:	d103      	bne.n	8006296 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7fa f82c 	bl	80002ec <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006294:	e002      	b.n	800629c <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7ff fc5e 	bl	8005b58 <HAL_SPI_ErrorCallback>
}
 800629c:	bf00      	nop
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e049      	b.n	800634a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d106      	bne.n	80062d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7fb f880 	bl	80013d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	3304      	adds	r3, #4
 80062e0:	4619      	mov	r1, r3
 80062e2:	4610      	mov	r0, r2
 80062e4:	f000 fbe4 	bl	8006ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
	...

08006354 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b01      	cmp	r3, #1
 8006366:	d001      	beq.n	800636c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e047      	b.n	80063fc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a23      	ldr	r2, [pc, #140]	; (8006408 <HAL_TIM_Base_Start+0xb4>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d01d      	beq.n	80063ba <HAL_TIM_Base_Start+0x66>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006386:	d018      	beq.n	80063ba <HAL_TIM_Base_Start+0x66>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a1f      	ldr	r2, [pc, #124]	; (800640c <HAL_TIM_Base_Start+0xb8>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d013      	beq.n	80063ba <HAL_TIM_Base_Start+0x66>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a1e      	ldr	r2, [pc, #120]	; (8006410 <HAL_TIM_Base_Start+0xbc>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d00e      	beq.n	80063ba <HAL_TIM_Base_Start+0x66>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a1c      	ldr	r2, [pc, #112]	; (8006414 <HAL_TIM_Base_Start+0xc0>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d009      	beq.n	80063ba <HAL_TIM_Base_Start+0x66>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a1b      	ldr	r2, [pc, #108]	; (8006418 <HAL_TIM_Base_Start+0xc4>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d004      	beq.n	80063ba <HAL_TIM_Base_Start+0x66>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a19      	ldr	r2, [pc, #100]	; (800641c <HAL_TIM_Base_Start+0xc8>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d115      	bne.n	80063e6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	4b17      	ldr	r3, [pc, #92]	; (8006420 <HAL_TIM_Base_Start+0xcc>)
 80063c2:	4013      	ands	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2b06      	cmp	r3, #6
 80063ca:	d015      	beq.n	80063f8 <HAL_TIM_Base_Start+0xa4>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063d2:	d011      	beq.n	80063f8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f042 0201 	orr.w	r2, r2, #1
 80063e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063e4:	e008      	b.n	80063f8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f042 0201 	orr.w	r2, r2, #1
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	e000      	b.n	80063fa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	40012c00 	.word	0x40012c00
 800640c:	40000400 	.word	0x40000400
 8006410:	40000800 	.word	0x40000800
 8006414:	40000c00 	.word	0x40000c00
 8006418:	40013400 	.word	0x40013400
 800641c:	40014000 	.word	0x40014000
 8006420:	00010007 	.word	0x00010007

08006424 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e049      	b.n	80064ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d106      	bne.n	8006450 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f841 	bl	80064d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2202      	movs	r2, #2
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3304      	adds	r3, #4
 8006460:	4619      	mov	r1, r3
 8006462:	4610      	mov	r0, r2
 8006464:	f000 fb24 	bl	8006ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b083      	sub	sp, #12
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80064da:	bf00      	nop
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
	...

080064e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d109      	bne.n	800650c <HAL_TIM_PWM_Start+0x24>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b01      	cmp	r3, #1
 8006502:	bf14      	ite	ne
 8006504:	2301      	movne	r3, #1
 8006506:	2300      	moveq	r3, #0
 8006508:	b2db      	uxtb	r3, r3
 800650a:	e03c      	b.n	8006586 <HAL_TIM_PWM_Start+0x9e>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	2b04      	cmp	r3, #4
 8006510:	d109      	bne.n	8006526 <HAL_TIM_PWM_Start+0x3e>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b01      	cmp	r3, #1
 800651c:	bf14      	ite	ne
 800651e:	2301      	movne	r3, #1
 8006520:	2300      	moveq	r3, #0
 8006522:	b2db      	uxtb	r3, r3
 8006524:	e02f      	b.n	8006586 <HAL_TIM_PWM_Start+0x9e>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b08      	cmp	r3, #8
 800652a:	d109      	bne.n	8006540 <HAL_TIM_PWM_Start+0x58>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b01      	cmp	r3, #1
 8006536:	bf14      	ite	ne
 8006538:	2301      	movne	r3, #1
 800653a:	2300      	moveq	r3, #0
 800653c:	b2db      	uxtb	r3, r3
 800653e:	e022      	b.n	8006586 <HAL_TIM_PWM_Start+0x9e>
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2b0c      	cmp	r3, #12
 8006544:	d109      	bne.n	800655a <HAL_TIM_PWM_Start+0x72>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b01      	cmp	r3, #1
 8006550:	bf14      	ite	ne
 8006552:	2301      	movne	r3, #1
 8006554:	2300      	moveq	r3, #0
 8006556:	b2db      	uxtb	r3, r3
 8006558:	e015      	b.n	8006586 <HAL_TIM_PWM_Start+0x9e>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b10      	cmp	r3, #16
 800655e:	d109      	bne.n	8006574 <HAL_TIM_PWM_Start+0x8c>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b01      	cmp	r3, #1
 800656a:	bf14      	ite	ne
 800656c:	2301      	movne	r3, #1
 800656e:	2300      	moveq	r3, #0
 8006570:	b2db      	uxtb	r3, r3
 8006572:	e008      	b.n	8006586 <HAL_TIM_PWM_Start+0x9e>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b01      	cmp	r3, #1
 800657e:	bf14      	ite	ne
 8006580:	2301      	movne	r3, #1
 8006582:	2300      	moveq	r3, #0
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e09c      	b.n	80066c8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d104      	bne.n	800659e <HAL_TIM_PWM_Start+0xb6>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800659c:	e023      	b.n	80065e6 <HAL_TIM_PWM_Start+0xfe>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b04      	cmp	r3, #4
 80065a2:	d104      	bne.n	80065ae <HAL_TIM_PWM_Start+0xc6>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2202      	movs	r2, #2
 80065a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065ac:	e01b      	b.n	80065e6 <HAL_TIM_PWM_Start+0xfe>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d104      	bne.n	80065be <HAL_TIM_PWM_Start+0xd6>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065bc:	e013      	b.n	80065e6 <HAL_TIM_PWM_Start+0xfe>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b0c      	cmp	r3, #12
 80065c2:	d104      	bne.n	80065ce <HAL_TIM_PWM_Start+0xe6>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065cc:	e00b      	b.n	80065e6 <HAL_TIM_PWM_Start+0xfe>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b10      	cmp	r3, #16
 80065d2:	d104      	bne.n	80065de <HAL_TIM_PWM_Start+0xf6>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065dc:	e003      	b.n	80065e6 <HAL_TIM_PWM_Start+0xfe>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2202      	movs	r2, #2
 80065e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2201      	movs	r2, #1
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 fe68 	bl	80072c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a35      	ldr	r2, [pc, #212]	; (80066d0 <HAL_TIM_PWM_Start+0x1e8>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d013      	beq.n	8006626 <HAL_TIM_PWM_Start+0x13e>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a34      	ldr	r2, [pc, #208]	; (80066d4 <HAL_TIM_PWM_Start+0x1ec>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d00e      	beq.n	8006626 <HAL_TIM_PWM_Start+0x13e>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a32      	ldr	r2, [pc, #200]	; (80066d8 <HAL_TIM_PWM_Start+0x1f0>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d009      	beq.n	8006626 <HAL_TIM_PWM_Start+0x13e>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a31      	ldr	r2, [pc, #196]	; (80066dc <HAL_TIM_PWM_Start+0x1f4>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d004      	beq.n	8006626 <HAL_TIM_PWM_Start+0x13e>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a2f      	ldr	r2, [pc, #188]	; (80066e0 <HAL_TIM_PWM_Start+0x1f8>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d101      	bne.n	800662a <HAL_TIM_PWM_Start+0x142>
 8006626:	2301      	movs	r3, #1
 8006628:	e000      	b.n	800662c <HAL_TIM_PWM_Start+0x144>
 800662a:	2300      	movs	r3, #0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d007      	beq.n	8006640 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800663e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a22      	ldr	r2, [pc, #136]	; (80066d0 <HAL_TIM_PWM_Start+0x1e8>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d01d      	beq.n	8006686 <HAL_TIM_PWM_Start+0x19e>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006652:	d018      	beq.n	8006686 <HAL_TIM_PWM_Start+0x19e>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a22      	ldr	r2, [pc, #136]	; (80066e4 <HAL_TIM_PWM_Start+0x1fc>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d013      	beq.n	8006686 <HAL_TIM_PWM_Start+0x19e>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a21      	ldr	r2, [pc, #132]	; (80066e8 <HAL_TIM_PWM_Start+0x200>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d00e      	beq.n	8006686 <HAL_TIM_PWM_Start+0x19e>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a1f      	ldr	r2, [pc, #124]	; (80066ec <HAL_TIM_PWM_Start+0x204>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d009      	beq.n	8006686 <HAL_TIM_PWM_Start+0x19e>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a17      	ldr	r2, [pc, #92]	; (80066d4 <HAL_TIM_PWM_Start+0x1ec>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d004      	beq.n	8006686 <HAL_TIM_PWM_Start+0x19e>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a15      	ldr	r2, [pc, #84]	; (80066d8 <HAL_TIM_PWM_Start+0x1f0>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d115      	bne.n	80066b2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	4b18      	ldr	r3, [pc, #96]	; (80066f0 <HAL_TIM_PWM_Start+0x208>)
 800668e:	4013      	ands	r3, r2
 8006690:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2b06      	cmp	r3, #6
 8006696:	d015      	beq.n	80066c4 <HAL_TIM_PWM_Start+0x1dc>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800669e:	d011      	beq.n	80066c4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f042 0201 	orr.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b0:	e008      	b.n	80066c4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f042 0201 	orr.w	r2, r2, #1
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	e000      	b.n	80066c6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40012c00 	.word	0x40012c00
 80066d4:	40013400 	.word	0x40013400
 80066d8:	40014000 	.word	0x40014000
 80066dc:	40014400 	.word	0x40014400
 80066e0:	40014800 	.word	0x40014800
 80066e4:	40000400 	.word	0x40000400
 80066e8:	40000800 	.word	0x40000800
 80066ec:	40000c00 	.word	0x40000c00
 80066f0:	00010007 	.word	0x00010007

080066f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006700:	2300      	movs	r3, #0
 8006702:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800670a:	2b01      	cmp	r3, #1
 800670c:	d101      	bne.n	8006712 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800670e:	2302      	movs	r3, #2
 8006710:	e0ff      	b.n	8006912 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b14      	cmp	r3, #20
 800671e:	f200 80f0 	bhi.w	8006902 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006722:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	0800677d 	.word	0x0800677d
 800672c:	08006903 	.word	0x08006903
 8006730:	08006903 	.word	0x08006903
 8006734:	08006903 	.word	0x08006903
 8006738:	080067bd 	.word	0x080067bd
 800673c:	08006903 	.word	0x08006903
 8006740:	08006903 	.word	0x08006903
 8006744:	08006903 	.word	0x08006903
 8006748:	080067ff 	.word	0x080067ff
 800674c:	08006903 	.word	0x08006903
 8006750:	08006903 	.word	0x08006903
 8006754:	08006903 	.word	0x08006903
 8006758:	0800683f 	.word	0x0800683f
 800675c:	08006903 	.word	0x08006903
 8006760:	08006903 	.word	0x08006903
 8006764:	08006903 	.word	0x08006903
 8006768:	08006881 	.word	0x08006881
 800676c:	08006903 	.word	0x08006903
 8006770:	08006903 	.word	0x08006903
 8006774:	08006903 	.word	0x08006903
 8006778:	080068c1 	.word	0x080068c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68b9      	ldr	r1, [r7, #8]
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fa2e 	bl	8006be4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699a      	ldr	r2, [r3, #24]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0208 	orr.w	r2, r2, #8
 8006796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	699a      	ldr	r2, [r3, #24]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0204 	bic.w	r2, r2, #4
 80067a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6999      	ldr	r1, [r3, #24]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	691a      	ldr	r2, [r3, #16]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	619a      	str	r2, [r3, #24]
      break;
 80067ba:	e0a5      	b.n	8006908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68b9      	ldr	r1, [r7, #8]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 fa9e 	bl	8006d04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699a      	ldr	r2, [r3, #24]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	699a      	ldr	r2, [r3, #24]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6999      	ldr	r1, [r3, #24]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	021a      	lsls	r2, r3, #8
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	619a      	str	r2, [r3, #24]
      break;
 80067fc:	e084      	b.n	8006908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68b9      	ldr	r1, [r7, #8]
 8006804:	4618      	mov	r0, r3
 8006806:	f000 fb07 	bl	8006e18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69da      	ldr	r2, [r3, #28]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f042 0208 	orr.w	r2, r2, #8
 8006818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	69da      	ldr	r2, [r3, #28]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0204 	bic.w	r2, r2, #4
 8006828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69d9      	ldr	r1, [r3, #28]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	691a      	ldr	r2, [r3, #16]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	430a      	orrs	r2, r1
 800683a:	61da      	str	r2, [r3, #28]
      break;
 800683c:	e064      	b.n	8006908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68b9      	ldr	r1, [r7, #8]
 8006844:	4618      	mov	r0, r3
 8006846:	f000 fb6f 	bl	8006f28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69da      	ldr	r2, [r3, #28]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69da      	ldr	r2, [r3, #28]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	69d9      	ldr	r1, [r3, #28]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	021a      	lsls	r2, r3, #8
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	61da      	str	r2, [r3, #28]
      break;
 800687e:	e043      	b.n	8006908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68b9      	ldr	r1, [r7, #8]
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fbb8 	bl	8006ffc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f042 0208 	orr.w	r2, r2, #8
 800689a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0204 	bic.w	r2, r2, #4
 80068aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	691a      	ldr	r2, [r3, #16]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068be:	e023      	b.n	8006908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68b9      	ldr	r1, [r7, #8]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fbfc 	bl	80070c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	021a      	lsls	r2, r3, #8
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006900:	e002      	b.n	8006908 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	75fb      	strb	r3, [r7, #23]
      break;
 8006906:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006910:	7dfb      	ldrb	r3, [r7, #23]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop

0800691c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006930:	2b01      	cmp	r3, #1
 8006932:	d101      	bne.n	8006938 <HAL_TIM_ConfigClockSource+0x1c>
 8006934:	2302      	movs	r3, #2
 8006936:	e0b6      	b.n	8006aa6 <HAL_TIM_ConfigClockSource+0x18a>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006956:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800695a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006962:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006974:	d03e      	beq.n	80069f4 <HAL_TIM_ConfigClockSource+0xd8>
 8006976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800697a:	f200 8087 	bhi.w	8006a8c <HAL_TIM_ConfigClockSource+0x170>
 800697e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006982:	f000 8086 	beq.w	8006a92 <HAL_TIM_ConfigClockSource+0x176>
 8006986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800698a:	d87f      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x170>
 800698c:	2b70      	cmp	r3, #112	; 0x70
 800698e:	d01a      	beq.n	80069c6 <HAL_TIM_ConfigClockSource+0xaa>
 8006990:	2b70      	cmp	r3, #112	; 0x70
 8006992:	d87b      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x170>
 8006994:	2b60      	cmp	r3, #96	; 0x60
 8006996:	d050      	beq.n	8006a3a <HAL_TIM_ConfigClockSource+0x11e>
 8006998:	2b60      	cmp	r3, #96	; 0x60
 800699a:	d877      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x170>
 800699c:	2b50      	cmp	r3, #80	; 0x50
 800699e:	d03c      	beq.n	8006a1a <HAL_TIM_ConfigClockSource+0xfe>
 80069a0:	2b50      	cmp	r3, #80	; 0x50
 80069a2:	d873      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x170>
 80069a4:	2b40      	cmp	r3, #64	; 0x40
 80069a6:	d058      	beq.n	8006a5a <HAL_TIM_ConfigClockSource+0x13e>
 80069a8:	2b40      	cmp	r3, #64	; 0x40
 80069aa:	d86f      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x170>
 80069ac:	2b30      	cmp	r3, #48	; 0x30
 80069ae:	d064      	beq.n	8006a7a <HAL_TIM_ConfigClockSource+0x15e>
 80069b0:	2b30      	cmp	r3, #48	; 0x30
 80069b2:	d86b      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x170>
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	d060      	beq.n	8006a7a <HAL_TIM_ConfigClockSource+0x15e>
 80069b8:	2b20      	cmp	r3, #32
 80069ba:	d867      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x170>
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d05c      	beq.n	8006a7a <HAL_TIM_ConfigClockSource+0x15e>
 80069c0:	2b10      	cmp	r3, #16
 80069c2:	d05a      	beq.n	8006a7a <HAL_TIM_ConfigClockSource+0x15e>
 80069c4:	e062      	b.n	8006a8c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069d6:	f000 fc55 	bl	8007284 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	609a      	str	r2, [r3, #8]
      break;
 80069f2:	e04f      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a04:	f000 fc3e 	bl	8007284 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689a      	ldr	r2, [r3, #8]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a16:	609a      	str	r2, [r3, #8]
      break;
 8006a18:	e03c      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a26:	461a      	mov	r2, r3
 8006a28:	f000 fbb2 	bl	8007190 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2150      	movs	r1, #80	; 0x50
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fc0b 	bl	800724e <TIM_ITRx_SetConfig>
      break;
 8006a38:	e02c      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a46:	461a      	mov	r2, r3
 8006a48:	f000 fbd1 	bl	80071ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2160      	movs	r1, #96	; 0x60
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fbfb 	bl	800724e <TIM_ITRx_SetConfig>
      break;
 8006a58:	e01c      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a66:	461a      	mov	r2, r3
 8006a68:	f000 fb92 	bl	8007190 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2140      	movs	r1, #64	; 0x40
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fbeb 	bl	800724e <TIM_ITRx_SetConfig>
      break;
 8006a78:	e00c      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4619      	mov	r1, r3
 8006a84:	4610      	mov	r0, r2
 8006a86:	f000 fbe2 	bl	800724e <TIM_ITRx_SetConfig>
      break;
 8006a8a:	e003      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a90:	e000      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006a92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a40      	ldr	r2, [pc, #256]	; (8006bc4 <TIM_Base_SetConfig+0x114>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d013      	beq.n	8006af0 <TIM_Base_SetConfig+0x40>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ace:	d00f      	beq.n	8006af0 <TIM_Base_SetConfig+0x40>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a3d      	ldr	r2, [pc, #244]	; (8006bc8 <TIM_Base_SetConfig+0x118>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d00b      	beq.n	8006af0 <TIM_Base_SetConfig+0x40>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a3c      	ldr	r2, [pc, #240]	; (8006bcc <TIM_Base_SetConfig+0x11c>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d007      	beq.n	8006af0 <TIM_Base_SetConfig+0x40>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a3b      	ldr	r2, [pc, #236]	; (8006bd0 <TIM_Base_SetConfig+0x120>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d003      	beq.n	8006af0 <TIM_Base_SetConfig+0x40>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a3a      	ldr	r2, [pc, #232]	; (8006bd4 <TIM_Base_SetConfig+0x124>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d108      	bne.n	8006b02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a2f      	ldr	r2, [pc, #188]	; (8006bc4 <TIM_Base_SetConfig+0x114>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d01f      	beq.n	8006b4a <TIM_Base_SetConfig+0x9a>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b10:	d01b      	beq.n	8006b4a <TIM_Base_SetConfig+0x9a>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a2c      	ldr	r2, [pc, #176]	; (8006bc8 <TIM_Base_SetConfig+0x118>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d017      	beq.n	8006b4a <TIM_Base_SetConfig+0x9a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a2b      	ldr	r2, [pc, #172]	; (8006bcc <TIM_Base_SetConfig+0x11c>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d013      	beq.n	8006b4a <TIM_Base_SetConfig+0x9a>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a2a      	ldr	r2, [pc, #168]	; (8006bd0 <TIM_Base_SetConfig+0x120>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00f      	beq.n	8006b4a <TIM_Base_SetConfig+0x9a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a29      	ldr	r2, [pc, #164]	; (8006bd4 <TIM_Base_SetConfig+0x124>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d00b      	beq.n	8006b4a <TIM_Base_SetConfig+0x9a>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a28      	ldr	r2, [pc, #160]	; (8006bd8 <TIM_Base_SetConfig+0x128>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d007      	beq.n	8006b4a <TIM_Base_SetConfig+0x9a>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a27      	ldr	r2, [pc, #156]	; (8006bdc <TIM_Base_SetConfig+0x12c>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d003      	beq.n	8006b4a <TIM_Base_SetConfig+0x9a>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a26      	ldr	r2, [pc, #152]	; (8006be0 <TIM_Base_SetConfig+0x130>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d108      	bne.n	8006b5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	689a      	ldr	r2, [r3, #8]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a10      	ldr	r2, [pc, #64]	; (8006bc4 <TIM_Base_SetConfig+0x114>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d00f      	beq.n	8006ba8 <TIM_Base_SetConfig+0xf8>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a12      	ldr	r2, [pc, #72]	; (8006bd4 <TIM_Base_SetConfig+0x124>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d00b      	beq.n	8006ba8 <TIM_Base_SetConfig+0xf8>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a11      	ldr	r2, [pc, #68]	; (8006bd8 <TIM_Base_SetConfig+0x128>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d007      	beq.n	8006ba8 <TIM_Base_SetConfig+0xf8>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a10      	ldr	r2, [pc, #64]	; (8006bdc <TIM_Base_SetConfig+0x12c>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d003      	beq.n	8006ba8 <TIM_Base_SetConfig+0xf8>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a0f      	ldr	r2, [pc, #60]	; (8006be0 <TIM_Base_SetConfig+0x130>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d103      	bne.n	8006bb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	691a      	ldr	r2, [r3, #16]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	615a      	str	r2, [r3, #20]
}
 8006bb6:	bf00      	nop
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	40012c00 	.word	0x40012c00
 8006bc8:	40000400 	.word	0x40000400
 8006bcc:	40000800 	.word	0x40000800
 8006bd0:	40000c00 	.word	0x40000c00
 8006bd4:	40013400 	.word	0x40013400
 8006bd8:	40014000 	.word	0x40014000
 8006bdc:	40014400 	.word	0x40014400
 8006be0:	40014800 	.word	0x40014800

08006be4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	f023 0201 	bic.w	r2, r3, #1
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f023 0303 	bic.w	r3, r3, #3
 8006c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	f023 0302 	bic.w	r3, r3, #2
 8006c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a2c      	ldr	r2, [pc, #176]	; (8006cf0 <TIM_OC1_SetConfig+0x10c>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d00f      	beq.n	8006c64 <TIM_OC1_SetConfig+0x80>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a2b      	ldr	r2, [pc, #172]	; (8006cf4 <TIM_OC1_SetConfig+0x110>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d00b      	beq.n	8006c64 <TIM_OC1_SetConfig+0x80>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a2a      	ldr	r2, [pc, #168]	; (8006cf8 <TIM_OC1_SetConfig+0x114>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d007      	beq.n	8006c64 <TIM_OC1_SetConfig+0x80>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a29      	ldr	r2, [pc, #164]	; (8006cfc <TIM_OC1_SetConfig+0x118>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d003      	beq.n	8006c64 <TIM_OC1_SetConfig+0x80>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a28      	ldr	r2, [pc, #160]	; (8006d00 <TIM_OC1_SetConfig+0x11c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d10c      	bne.n	8006c7e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f023 0308 	bic.w	r3, r3, #8
 8006c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	f023 0304 	bic.w	r3, r3, #4
 8006c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a1b      	ldr	r2, [pc, #108]	; (8006cf0 <TIM_OC1_SetConfig+0x10c>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d00f      	beq.n	8006ca6 <TIM_OC1_SetConfig+0xc2>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a1a      	ldr	r2, [pc, #104]	; (8006cf4 <TIM_OC1_SetConfig+0x110>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d00b      	beq.n	8006ca6 <TIM_OC1_SetConfig+0xc2>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a19      	ldr	r2, [pc, #100]	; (8006cf8 <TIM_OC1_SetConfig+0x114>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d007      	beq.n	8006ca6 <TIM_OC1_SetConfig+0xc2>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a18      	ldr	r2, [pc, #96]	; (8006cfc <TIM_OC1_SetConfig+0x118>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d003      	beq.n	8006ca6 <TIM_OC1_SetConfig+0xc2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a17      	ldr	r2, [pc, #92]	; (8006d00 <TIM_OC1_SetConfig+0x11c>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d111      	bne.n	8006cca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	621a      	str	r2, [r3, #32]
}
 8006ce4:	bf00      	nop
 8006ce6:	371c      	adds	r7, #28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	40012c00 	.word	0x40012c00
 8006cf4:	40013400 	.word	0x40013400
 8006cf8:	40014000 	.word	0x40014000
 8006cfc:	40014400 	.word	0x40014400
 8006d00:	40014800 	.word	0x40014800

08006d04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	f023 0210 	bic.w	r2, r3, #16
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	021b      	lsls	r3, r3, #8
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f023 0320 	bic.w	r3, r3, #32
 8006d52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	011b      	lsls	r3, r3, #4
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a28      	ldr	r2, [pc, #160]	; (8006e04 <TIM_OC2_SetConfig+0x100>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d003      	beq.n	8006d70 <TIM_OC2_SetConfig+0x6c>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a27      	ldr	r2, [pc, #156]	; (8006e08 <TIM_OC2_SetConfig+0x104>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d10d      	bne.n	8006d8c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	011b      	lsls	r3, r3, #4
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a1d      	ldr	r2, [pc, #116]	; (8006e04 <TIM_OC2_SetConfig+0x100>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d00f      	beq.n	8006db4 <TIM_OC2_SetConfig+0xb0>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a1c      	ldr	r2, [pc, #112]	; (8006e08 <TIM_OC2_SetConfig+0x104>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d00b      	beq.n	8006db4 <TIM_OC2_SetConfig+0xb0>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a1b      	ldr	r2, [pc, #108]	; (8006e0c <TIM_OC2_SetConfig+0x108>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d007      	beq.n	8006db4 <TIM_OC2_SetConfig+0xb0>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a1a      	ldr	r2, [pc, #104]	; (8006e10 <TIM_OC2_SetConfig+0x10c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d003      	beq.n	8006db4 <TIM_OC2_SetConfig+0xb0>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a19      	ldr	r2, [pc, #100]	; (8006e14 <TIM_OC2_SetConfig+0x110>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d113      	bne.n	8006ddc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	621a      	str	r2, [r3, #32]
}
 8006df6:	bf00      	nop
 8006df8:	371c      	adds	r7, #28
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	40012c00 	.word	0x40012c00
 8006e08:	40013400 	.word	0x40013400
 8006e0c:	40014000 	.word	0x40014000
 8006e10:	40014400 	.word	0x40014400
 8006e14:	40014800 	.word	0x40014800

08006e18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f023 0303 	bic.w	r3, r3, #3
 8006e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	021b      	lsls	r3, r3, #8
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a27      	ldr	r2, [pc, #156]	; (8006f14 <TIM_OC3_SetConfig+0xfc>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d003      	beq.n	8006e82 <TIM_OC3_SetConfig+0x6a>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a26      	ldr	r2, [pc, #152]	; (8006f18 <TIM_OC3_SetConfig+0x100>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d10d      	bne.n	8006e9e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	021b      	lsls	r3, r3, #8
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a1c      	ldr	r2, [pc, #112]	; (8006f14 <TIM_OC3_SetConfig+0xfc>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d00f      	beq.n	8006ec6 <TIM_OC3_SetConfig+0xae>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a1b      	ldr	r2, [pc, #108]	; (8006f18 <TIM_OC3_SetConfig+0x100>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d00b      	beq.n	8006ec6 <TIM_OC3_SetConfig+0xae>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a1a      	ldr	r2, [pc, #104]	; (8006f1c <TIM_OC3_SetConfig+0x104>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d007      	beq.n	8006ec6 <TIM_OC3_SetConfig+0xae>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a19      	ldr	r2, [pc, #100]	; (8006f20 <TIM_OC3_SetConfig+0x108>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d003      	beq.n	8006ec6 <TIM_OC3_SetConfig+0xae>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a18      	ldr	r2, [pc, #96]	; (8006f24 <TIM_OC3_SetConfig+0x10c>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d113      	bne.n	8006eee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	011b      	lsls	r3, r3, #4
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	011b      	lsls	r3, r3, #4
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	621a      	str	r2, [r3, #32]
}
 8006f08:	bf00      	nop
 8006f0a:	371c      	adds	r7, #28
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	40012c00 	.word	0x40012c00
 8006f18:	40013400 	.word	0x40013400
 8006f1c:	40014000 	.word	0x40014000
 8006f20:	40014400 	.word	0x40014400
 8006f24:	40014800 	.word	0x40014800

08006f28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b087      	sub	sp, #28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	021b      	lsls	r3, r3, #8
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	031b      	lsls	r3, r3, #12
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a18      	ldr	r2, [pc, #96]	; (8006fe8 <TIM_OC4_SetConfig+0xc0>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d00f      	beq.n	8006fac <TIM_OC4_SetConfig+0x84>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a17      	ldr	r2, [pc, #92]	; (8006fec <TIM_OC4_SetConfig+0xc4>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d00b      	beq.n	8006fac <TIM_OC4_SetConfig+0x84>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a16      	ldr	r2, [pc, #88]	; (8006ff0 <TIM_OC4_SetConfig+0xc8>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d007      	beq.n	8006fac <TIM_OC4_SetConfig+0x84>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a15      	ldr	r2, [pc, #84]	; (8006ff4 <TIM_OC4_SetConfig+0xcc>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d003      	beq.n	8006fac <TIM_OC4_SetConfig+0x84>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a14      	ldr	r2, [pc, #80]	; (8006ff8 <TIM_OC4_SetConfig+0xd0>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d109      	bne.n	8006fc0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	695b      	ldr	r3, [r3, #20]
 8006fb8:	019b      	lsls	r3, r3, #6
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	621a      	str	r2, [r3, #32]
}
 8006fda:	bf00      	nop
 8006fdc:	371c      	adds	r7, #28
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	40012c00 	.word	0x40012c00
 8006fec:	40013400 	.word	0x40013400
 8006ff0:	40014000 	.word	0x40014000
 8006ff4:	40014400 	.word	0x40014400
 8006ff8:	40014800 	.word	0x40014800

08006ffc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b087      	sub	sp, #28
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800702a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800702e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	4313      	orrs	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007040:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	041b      	lsls	r3, r3, #16
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	4313      	orrs	r3, r2
 800704c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a17      	ldr	r2, [pc, #92]	; (80070b0 <TIM_OC5_SetConfig+0xb4>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d00f      	beq.n	8007076 <TIM_OC5_SetConfig+0x7a>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a16      	ldr	r2, [pc, #88]	; (80070b4 <TIM_OC5_SetConfig+0xb8>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d00b      	beq.n	8007076 <TIM_OC5_SetConfig+0x7a>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a15      	ldr	r2, [pc, #84]	; (80070b8 <TIM_OC5_SetConfig+0xbc>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d007      	beq.n	8007076 <TIM_OC5_SetConfig+0x7a>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a14      	ldr	r2, [pc, #80]	; (80070bc <TIM_OC5_SetConfig+0xc0>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d003      	beq.n	8007076 <TIM_OC5_SetConfig+0x7a>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a13      	ldr	r2, [pc, #76]	; (80070c0 <TIM_OC5_SetConfig+0xc4>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d109      	bne.n	800708a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800707c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	021b      	lsls	r3, r3, #8
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	4313      	orrs	r3, r2
 8007088:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	621a      	str	r2, [r3, #32]
}
 80070a4:	bf00      	nop
 80070a6:	371c      	adds	r7, #28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	40012c00 	.word	0x40012c00
 80070b4:	40013400 	.word	0x40013400
 80070b8:	40014000 	.word	0x40014000
 80070bc:	40014400 	.word	0x40014400
 80070c0:	40014800 	.word	0x40014800

080070c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	021b      	lsls	r3, r3, #8
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	4313      	orrs	r3, r2
 8007102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800710a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	051b      	lsls	r3, r3, #20
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	4313      	orrs	r3, r2
 8007116:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a18      	ldr	r2, [pc, #96]	; (800717c <TIM_OC6_SetConfig+0xb8>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d00f      	beq.n	8007140 <TIM_OC6_SetConfig+0x7c>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a17      	ldr	r2, [pc, #92]	; (8007180 <TIM_OC6_SetConfig+0xbc>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d00b      	beq.n	8007140 <TIM_OC6_SetConfig+0x7c>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a16      	ldr	r2, [pc, #88]	; (8007184 <TIM_OC6_SetConfig+0xc0>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d007      	beq.n	8007140 <TIM_OC6_SetConfig+0x7c>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a15      	ldr	r2, [pc, #84]	; (8007188 <TIM_OC6_SetConfig+0xc4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d003      	beq.n	8007140 <TIM_OC6_SetConfig+0x7c>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a14      	ldr	r2, [pc, #80]	; (800718c <TIM_OC6_SetConfig+0xc8>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d109      	bne.n	8007154 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007146:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	029b      	lsls	r3, r3, #10
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	4313      	orrs	r3, r2
 8007152:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	621a      	str	r2, [r3, #32]
}
 800716e:	bf00      	nop
 8007170:	371c      	adds	r7, #28
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	40012c00 	.word	0x40012c00
 8007180:	40013400 	.word	0x40013400
 8007184:	40014000 	.word	0x40014000
 8007188:	40014400 	.word	0x40014400
 800718c:	40014800 	.word	0x40014800

08007190 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007190:	b480      	push	{r7}
 8007192:	b087      	sub	sp, #28
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	f023 0201 	bic.w	r2, r3, #1
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	011b      	lsls	r3, r3, #4
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f023 030a 	bic.w	r3, r3, #10
 80071cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	621a      	str	r2, [r3, #32]
}
 80071e2:	bf00      	nop
 80071e4:	371c      	adds	r7, #28
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b087      	sub	sp, #28
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	60f8      	str	r0, [r7, #12]
 80071f6:	60b9      	str	r1, [r7, #8]
 80071f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	f023 0210 	bic.w	r2, r3, #16
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007218:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	031b      	lsls	r3, r3, #12
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	4313      	orrs	r3, r2
 8007222:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800722a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	011b      	lsls	r3, r3, #4
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	4313      	orrs	r3, r2
 8007234:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	621a      	str	r2, [r3, #32]
}
 8007242:	bf00      	nop
 8007244:	371c      	adds	r7, #28
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800724e:	b480      	push	{r7}
 8007250:	b085      	sub	sp, #20
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007264:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	4313      	orrs	r3, r2
 800726c:	f043 0307 	orr.w	r3, r3, #7
 8007270:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	609a      	str	r2, [r3, #8]
}
 8007278:	bf00      	nop
 800727a:	3714      	adds	r7, #20
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
 8007290:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800729e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	021a      	lsls	r2, r3, #8
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	431a      	orrs	r2, r3
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	609a      	str	r2, [r3, #8]
}
 80072b8:	bf00      	nop
 80072ba:	371c      	adds	r7, #28
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f003 031f 	and.w	r3, r3, #31
 80072d6:	2201      	movs	r2, #1
 80072d8:	fa02 f303 	lsl.w	r3, r2, r3
 80072dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6a1a      	ldr	r2, [r3, #32]
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	43db      	mvns	r3, r3
 80072e6:	401a      	ands	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6a1a      	ldr	r2, [r3, #32]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	f003 031f 	and.w	r3, r3, #31
 80072f6:	6879      	ldr	r1, [r7, #4]
 80072f8:	fa01 f303 	lsl.w	r3, r1, r3
 80072fc:	431a      	orrs	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	621a      	str	r2, [r3, #32]
}
 8007302:	bf00      	nop
 8007304:	371c      	adds	r7, #28
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
	...

08007310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007320:	2b01      	cmp	r3, #1
 8007322:	d101      	bne.n	8007328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007324:	2302      	movs	r3, #2
 8007326:	e068      	b.n	80073fa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a2e      	ldr	r2, [pc, #184]	; (8007408 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d004      	beq.n	800735c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a2d      	ldr	r2, [pc, #180]	; (800740c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d108      	bne.n	800736e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007362:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	4313      	orrs	r3, r2
 800736c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007374:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	4313      	orrs	r3, r2
 800737e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a1e      	ldr	r2, [pc, #120]	; (8007408 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d01d      	beq.n	80073ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800739a:	d018      	beq.n	80073ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a1b      	ldr	r2, [pc, #108]	; (8007410 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d013      	beq.n	80073ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a1a      	ldr	r2, [pc, #104]	; (8007414 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d00e      	beq.n	80073ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a18      	ldr	r2, [pc, #96]	; (8007418 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d009      	beq.n	80073ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a13      	ldr	r2, [pc, #76]	; (800740c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d004      	beq.n	80073ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a14      	ldr	r2, [pc, #80]	; (800741c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d10c      	bne.n	80073e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	4313      	orrs	r3, r2
 80073de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3714      	adds	r7, #20
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	40012c00 	.word	0x40012c00
 800740c:	40013400 	.word	0x40013400
 8007410:	40000400 	.word	0x40000400
 8007414:	40000800 	.word	0x40000800
 8007418:	40000c00 	.word	0x40000c00
 800741c:	40014000 	.word	0x40014000

08007420 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e042      	b.n	80074b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007438:	2b00      	cmp	r3, #0
 800743a:	d106      	bne.n	800744a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7fa f81b 	bl	8001480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2224      	movs	r2, #36	; 0x24
 800744e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f022 0201 	bic.w	r2, r2, #1
 8007460:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f82c 	bl	80074c0 <UART_SetConfig>
 8007468:	4603      	mov	r3, r0
 800746a:	2b01      	cmp	r3, #1
 800746c:	d101      	bne.n	8007472 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e022      	b.n	80074b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007476:	2b00      	cmp	r3, #0
 8007478:	d002      	beq.n	8007480 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fb1c 	bl	8007ab8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685a      	ldr	r2, [r3, #4]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800748e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689a      	ldr	r2, [r3, #8]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800749e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f042 0201 	orr.w	r2, r2, #1
 80074ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fba3 	bl	8007bfc <UART_CheckIdleState>
 80074b6:	4603      	mov	r3, r0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074c4:	b08c      	sub	sp, #48	; 0x30
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	431a      	orrs	r2, r3
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	695b      	ldr	r3, [r3, #20]
 80074de:	431a      	orrs	r2, r3
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	69db      	ldr	r3, [r3, #28]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	4baa      	ldr	r3, [pc, #680]	; (8007798 <UART_SetConfig+0x2d8>)
 80074f0:	4013      	ands	r3, r2
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	6812      	ldr	r2, [r2, #0]
 80074f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074f8:	430b      	orrs	r3, r1
 80074fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	68da      	ldr	r2, [r3, #12]
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	430a      	orrs	r2, r1
 8007510:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a9f      	ldr	r2, [pc, #636]	; (800779c <UART_SetConfig+0x2dc>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d004      	beq.n	800752c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007528:	4313      	orrs	r3, r2
 800752a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007536:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	6812      	ldr	r2, [r2, #0]
 800753e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007540:	430b      	orrs	r3, r1
 8007542:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754a:	f023 010f 	bic.w	r1, r3, #15
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	430a      	orrs	r2, r1
 8007558:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a90      	ldr	r2, [pc, #576]	; (80077a0 <UART_SetConfig+0x2e0>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d125      	bne.n	80075b0 <UART_SetConfig+0xf0>
 8007564:	4b8f      	ldr	r3, [pc, #572]	; (80077a4 <UART_SetConfig+0x2e4>)
 8007566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800756a:	f003 0303 	and.w	r3, r3, #3
 800756e:	2b03      	cmp	r3, #3
 8007570:	d81a      	bhi.n	80075a8 <UART_SetConfig+0xe8>
 8007572:	a201      	add	r2, pc, #4	; (adr r2, 8007578 <UART_SetConfig+0xb8>)
 8007574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007578:	08007589 	.word	0x08007589
 800757c:	08007599 	.word	0x08007599
 8007580:	08007591 	.word	0x08007591
 8007584:	080075a1 	.word	0x080075a1
 8007588:	2301      	movs	r3, #1
 800758a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800758e:	e116      	b.n	80077be <UART_SetConfig+0x2fe>
 8007590:	2302      	movs	r3, #2
 8007592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007596:	e112      	b.n	80077be <UART_SetConfig+0x2fe>
 8007598:	2304      	movs	r3, #4
 800759a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800759e:	e10e      	b.n	80077be <UART_SetConfig+0x2fe>
 80075a0:	2308      	movs	r3, #8
 80075a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075a6:	e10a      	b.n	80077be <UART_SetConfig+0x2fe>
 80075a8:	2310      	movs	r3, #16
 80075aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075ae:	e106      	b.n	80077be <UART_SetConfig+0x2fe>
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a7c      	ldr	r2, [pc, #496]	; (80077a8 <UART_SetConfig+0x2e8>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d138      	bne.n	800762c <UART_SetConfig+0x16c>
 80075ba:	4b7a      	ldr	r3, [pc, #488]	; (80077a4 <UART_SetConfig+0x2e4>)
 80075bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c0:	f003 030c 	and.w	r3, r3, #12
 80075c4:	2b0c      	cmp	r3, #12
 80075c6:	d82d      	bhi.n	8007624 <UART_SetConfig+0x164>
 80075c8:	a201      	add	r2, pc, #4	; (adr r2, 80075d0 <UART_SetConfig+0x110>)
 80075ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ce:	bf00      	nop
 80075d0:	08007605 	.word	0x08007605
 80075d4:	08007625 	.word	0x08007625
 80075d8:	08007625 	.word	0x08007625
 80075dc:	08007625 	.word	0x08007625
 80075e0:	08007615 	.word	0x08007615
 80075e4:	08007625 	.word	0x08007625
 80075e8:	08007625 	.word	0x08007625
 80075ec:	08007625 	.word	0x08007625
 80075f0:	0800760d 	.word	0x0800760d
 80075f4:	08007625 	.word	0x08007625
 80075f8:	08007625 	.word	0x08007625
 80075fc:	08007625 	.word	0x08007625
 8007600:	0800761d 	.word	0x0800761d
 8007604:	2300      	movs	r3, #0
 8007606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800760a:	e0d8      	b.n	80077be <UART_SetConfig+0x2fe>
 800760c:	2302      	movs	r3, #2
 800760e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007612:	e0d4      	b.n	80077be <UART_SetConfig+0x2fe>
 8007614:	2304      	movs	r3, #4
 8007616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800761a:	e0d0      	b.n	80077be <UART_SetConfig+0x2fe>
 800761c:	2308      	movs	r3, #8
 800761e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007622:	e0cc      	b.n	80077be <UART_SetConfig+0x2fe>
 8007624:	2310      	movs	r3, #16
 8007626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800762a:	e0c8      	b.n	80077be <UART_SetConfig+0x2fe>
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a5e      	ldr	r2, [pc, #376]	; (80077ac <UART_SetConfig+0x2ec>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d125      	bne.n	8007682 <UART_SetConfig+0x1c2>
 8007636:	4b5b      	ldr	r3, [pc, #364]	; (80077a4 <UART_SetConfig+0x2e4>)
 8007638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800763c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007640:	2b30      	cmp	r3, #48	; 0x30
 8007642:	d016      	beq.n	8007672 <UART_SetConfig+0x1b2>
 8007644:	2b30      	cmp	r3, #48	; 0x30
 8007646:	d818      	bhi.n	800767a <UART_SetConfig+0x1ba>
 8007648:	2b20      	cmp	r3, #32
 800764a:	d00a      	beq.n	8007662 <UART_SetConfig+0x1a2>
 800764c:	2b20      	cmp	r3, #32
 800764e:	d814      	bhi.n	800767a <UART_SetConfig+0x1ba>
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <UART_SetConfig+0x19a>
 8007654:	2b10      	cmp	r3, #16
 8007656:	d008      	beq.n	800766a <UART_SetConfig+0x1aa>
 8007658:	e00f      	b.n	800767a <UART_SetConfig+0x1ba>
 800765a:	2300      	movs	r3, #0
 800765c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007660:	e0ad      	b.n	80077be <UART_SetConfig+0x2fe>
 8007662:	2302      	movs	r3, #2
 8007664:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007668:	e0a9      	b.n	80077be <UART_SetConfig+0x2fe>
 800766a:	2304      	movs	r3, #4
 800766c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007670:	e0a5      	b.n	80077be <UART_SetConfig+0x2fe>
 8007672:	2308      	movs	r3, #8
 8007674:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007678:	e0a1      	b.n	80077be <UART_SetConfig+0x2fe>
 800767a:	2310      	movs	r3, #16
 800767c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007680:	e09d      	b.n	80077be <UART_SetConfig+0x2fe>
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a4a      	ldr	r2, [pc, #296]	; (80077b0 <UART_SetConfig+0x2f0>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d125      	bne.n	80076d8 <UART_SetConfig+0x218>
 800768c:	4b45      	ldr	r3, [pc, #276]	; (80077a4 <UART_SetConfig+0x2e4>)
 800768e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007692:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007696:	2bc0      	cmp	r3, #192	; 0xc0
 8007698:	d016      	beq.n	80076c8 <UART_SetConfig+0x208>
 800769a:	2bc0      	cmp	r3, #192	; 0xc0
 800769c:	d818      	bhi.n	80076d0 <UART_SetConfig+0x210>
 800769e:	2b80      	cmp	r3, #128	; 0x80
 80076a0:	d00a      	beq.n	80076b8 <UART_SetConfig+0x1f8>
 80076a2:	2b80      	cmp	r3, #128	; 0x80
 80076a4:	d814      	bhi.n	80076d0 <UART_SetConfig+0x210>
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <UART_SetConfig+0x1f0>
 80076aa:	2b40      	cmp	r3, #64	; 0x40
 80076ac:	d008      	beq.n	80076c0 <UART_SetConfig+0x200>
 80076ae:	e00f      	b.n	80076d0 <UART_SetConfig+0x210>
 80076b0:	2300      	movs	r3, #0
 80076b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076b6:	e082      	b.n	80077be <UART_SetConfig+0x2fe>
 80076b8:	2302      	movs	r3, #2
 80076ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076be:	e07e      	b.n	80077be <UART_SetConfig+0x2fe>
 80076c0:	2304      	movs	r3, #4
 80076c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076c6:	e07a      	b.n	80077be <UART_SetConfig+0x2fe>
 80076c8:	2308      	movs	r3, #8
 80076ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076ce:	e076      	b.n	80077be <UART_SetConfig+0x2fe>
 80076d0:	2310      	movs	r3, #16
 80076d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076d6:	e072      	b.n	80077be <UART_SetConfig+0x2fe>
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a35      	ldr	r2, [pc, #212]	; (80077b4 <UART_SetConfig+0x2f4>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d12a      	bne.n	8007738 <UART_SetConfig+0x278>
 80076e2:	4b30      	ldr	r3, [pc, #192]	; (80077a4 <UART_SetConfig+0x2e4>)
 80076e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076f0:	d01a      	beq.n	8007728 <UART_SetConfig+0x268>
 80076f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076f6:	d81b      	bhi.n	8007730 <UART_SetConfig+0x270>
 80076f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076fc:	d00c      	beq.n	8007718 <UART_SetConfig+0x258>
 80076fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007702:	d815      	bhi.n	8007730 <UART_SetConfig+0x270>
 8007704:	2b00      	cmp	r3, #0
 8007706:	d003      	beq.n	8007710 <UART_SetConfig+0x250>
 8007708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800770c:	d008      	beq.n	8007720 <UART_SetConfig+0x260>
 800770e:	e00f      	b.n	8007730 <UART_SetConfig+0x270>
 8007710:	2300      	movs	r3, #0
 8007712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007716:	e052      	b.n	80077be <UART_SetConfig+0x2fe>
 8007718:	2302      	movs	r3, #2
 800771a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800771e:	e04e      	b.n	80077be <UART_SetConfig+0x2fe>
 8007720:	2304      	movs	r3, #4
 8007722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007726:	e04a      	b.n	80077be <UART_SetConfig+0x2fe>
 8007728:	2308      	movs	r3, #8
 800772a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800772e:	e046      	b.n	80077be <UART_SetConfig+0x2fe>
 8007730:	2310      	movs	r3, #16
 8007732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007736:	e042      	b.n	80077be <UART_SetConfig+0x2fe>
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a17      	ldr	r2, [pc, #92]	; (800779c <UART_SetConfig+0x2dc>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d13a      	bne.n	80077b8 <UART_SetConfig+0x2f8>
 8007742:	4b18      	ldr	r3, [pc, #96]	; (80077a4 <UART_SetConfig+0x2e4>)
 8007744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007748:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800774c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007750:	d01a      	beq.n	8007788 <UART_SetConfig+0x2c8>
 8007752:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007756:	d81b      	bhi.n	8007790 <UART_SetConfig+0x2d0>
 8007758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800775c:	d00c      	beq.n	8007778 <UART_SetConfig+0x2b8>
 800775e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007762:	d815      	bhi.n	8007790 <UART_SetConfig+0x2d0>
 8007764:	2b00      	cmp	r3, #0
 8007766:	d003      	beq.n	8007770 <UART_SetConfig+0x2b0>
 8007768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800776c:	d008      	beq.n	8007780 <UART_SetConfig+0x2c0>
 800776e:	e00f      	b.n	8007790 <UART_SetConfig+0x2d0>
 8007770:	2300      	movs	r3, #0
 8007772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007776:	e022      	b.n	80077be <UART_SetConfig+0x2fe>
 8007778:	2302      	movs	r3, #2
 800777a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800777e:	e01e      	b.n	80077be <UART_SetConfig+0x2fe>
 8007780:	2304      	movs	r3, #4
 8007782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007786:	e01a      	b.n	80077be <UART_SetConfig+0x2fe>
 8007788:	2308      	movs	r3, #8
 800778a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800778e:	e016      	b.n	80077be <UART_SetConfig+0x2fe>
 8007790:	2310      	movs	r3, #16
 8007792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007796:	e012      	b.n	80077be <UART_SetConfig+0x2fe>
 8007798:	cfff69f3 	.word	0xcfff69f3
 800779c:	40008000 	.word	0x40008000
 80077a0:	40013800 	.word	0x40013800
 80077a4:	40021000 	.word	0x40021000
 80077a8:	40004400 	.word	0x40004400
 80077ac:	40004800 	.word	0x40004800
 80077b0:	40004c00 	.word	0x40004c00
 80077b4:	40005000 	.word	0x40005000
 80077b8:	2310      	movs	r3, #16
 80077ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4aae      	ldr	r2, [pc, #696]	; (8007a7c <UART_SetConfig+0x5bc>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	f040 8097 	bne.w	80078f8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077ce:	2b08      	cmp	r3, #8
 80077d0:	d823      	bhi.n	800781a <UART_SetConfig+0x35a>
 80077d2:	a201      	add	r2, pc, #4	; (adr r2, 80077d8 <UART_SetConfig+0x318>)
 80077d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d8:	080077fd 	.word	0x080077fd
 80077dc:	0800781b 	.word	0x0800781b
 80077e0:	08007805 	.word	0x08007805
 80077e4:	0800781b 	.word	0x0800781b
 80077e8:	0800780b 	.word	0x0800780b
 80077ec:	0800781b 	.word	0x0800781b
 80077f0:	0800781b 	.word	0x0800781b
 80077f4:	0800781b 	.word	0x0800781b
 80077f8:	08007813 	.word	0x08007813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077fc:	f7fd f896 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 8007800:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007802:	e010      	b.n	8007826 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007804:	4b9e      	ldr	r3, [pc, #632]	; (8007a80 <UART_SetConfig+0x5c0>)
 8007806:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007808:	e00d      	b.n	8007826 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800780a:	f7fc fff7 	bl	80047fc <HAL_RCC_GetSysClockFreq>
 800780e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007810:	e009      	b.n	8007826 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007816:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007818:	e005      	b.n	8007826 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800781a:	2300      	movs	r3, #0
 800781c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007824:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 8130 	beq.w	8007a8e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007832:	4a94      	ldr	r2, [pc, #592]	; (8007a84 <UART_SetConfig+0x5c4>)
 8007834:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007838:	461a      	mov	r2, r3
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007840:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	685a      	ldr	r2, [r3, #4]
 8007846:	4613      	mov	r3, r2
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	4413      	add	r3, r2
 800784c:	69ba      	ldr	r2, [r7, #24]
 800784e:	429a      	cmp	r2, r3
 8007850:	d305      	bcc.n	800785e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007858:	69ba      	ldr	r2, [r7, #24]
 800785a:	429a      	cmp	r2, r3
 800785c:	d903      	bls.n	8007866 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007864:	e113      	b.n	8007a8e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	2200      	movs	r2, #0
 800786a:	60bb      	str	r3, [r7, #8]
 800786c:	60fa      	str	r2, [r7, #12]
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	4a84      	ldr	r2, [pc, #528]	; (8007a84 <UART_SetConfig+0x5c4>)
 8007874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007878:	b29b      	uxth	r3, r3
 800787a:	2200      	movs	r2, #0
 800787c:	603b      	str	r3, [r7, #0]
 800787e:	607a      	str	r2, [r7, #4]
 8007880:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007884:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007888:	f7f8 fc98 	bl	80001bc <__aeabi_uldivmod>
 800788c:	4602      	mov	r2, r0
 800788e:	460b      	mov	r3, r1
 8007890:	4610      	mov	r0, r2
 8007892:	4619      	mov	r1, r3
 8007894:	f04f 0200 	mov.w	r2, #0
 8007898:	f04f 0300 	mov.w	r3, #0
 800789c:	020b      	lsls	r3, r1, #8
 800789e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80078a2:	0202      	lsls	r2, r0, #8
 80078a4:	6979      	ldr	r1, [r7, #20]
 80078a6:	6849      	ldr	r1, [r1, #4]
 80078a8:	0849      	lsrs	r1, r1, #1
 80078aa:	2000      	movs	r0, #0
 80078ac:	460c      	mov	r4, r1
 80078ae:	4605      	mov	r5, r0
 80078b0:	eb12 0804 	adds.w	r8, r2, r4
 80078b4:	eb43 0905 	adc.w	r9, r3, r5
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	469a      	mov	sl, r3
 80078c0:	4693      	mov	fp, r2
 80078c2:	4652      	mov	r2, sl
 80078c4:	465b      	mov	r3, fp
 80078c6:	4640      	mov	r0, r8
 80078c8:	4649      	mov	r1, r9
 80078ca:	f7f8 fc77 	bl	80001bc <__aeabi_uldivmod>
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	4613      	mov	r3, r2
 80078d4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078dc:	d308      	bcc.n	80078f0 <UART_SetConfig+0x430>
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078e4:	d204      	bcs.n	80078f0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6a3a      	ldr	r2, [r7, #32]
 80078ec:	60da      	str	r2, [r3, #12]
 80078ee:	e0ce      	b.n	8007a8e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80078f6:	e0ca      	b.n	8007a8e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	69db      	ldr	r3, [r3, #28]
 80078fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007900:	d166      	bne.n	80079d0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007902:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007906:	2b08      	cmp	r3, #8
 8007908:	d827      	bhi.n	800795a <UART_SetConfig+0x49a>
 800790a:	a201      	add	r2, pc, #4	; (adr r2, 8007910 <UART_SetConfig+0x450>)
 800790c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007910:	08007935 	.word	0x08007935
 8007914:	0800793d 	.word	0x0800793d
 8007918:	08007945 	.word	0x08007945
 800791c:	0800795b 	.word	0x0800795b
 8007920:	0800794b 	.word	0x0800794b
 8007924:	0800795b 	.word	0x0800795b
 8007928:	0800795b 	.word	0x0800795b
 800792c:	0800795b 	.word	0x0800795b
 8007930:	08007953 	.word	0x08007953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007934:	f7fc fffa 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 8007938:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800793a:	e014      	b.n	8007966 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800793c:	f7fd f80c 	bl	8004958 <HAL_RCC_GetPCLK2Freq>
 8007940:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007942:	e010      	b.n	8007966 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007944:	4b4e      	ldr	r3, [pc, #312]	; (8007a80 <UART_SetConfig+0x5c0>)
 8007946:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007948:	e00d      	b.n	8007966 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800794a:	f7fc ff57 	bl	80047fc <HAL_RCC_GetSysClockFreq>
 800794e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007950:	e009      	b.n	8007966 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007956:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007958:	e005      	b.n	8007966 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800795a:	2300      	movs	r3, #0
 800795c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007964:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007968:	2b00      	cmp	r3, #0
 800796a:	f000 8090 	beq.w	8007a8e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007972:	4a44      	ldr	r2, [pc, #272]	; (8007a84 <UART_SetConfig+0x5c4>)
 8007974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007978:	461a      	mov	r2, r3
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007980:	005a      	lsls	r2, r3, #1
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	085b      	lsrs	r3, r3, #1
 8007988:	441a      	add	r2, r3
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007992:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	2b0f      	cmp	r3, #15
 8007998:	d916      	bls.n	80079c8 <UART_SetConfig+0x508>
 800799a:	6a3b      	ldr	r3, [r7, #32]
 800799c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079a0:	d212      	bcs.n	80079c8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079a2:	6a3b      	ldr	r3, [r7, #32]
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	f023 030f 	bic.w	r3, r3, #15
 80079aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079ac:	6a3b      	ldr	r3, [r7, #32]
 80079ae:	085b      	lsrs	r3, r3, #1
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	f003 0307 	and.w	r3, r3, #7
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	8bfb      	ldrh	r3, [r7, #30]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	8bfa      	ldrh	r2, [r7, #30]
 80079c4:	60da      	str	r2, [r3, #12]
 80079c6:	e062      	b.n	8007a8e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80079ce:	e05e      	b.n	8007a8e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80079d4:	2b08      	cmp	r3, #8
 80079d6:	d828      	bhi.n	8007a2a <UART_SetConfig+0x56a>
 80079d8:	a201      	add	r2, pc, #4	; (adr r2, 80079e0 <UART_SetConfig+0x520>)
 80079da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079de:	bf00      	nop
 80079e0:	08007a05 	.word	0x08007a05
 80079e4:	08007a0d 	.word	0x08007a0d
 80079e8:	08007a15 	.word	0x08007a15
 80079ec:	08007a2b 	.word	0x08007a2b
 80079f0:	08007a1b 	.word	0x08007a1b
 80079f4:	08007a2b 	.word	0x08007a2b
 80079f8:	08007a2b 	.word	0x08007a2b
 80079fc:	08007a2b 	.word	0x08007a2b
 8007a00:	08007a23 	.word	0x08007a23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a04:	f7fc ff92 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 8007a08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a0a:	e014      	b.n	8007a36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a0c:	f7fc ffa4 	bl	8004958 <HAL_RCC_GetPCLK2Freq>
 8007a10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a12:	e010      	b.n	8007a36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a14:	4b1a      	ldr	r3, [pc, #104]	; (8007a80 <UART_SetConfig+0x5c0>)
 8007a16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a18:	e00d      	b.n	8007a36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a1a:	f7fc feef 	bl	80047fc <HAL_RCC_GetSysClockFreq>
 8007a1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a20:	e009      	b.n	8007a36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a28:	e005      	b.n	8007a36 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007a34:	bf00      	nop
    }

    if (pclk != 0U)
 8007a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d028      	beq.n	8007a8e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a40:	4a10      	ldr	r2, [pc, #64]	; (8007a84 <UART_SetConfig+0x5c4>)
 8007a42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a46:	461a      	mov	r2, r3
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	085b      	lsrs	r3, r3, #1
 8007a54:	441a      	add	r2, r3
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a5e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	2b0f      	cmp	r3, #15
 8007a64:	d910      	bls.n	8007a88 <UART_SetConfig+0x5c8>
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a6c:	d20c      	bcs.n	8007a88 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a6e:	6a3b      	ldr	r3, [r7, #32]
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	60da      	str	r2, [r3, #12]
 8007a78:	e009      	b.n	8007a8e <UART_SetConfig+0x5ce>
 8007a7a:	bf00      	nop
 8007a7c:	40008000 	.word	0x40008000
 8007a80:	00f42400 	.word	0x00f42400
 8007a84:	080083a8 	.word	0x080083a8
      }
      else
      {
        ret = HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007aaa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3730      	adds	r7, #48	; 0x30
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007ab8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00a      	beq.n	8007ae2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae6:	f003 0302 	and.w	r3, r3, #2
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00a      	beq.n	8007b04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	430a      	orrs	r2, r1
 8007b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b08:	f003 0304 	and.w	r3, r3, #4
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00a      	beq.n	8007b26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	430a      	orrs	r2, r1
 8007b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2a:	f003 0308 	and.w	r3, r3, #8
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00a      	beq.n	8007b48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	430a      	orrs	r2, r1
 8007b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4c:	f003 0310 	and.w	r3, r3, #16
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00a      	beq.n	8007b6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	430a      	orrs	r2, r1
 8007b68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6e:	f003 0320 	and.w	r3, r3, #32
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00a      	beq.n	8007b8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d01a      	beq.n	8007bce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bb6:	d10a      	bne.n	8007bce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00a      	beq.n	8007bf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	430a      	orrs	r2, r1
 8007bee:	605a      	str	r2, [r3, #4]
  }
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af02      	add	r7, sp, #8
 8007c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c0c:	f7f9 fe70 	bl	80018f0 <HAL_GetTick>
 8007c10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 0308 	and.w	r3, r3, #8
 8007c1c:	2b08      	cmp	r3, #8
 8007c1e:	d10e      	bne.n	8007c3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f82f 	bl	8007c92 <UART_WaitOnFlagUntilTimeout>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d001      	beq.n	8007c3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e025      	b.n	8007c8a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0304 	and.w	r3, r3, #4
 8007c48:	2b04      	cmp	r3, #4
 8007c4a:	d10e      	bne.n	8007c6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c50:	9300      	str	r3, [sp, #0]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f819 	bl	8007c92 <UART_WaitOnFlagUntilTimeout>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d001      	beq.n	8007c6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c66:	2303      	movs	r3, #3
 8007c68:	e00f      	b.n	8007c8a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2220      	movs	r2, #32
 8007c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2220      	movs	r2, #32
 8007c76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b09c      	sub	sp, #112	; 0x70
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	60f8      	str	r0, [r7, #12]
 8007c9a:	60b9      	str	r1, [r7, #8]
 8007c9c:	603b      	str	r3, [r7, #0]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ca2:	e0a9      	b.n	8007df8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007caa:	f000 80a5 	beq.w	8007df8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cae:	f7f9 fe1f 	bl	80018f0 <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d302      	bcc.n	8007cc4 <UART_WaitOnFlagUntilTimeout+0x32>
 8007cbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d140      	bne.n	8007d46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ccc:	e853 3f00 	ldrex	r3, [r3]
 8007cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007cd8:	667b      	str	r3, [r7, #100]	; 0x64
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ce4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ce8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007cea:	e841 2300 	strex	r3, r2, [r1]
 8007cee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e6      	bne.n	8007cc4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3308      	adds	r3, #8
 8007cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d00:	e853 3f00 	ldrex	r3, [r3]
 8007d04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d08:	f023 0301 	bic.w	r3, r3, #1
 8007d0c:	663b      	str	r3, [r7, #96]	; 0x60
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3308      	adds	r3, #8
 8007d14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d16:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d1e:	e841 2300 	strex	r3, r2, [r1]
 8007d22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1e5      	bne.n	8007cf6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2220      	movs	r2, #32
 8007d36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e069      	b.n	8007e1a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 0304 	and.w	r3, r3, #4
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d051      	beq.n	8007df8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	69db      	ldr	r3, [r3, #28]
 8007d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d62:	d149      	bne.n	8007df8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d6c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d76:	e853 3f00 	ldrex	r3, [r3]
 8007d7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	461a      	mov	r2, r3
 8007d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d94:	e841 2300 	strex	r3, r2, [r1]
 8007d98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1e6      	bne.n	8007d6e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	3308      	adds	r3, #8
 8007da6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	e853 3f00 	ldrex	r3, [r3]
 8007dae:	613b      	str	r3, [r7, #16]
   return(result);
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	f023 0301 	bic.w	r3, r3, #1
 8007db6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	3308      	adds	r3, #8
 8007dbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007dc0:	623a      	str	r2, [r7, #32]
 8007dc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc4:	69f9      	ldr	r1, [r7, #28]
 8007dc6:	6a3a      	ldr	r2, [r7, #32]
 8007dc8:	e841 2300 	strex	r3, r2, [r1]
 8007dcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1e5      	bne.n	8007da0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2220      	movs	r2, #32
 8007dd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2220      	movs	r2, #32
 8007de0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2220      	movs	r2, #32
 8007de8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e010      	b.n	8007e1a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	69da      	ldr	r2, [r3, #28]
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	4013      	ands	r3, r2
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	bf0c      	ite	eq
 8007e08:	2301      	moveq	r3, #1
 8007e0a:	2300      	movne	r3, #0
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	461a      	mov	r2, r3
 8007e10:	79fb      	ldrb	r3, [r7, #7]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	f43f af46 	beq.w	8007ca4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3770      	adds	r7, #112	; 0x70
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b085      	sub	sp, #20
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d101      	bne.n	8007e38 <HAL_UARTEx_DisableFifoMode+0x16>
 8007e34:	2302      	movs	r3, #2
 8007e36:	e027      	b.n	8007e88 <HAL_UARTEx_DisableFifoMode+0x66>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2224      	movs	r2, #36	; 0x24
 8007e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f022 0201 	bic.w	r2, r2, #1
 8007e5e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007e66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2220      	movs	r2, #32
 8007e7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d101      	bne.n	8007eac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	e02d      	b.n	8007f08 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2224      	movs	r2, #36	; 0x24
 8007eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f022 0201 	bic.w	r2, r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f84f 	bl	8007f8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2220      	movs	r2, #32
 8007efa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d101      	bne.n	8007f28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f24:	2302      	movs	r3, #2
 8007f26:	e02d      	b.n	8007f84 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2224      	movs	r2, #36	; 0x24
 8007f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f022 0201 	bic.w	r2, r2, #1
 8007f4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 f811 	bl	8007f8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2220      	movs	r2, #32
 8007f76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d108      	bne.n	8007fae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007fac:	e031      	b.n	8008012 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007fae:	2308      	movs	r3, #8
 8007fb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007fb2:	2308      	movs	r3, #8
 8007fb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	0e5b      	lsrs	r3, r3, #25
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	f003 0307 	and.w	r3, r3, #7
 8007fc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	0f5b      	lsrs	r3, r3, #29
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	f003 0307 	and.w	r3, r3, #7
 8007fd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fd6:	7bbb      	ldrb	r3, [r7, #14]
 8007fd8:	7b3a      	ldrb	r2, [r7, #12]
 8007fda:	4911      	ldr	r1, [pc, #68]	; (8008020 <UARTEx_SetNbDataToProcess+0x94>)
 8007fdc:	5c8a      	ldrb	r2, [r1, r2]
 8007fde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007fe2:	7b3a      	ldrb	r2, [r7, #12]
 8007fe4:	490f      	ldr	r1, [pc, #60]	; (8008024 <UARTEx_SetNbDataToProcess+0x98>)
 8007fe6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fe8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ff4:	7bfb      	ldrb	r3, [r7, #15]
 8007ff6:	7b7a      	ldrb	r2, [r7, #13]
 8007ff8:	4909      	ldr	r1, [pc, #36]	; (8008020 <UARTEx_SetNbDataToProcess+0x94>)
 8007ffa:	5c8a      	ldrb	r2, [r1, r2]
 8007ffc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008000:	7b7a      	ldrb	r2, [r7, #13]
 8008002:	4908      	ldr	r1, [pc, #32]	; (8008024 <UARTEx_SetNbDataToProcess+0x98>)
 8008004:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008006:	fb93 f3f2 	sdiv	r3, r3, r2
 800800a:	b29a      	uxth	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008012:	bf00      	nop
 8008014:	3714      	adds	r7, #20
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	080083c0 	.word	0x080083c0
 8008024:	080083c8 	.word	0x080083c8

08008028 <__libc_init_array>:
 8008028:	b570      	push	{r4, r5, r6, lr}
 800802a:	4d0d      	ldr	r5, [pc, #52]	; (8008060 <__libc_init_array+0x38>)
 800802c:	4c0d      	ldr	r4, [pc, #52]	; (8008064 <__libc_init_array+0x3c>)
 800802e:	1b64      	subs	r4, r4, r5
 8008030:	10a4      	asrs	r4, r4, #2
 8008032:	2600      	movs	r6, #0
 8008034:	42a6      	cmp	r6, r4
 8008036:	d109      	bne.n	800804c <__libc_init_array+0x24>
 8008038:	4d0b      	ldr	r5, [pc, #44]	; (8008068 <__libc_init_array+0x40>)
 800803a:	4c0c      	ldr	r4, [pc, #48]	; (800806c <__libc_init_array+0x44>)
 800803c:	f000 f984 	bl	8008348 <_init>
 8008040:	1b64      	subs	r4, r4, r5
 8008042:	10a4      	asrs	r4, r4, #2
 8008044:	2600      	movs	r6, #0
 8008046:	42a6      	cmp	r6, r4
 8008048:	d105      	bne.n	8008056 <__libc_init_array+0x2e>
 800804a:	bd70      	pop	{r4, r5, r6, pc}
 800804c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008050:	4798      	blx	r3
 8008052:	3601      	adds	r6, #1
 8008054:	e7ee      	b.n	8008034 <__libc_init_array+0xc>
 8008056:	f855 3b04 	ldr.w	r3, [r5], #4
 800805a:	4798      	blx	r3
 800805c:	3601      	adds	r6, #1
 800805e:	e7f2      	b.n	8008046 <__libc_init_array+0x1e>
 8008060:	080083d8 	.word	0x080083d8
 8008064:	080083d8 	.word	0x080083d8
 8008068:	080083d8 	.word	0x080083d8
 800806c:	080083dc 	.word	0x080083dc

08008070 <memset>:
 8008070:	4402      	add	r2, r0
 8008072:	4603      	mov	r3, r0
 8008074:	4293      	cmp	r3, r2
 8008076:	d100      	bne.n	800807a <memset+0xa>
 8008078:	4770      	bx	lr
 800807a:	f803 1b01 	strb.w	r1, [r3], #1
 800807e:	e7f9      	b.n	8008074 <memset+0x4>

08008080 <__udivmoddi4>:
 8008080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008084:	9e08      	ldr	r6, [sp, #32]
 8008086:	460d      	mov	r5, r1
 8008088:	4604      	mov	r4, r0
 800808a:	460f      	mov	r7, r1
 800808c:	2b00      	cmp	r3, #0
 800808e:	d14a      	bne.n	8008126 <__udivmoddi4+0xa6>
 8008090:	428a      	cmp	r2, r1
 8008092:	4694      	mov	ip, r2
 8008094:	d965      	bls.n	8008162 <__udivmoddi4+0xe2>
 8008096:	fab2 f382 	clz	r3, r2
 800809a:	b143      	cbz	r3, 80080ae <__udivmoddi4+0x2e>
 800809c:	fa02 fc03 	lsl.w	ip, r2, r3
 80080a0:	f1c3 0220 	rsb	r2, r3, #32
 80080a4:	409f      	lsls	r7, r3
 80080a6:	fa20 f202 	lsr.w	r2, r0, r2
 80080aa:	4317      	orrs	r7, r2
 80080ac:	409c      	lsls	r4, r3
 80080ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80080b2:	fa1f f58c 	uxth.w	r5, ip
 80080b6:	fbb7 f1fe 	udiv	r1, r7, lr
 80080ba:	0c22      	lsrs	r2, r4, #16
 80080bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80080c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80080c4:	fb01 f005 	mul.w	r0, r1, r5
 80080c8:	4290      	cmp	r0, r2
 80080ca:	d90a      	bls.n	80080e2 <__udivmoddi4+0x62>
 80080cc:	eb1c 0202 	adds.w	r2, ip, r2
 80080d0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80080d4:	f080 811c 	bcs.w	8008310 <__udivmoddi4+0x290>
 80080d8:	4290      	cmp	r0, r2
 80080da:	f240 8119 	bls.w	8008310 <__udivmoddi4+0x290>
 80080de:	3902      	subs	r1, #2
 80080e0:	4462      	add	r2, ip
 80080e2:	1a12      	subs	r2, r2, r0
 80080e4:	b2a4      	uxth	r4, r4
 80080e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80080ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80080ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80080f2:	fb00 f505 	mul.w	r5, r0, r5
 80080f6:	42a5      	cmp	r5, r4
 80080f8:	d90a      	bls.n	8008110 <__udivmoddi4+0x90>
 80080fa:	eb1c 0404 	adds.w	r4, ip, r4
 80080fe:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8008102:	f080 8107 	bcs.w	8008314 <__udivmoddi4+0x294>
 8008106:	42a5      	cmp	r5, r4
 8008108:	f240 8104 	bls.w	8008314 <__udivmoddi4+0x294>
 800810c:	4464      	add	r4, ip
 800810e:	3802      	subs	r0, #2
 8008110:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008114:	1b64      	subs	r4, r4, r5
 8008116:	2100      	movs	r1, #0
 8008118:	b11e      	cbz	r6, 8008122 <__udivmoddi4+0xa2>
 800811a:	40dc      	lsrs	r4, r3
 800811c:	2300      	movs	r3, #0
 800811e:	e9c6 4300 	strd	r4, r3, [r6]
 8008122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008126:	428b      	cmp	r3, r1
 8008128:	d908      	bls.n	800813c <__udivmoddi4+0xbc>
 800812a:	2e00      	cmp	r6, #0
 800812c:	f000 80ed 	beq.w	800830a <__udivmoddi4+0x28a>
 8008130:	2100      	movs	r1, #0
 8008132:	e9c6 0500 	strd	r0, r5, [r6]
 8008136:	4608      	mov	r0, r1
 8008138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800813c:	fab3 f183 	clz	r1, r3
 8008140:	2900      	cmp	r1, #0
 8008142:	d149      	bne.n	80081d8 <__udivmoddi4+0x158>
 8008144:	42ab      	cmp	r3, r5
 8008146:	d302      	bcc.n	800814e <__udivmoddi4+0xce>
 8008148:	4282      	cmp	r2, r0
 800814a:	f200 80f8 	bhi.w	800833e <__udivmoddi4+0x2be>
 800814e:	1a84      	subs	r4, r0, r2
 8008150:	eb65 0203 	sbc.w	r2, r5, r3
 8008154:	2001      	movs	r0, #1
 8008156:	4617      	mov	r7, r2
 8008158:	2e00      	cmp	r6, #0
 800815a:	d0e2      	beq.n	8008122 <__udivmoddi4+0xa2>
 800815c:	e9c6 4700 	strd	r4, r7, [r6]
 8008160:	e7df      	b.n	8008122 <__udivmoddi4+0xa2>
 8008162:	b902      	cbnz	r2, 8008166 <__udivmoddi4+0xe6>
 8008164:	deff      	udf	#255	; 0xff
 8008166:	fab2 f382 	clz	r3, r2
 800816a:	2b00      	cmp	r3, #0
 800816c:	f040 8090 	bne.w	8008290 <__udivmoddi4+0x210>
 8008170:	1a8a      	subs	r2, r1, r2
 8008172:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008176:	fa1f fe8c 	uxth.w	lr, ip
 800817a:	2101      	movs	r1, #1
 800817c:	fbb2 f5f7 	udiv	r5, r2, r7
 8008180:	fb07 2015 	mls	r0, r7, r5, r2
 8008184:	0c22      	lsrs	r2, r4, #16
 8008186:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800818a:	fb0e f005 	mul.w	r0, lr, r5
 800818e:	4290      	cmp	r0, r2
 8008190:	d908      	bls.n	80081a4 <__udivmoddi4+0x124>
 8008192:	eb1c 0202 	adds.w	r2, ip, r2
 8008196:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800819a:	d202      	bcs.n	80081a2 <__udivmoddi4+0x122>
 800819c:	4290      	cmp	r0, r2
 800819e:	f200 80cb 	bhi.w	8008338 <__udivmoddi4+0x2b8>
 80081a2:	4645      	mov	r5, r8
 80081a4:	1a12      	subs	r2, r2, r0
 80081a6:	b2a4      	uxth	r4, r4
 80081a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80081ac:	fb07 2210 	mls	r2, r7, r0, r2
 80081b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80081b4:	fb0e fe00 	mul.w	lr, lr, r0
 80081b8:	45a6      	cmp	lr, r4
 80081ba:	d908      	bls.n	80081ce <__udivmoddi4+0x14e>
 80081bc:	eb1c 0404 	adds.w	r4, ip, r4
 80081c0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80081c4:	d202      	bcs.n	80081cc <__udivmoddi4+0x14c>
 80081c6:	45a6      	cmp	lr, r4
 80081c8:	f200 80bb 	bhi.w	8008342 <__udivmoddi4+0x2c2>
 80081cc:	4610      	mov	r0, r2
 80081ce:	eba4 040e 	sub.w	r4, r4, lr
 80081d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80081d6:	e79f      	b.n	8008118 <__udivmoddi4+0x98>
 80081d8:	f1c1 0720 	rsb	r7, r1, #32
 80081dc:	408b      	lsls	r3, r1
 80081de:	fa22 fc07 	lsr.w	ip, r2, r7
 80081e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80081e6:	fa05 f401 	lsl.w	r4, r5, r1
 80081ea:	fa20 f307 	lsr.w	r3, r0, r7
 80081ee:	40fd      	lsrs	r5, r7
 80081f0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80081f4:	4323      	orrs	r3, r4
 80081f6:	fbb5 f8f9 	udiv	r8, r5, r9
 80081fa:	fa1f fe8c 	uxth.w	lr, ip
 80081fe:	fb09 5518 	mls	r5, r9, r8, r5
 8008202:	0c1c      	lsrs	r4, r3, #16
 8008204:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008208:	fb08 f50e 	mul.w	r5, r8, lr
 800820c:	42a5      	cmp	r5, r4
 800820e:	fa02 f201 	lsl.w	r2, r2, r1
 8008212:	fa00 f001 	lsl.w	r0, r0, r1
 8008216:	d90b      	bls.n	8008230 <__udivmoddi4+0x1b0>
 8008218:	eb1c 0404 	adds.w	r4, ip, r4
 800821c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8008220:	f080 8088 	bcs.w	8008334 <__udivmoddi4+0x2b4>
 8008224:	42a5      	cmp	r5, r4
 8008226:	f240 8085 	bls.w	8008334 <__udivmoddi4+0x2b4>
 800822a:	f1a8 0802 	sub.w	r8, r8, #2
 800822e:	4464      	add	r4, ip
 8008230:	1b64      	subs	r4, r4, r5
 8008232:	b29d      	uxth	r5, r3
 8008234:	fbb4 f3f9 	udiv	r3, r4, r9
 8008238:	fb09 4413 	mls	r4, r9, r3, r4
 800823c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8008240:	fb03 fe0e 	mul.w	lr, r3, lr
 8008244:	45a6      	cmp	lr, r4
 8008246:	d908      	bls.n	800825a <__udivmoddi4+0x1da>
 8008248:	eb1c 0404 	adds.w	r4, ip, r4
 800824c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8008250:	d26c      	bcs.n	800832c <__udivmoddi4+0x2ac>
 8008252:	45a6      	cmp	lr, r4
 8008254:	d96a      	bls.n	800832c <__udivmoddi4+0x2ac>
 8008256:	3b02      	subs	r3, #2
 8008258:	4464      	add	r4, ip
 800825a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800825e:	fba3 9502 	umull	r9, r5, r3, r2
 8008262:	eba4 040e 	sub.w	r4, r4, lr
 8008266:	42ac      	cmp	r4, r5
 8008268:	46c8      	mov	r8, r9
 800826a:	46ae      	mov	lr, r5
 800826c:	d356      	bcc.n	800831c <__udivmoddi4+0x29c>
 800826e:	d053      	beq.n	8008318 <__udivmoddi4+0x298>
 8008270:	b156      	cbz	r6, 8008288 <__udivmoddi4+0x208>
 8008272:	ebb0 0208 	subs.w	r2, r0, r8
 8008276:	eb64 040e 	sbc.w	r4, r4, lr
 800827a:	fa04 f707 	lsl.w	r7, r4, r7
 800827e:	40ca      	lsrs	r2, r1
 8008280:	40cc      	lsrs	r4, r1
 8008282:	4317      	orrs	r7, r2
 8008284:	e9c6 7400 	strd	r7, r4, [r6]
 8008288:	4618      	mov	r0, r3
 800828a:	2100      	movs	r1, #0
 800828c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008290:	f1c3 0120 	rsb	r1, r3, #32
 8008294:	fa02 fc03 	lsl.w	ip, r2, r3
 8008298:	fa20 f201 	lsr.w	r2, r0, r1
 800829c:	fa25 f101 	lsr.w	r1, r5, r1
 80082a0:	409d      	lsls	r5, r3
 80082a2:	432a      	orrs	r2, r5
 80082a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80082a8:	fa1f fe8c 	uxth.w	lr, ip
 80082ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80082b0:	fb07 1510 	mls	r5, r7, r0, r1
 80082b4:	0c11      	lsrs	r1, r2, #16
 80082b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80082ba:	fb00 f50e 	mul.w	r5, r0, lr
 80082be:	428d      	cmp	r5, r1
 80082c0:	fa04 f403 	lsl.w	r4, r4, r3
 80082c4:	d908      	bls.n	80082d8 <__udivmoddi4+0x258>
 80082c6:	eb1c 0101 	adds.w	r1, ip, r1
 80082ca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80082ce:	d22f      	bcs.n	8008330 <__udivmoddi4+0x2b0>
 80082d0:	428d      	cmp	r5, r1
 80082d2:	d92d      	bls.n	8008330 <__udivmoddi4+0x2b0>
 80082d4:	3802      	subs	r0, #2
 80082d6:	4461      	add	r1, ip
 80082d8:	1b49      	subs	r1, r1, r5
 80082da:	b292      	uxth	r2, r2
 80082dc:	fbb1 f5f7 	udiv	r5, r1, r7
 80082e0:	fb07 1115 	mls	r1, r7, r5, r1
 80082e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80082e8:	fb05 f10e 	mul.w	r1, r5, lr
 80082ec:	4291      	cmp	r1, r2
 80082ee:	d908      	bls.n	8008302 <__udivmoddi4+0x282>
 80082f0:	eb1c 0202 	adds.w	r2, ip, r2
 80082f4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80082f8:	d216      	bcs.n	8008328 <__udivmoddi4+0x2a8>
 80082fa:	4291      	cmp	r1, r2
 80082fc:	d914      	bls.n	8008328 <__udivmoddi4+0x2a8>
 80082fe:	3d02      	subs	r5, #2
 8008300:	4462      	add	r2, ip
 8008302:	1a52      	subs	r2, r2, r1
 8008304:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8008308:	e738      	b.n	800817c <__udivmoddi4+0xfc>
 800830a:	4631      	mov	r1, r6
 800830c:	4630      	mov	r0, r6
 800830e:	e708      	b.n	8008122 <__udivmoddi4+0xa2>
 8008310:	4639      	mov	r1, r7
 8008312:	e6e6      	b.n	80080e2 <__udivmoddi4+0x62>
 8008314:	4610      	mov	r0, r2
 8008316:	e6fb      	b.n	8008110 <__udivmoddi4+0x90>
 8008318:	4548      	cmp	r0, r9
 800831a:	d2a9      	bcs.n	8008270 <__udivmoddi4+0x1f0>
 800831c:	ebb9 0802 	subs.w	r8, r9, r2
 8008320:	eb65 0e0c 	sbc.w	lr, r5, ip
 8008324:	3b01      	subs	r3, #1
 8008326:	e7a3      	b.n	8008270 <__udivmoddi4+0x1f0>
 8008328:	4645      	mov	r5, r8
 800832a:	e7ea      	b.n	8008302 <__udivmoddi4+0x282>
 800832c:	462b      	mov	r3, r5
 800832e:	e794      	b.n	800825a <__udivmoddi4+0x1da>
 8008330:	4640      	mov	r0, r8
 8008332:	e7d1      	b.n	80082d8 <__udivmoddi4+0x258>
 8008334:	46d0      	mov	r8, sl
 8008336:	e77b      	b.n	8008230 <__udivmoddi4+0x1b0>
 8008338:	3d02      	subs	r5, #2
 800833a:	4462      	add	r2, ip
 800833c:	e732      	b.n	80081a4 <__udivmoddi4+0x124>
 800833e:	4608      	mov	r0, r1
 8008340:	e70a      	b.n	8008158 <__udivmoddi4+0xd8>
 8008342:	4464      	add	r4, ip
 8008344:	3802      	subs	r0, #2
 8008346:	e742      	b.n	80081ce <__udivmoddi4+0x14e>

08008348 <_init>:
 8008348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834a:	bf00      	nop
 800834c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800834e:	bc08      	pop	{r3}
 8008350:	469e      	mov	lr, r3
 8008352:	4770      	bx	lr

08008354 <_fini>:
 8008354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008356:	bf00      	nop
 8008358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800835a:	bc08      	pop	{r3}
 800835c:	469e      	mov	lr, r3
 800835e:	4770      	bx	lr
