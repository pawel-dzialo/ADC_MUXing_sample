
ADC_MUXing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008178  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008334  08008334  00018334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083a4  080083a4  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080083a4  080083a4  000183a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083ac  080083ac  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083ac  080083ac  000183ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083b0  080083b0  000183b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080083b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  20000018  080083cc  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  080083cc  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000057  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f810  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003796  00000000  00000000  0003f8af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c78  00000000  00000000  00043048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016a1  00000000  00000000  00044cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002df42  00000000  00000000  00046361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d585  00000000  00000000  000742a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012418b  00000000  00000000  00091828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007950  00000000  00000000  001b59b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  001bd304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000b9a  00000000  00000000  001bd387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__aeabi_uldivmod>:
 80001bc:	b953      	cbnz	r3, 80001d4 <__aeabi_uldivmod+0x18>
 80001be:	b94a      	cbnz	r2, 80001d4 <__aeabi_uldivmod+0x18>
 80001c0:	2900      	cmp	r1, #0
 80001c2:	bf08      	it	eq
 80001c4:	2800      	cmpeq	r0, #0
 80001c6:	bf1c      	itt	ne
 80001c8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001cc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001d0:	f000 b80c 	b.w	80001ec <__aeabi_idiv0>
 80001d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001dc:	f007 ff3a 	bl	8008054 <__udivmoddi4>
 80001e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001e8:	b004      	add	sp, #16
 80001ea:	4770      	bx	lr

080001ec <__aeabi_idiv0>:
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop

080001f0 <deregister_tm_clones>:
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <deregister_tm_clones+0x10>)
 80001f2:	4b04      	ldr	r3, [pc, #16]	; (8000204 <deregister_tm_clones+0x14>)
 80001f4:	4283      	cmp	r3, r0
 80001f6:	d002      	beq.n	80001fe <deregister_tm_clones+0xe>
 80001f8:	4b03      	ldr	r3, [pc, #12]	; (8000208 <deregister_tm_clones+0x18>)
 80001fa:	b103      	cbz	r3, 80001fe <deregister_tm_clones+0xe>
 80001fc:	4718      	bx	r3
 80001fe:	4770      	bx	lr
 8000200:	20000018 	.word	0x20000018
 8000204:	20000018 	.word	0x20000018
 8000208:	00000000 	.word	0x00000000

0800020c <register_tm_clones>:
 800020c:	4805      	ldr	r0, [pc, #20]	; (8000224 <register_tm_clones+0x18>)
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <register_tm_clones+0x1c>)
 8000210:	1a1b      	subs	r3, r3, r0
 8000212:	0fd9      	lsrs	r1, r3, #31
 8000214:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000218:	1049      	asrs	r1, r1, #1
 800021a:	d002      	beq.n	8000222 <register_tm_clones+0x16>
 800021c:	4b03      	ldr	r3, [pc, #12]	; (800022c <register_tm_clones+0x20>)
 800021e:	b103      	cbz	r3, 8000222 <register_tm_clones+0x16>
 8000220:	4718      	bx	r3
 8000222:	4770      	bx	lr
 8000224:	20000018 	.word	0x20000018
 8000228:	20000018 	.word	0x20000018
 800022c:	00000000 	.word	0x00000000

08000230 <__do_global_dtors_aux>:
 8000230:	b510      	push	{r4, lr}
 8000232:	4c06      	ldr	r4, [pc, #24]	; (800024c <__do_global_dtors_aux+0x1c>)
 8000234:	7823      	ldrb	r3, [r4, #0]
 8000236:	b943      	cbnz	r3, 800024a <__do_global_dtors_aux+0x1a>
 8000238:	f7ff ffda 	bl	80001f0 <deregister_tm_clones>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x20>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x16>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x24>)
 8000242:	f3af 8000 	nop.w
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000018 	.word	0x20000018
 8000250:	00000000 	.word	0x00000000
 8000254:	0800831c 	.word	0x0800831c

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b05      	ldr	r3, [pc, #20]	; (8000270 <frame_dummy+0x18>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4905      	ldr	r1, [pc, #20]	; (8000274 <frame_dummy+0x1c>)
 8000260:	4805      	ldr	r0, [pc, #20]	; (8000278 <frame_dummy+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800026a:	f7ff bfcf 	b.w	800020c <register_tm_clones>
 800026e:	bf00      	nop
 8000270:	00000000 	.word	0x00000000
 8000274:	2000001c 	.word	0x2000001c
 8000278:	0800831c 	.word	0x0800831c

0800027c <setDataReady>:
uint8_t RXone_Data[4] = {0,0,0,0};
uint8_t RXtwo_Data[4] = {0,0,0,0};
int milis = 0;
int counter = 0; //sample counter

void setDataReady(){
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	if(flipped){
 8000280:	4b13      	ldr	r3, [pc, #76]	; (80002d0 <setDataReady+0x54>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d021      	beq.n	80002cc <setDataReady+0x50>
		if(pin){
 8000288:	4b12      	ldr	r3, [pc, #72]	; (80002d4 <setDataReady+0x58>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d008      	beq.n	80002a2 <setDataReady+0x26>
			HAL_SPI_Receive_IT(&hspi1, RXone_Data, sizeof(RXone_Data));
 8000290:	2204      	movs	r2, #4
 8000292:	4911      	ldr	r1, [pc, #68]	; (80002d8 <setDataReady+0x5c>)
 8000294:	4811      	ldr	r0, [pc, #68]	; (80002dc <setDataReady+0x60>)
 8000296:	f005 f9eb 	bl	8005670 <HAL_SPI_Receive_IT>
			flipped = 0;
 800029a:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <setDataReady+0x54>)
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
			}
			HAL_SPI_Receive_IT(&hspi1, RXtwo_Data, sizeof(RXtwo_Data));
			flipped = 0;
		}
	}
}
 80002a0:	e014      	b.n	80002cc <setDataReady+0x50>
			if(flagone){
 80002a2:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <setDataReady+0x64>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d008      	beq.n	80002bc <setDataReady+0x40>
				milis = HAL_GetTick();
 80002aa:	f001 fb2f 	bl	800190c <HAL_GetTick>
 80002ae:	4603      	mov	r3, r0
 80002b0:	461a      	mov	r2, r3
 80002b2:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <setDataReady+0x68>)
 80002b4:	601a      	str	r2, [r3, #0]
				flagone = 0;
 80002b6:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <setDataReady+0x64>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
			HAL_SPI_Receive_IT(&hspi1, RXtwo_Data, sizeof(RXtwo_Data));
 80002bc:	2204      	movs	r2, #4
 80002be:	490a      	ldr	r1, [pc, #40]	; (80002e8 <setDataReady+0x6c>)
 80002c0:	4806      	ldr	r0, [pc, #24]	; (80002dc <setDataReady+0x60>)
 80002c2:	f005 f9d5 	bl	8005670 <HAL_SPI_Receive_IT>
			flipped = 0;
 80002c6:	4b02      	ldr	r3, [pc, #8]	; (80002d0 <setDataReady+0x54>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	20000008 	.word	0x20000008
 80002d4:	20000520 	.word	0x20000520
 80002d8:	20000528 	.word	0x20000528
 80002dc:	200001cc 	.word	0x200001cc
 80002e0:	20000000 	.word	0x20000000
 80002e4:	20000530 	.word	0x20000530
 80002e8:	2000052c 	.word	0x2000052c

080002ec <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
    if(pin){
 80002f4:	4b1d      	ldr	r3, [pc, #116]	; (800036c <HAL_SPI_RxCpltCallback+0x80>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d027      	beq.n	800034c <HAL_SPI_RxCpltCallback+0x60>
    	if(flagtwo){
 80002fc:	4b1c      	ldr	r3, [pc, #112]	; (8000370 <HAL_SPI_RxCpltCallback+0x84>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d017      	beq.n	8000334 <HAL_SPI_RxCpltCallback+0x48>
    		if(counter>50){
 8000304:	4b1b      	ldr	r3, [pc, #108]	; (8000374 <HAL_SPI_RxCpltCallback+0x88>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	2b32      	cmp	r3, #50	; 0x32
 800030a:	dd0e      	ble.n	800032a <HAL_SPI_RxCpltCallback+0x3e>
    		milis = HAL_GetTick() - milis; //get time for 1k samples
 800030c:	f001 fafe 	bl	800190c <HAL_GetTick>
 8000310:	4603      	mov	r3, r0
 8000312:	4a19      	ldr	r2, [pc, #100]	; (8000378 <HAL_SPI_RxCpltCallback+0x8c>)
 8000314:	6812      	ldr	r2, [r2, #0]
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	461a      	mov	r2, r3
 800031a:	4b17      	ldr	r3, [pc, #92]	; (8000378 <HAL_SPI_RxCpltCallback+0x8c>)
 800031c:	601a      	str	r2, [r3, #0]
    		flagtwo = 0;
 800031e:	4b14      	ldr	r3, [pc, #80]	; (8000370 <HAL_SPI_RxCpltCallback+0x84>)
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
    		flagger = 1;
 8000324:	4b15      	ldr	r3, [pc, #84]	; (800037c <HAL_SPI_RxCpltCallback+0x90>)
 8000326:	2201      	movs	r2, #1
 8000328:	601a      	str	r2, [r3, #0]
    		}
    		counter +=1;
 800032a:	4b12      	ldr	r3, [pc, #72]	; (8000374 <HAL_SPI_RxCpltCallback+0x88>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	3301      	adds	r3, #1
 8000330:	4a10      	ldr	r2, [pc, #64]	; (8000374 <HAL_SPI_RxCpltCallback+0x88>)
 8000332:	6013      	str	r3, [r2, #0]
    	}
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	2101      	movs	r1, #1
 8000338:	4811      	ldr	r0, [pc, #68]	; (8000380 <HAL_SPI_RxCpltCallback+0x94>)
 800033a:	f002 fde9 	bl	8002f10 <HAL_GPIO_WritePin>
    	pin = 0;
 800033e:	4b0b      	ldr	r3, [pc, #44]	; (800036c <HAL_SPI_RxCpltCallback+0x80>)
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
    	flipped = 1;
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <HAL_SPI_RxCpltCallback+0x98>)
 8000346:	2201      	movs	r2, #1
 8000348:	601a      	str	r2, [r3, #0]
    else{
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
    	pin = 1;
    	flipped = 1;
    }
}
 800034a:	e00a      	b.n	8000362 <HAL_SPI_RxCpltCallback+0x76>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800034c:	2201      	movs	r2, #1
 800034e:	2101      	movs	r1, #1
 8000350:	480b      	ldr	r0, [pc, #44]	; (8000380 <HAL_SPI_RxCpltCallback+0x94>)
 8000352:	f002 fddd 	bl	8002f10 <HAL_GPIO_WritePin>
    	pin = 1;
 8000356:	4b05      	ldr	r3, [pc, #20]	; (800036c <HAL_SPI_RxCpltCallback+0x80>)
 8000358:	2201      	movs	r2, #1
 800035a:	601a      	str	r2, [r3, #0]
    	flipped = 1;
 800035c:	4b09      	ldr	r3, [pc, #36]	; (8000384 <HAL_SPI_RxCpltCallback+0x98>)
 800035e:	2201      	movs	r2, #1
 8000360:	601a      	str	r2, [r3, #0]
}
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000520 	.word	0x20000520
 8000370:	20000004 	.word	0x20000004
 8000374:	20000534 	.word	0x20000534
 8000378:	20000530 	.word	0x20000530
 800037c:	20000524 	.word	0x20000524
 8000380:	48000800 	.word	0x48000800
 8000384:	20000008 	.word	0x20000008

08000388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800038e:	f001 fa54 	bl	800183a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000392:	f000 f849 	bl	8000428 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000396:	f000 f8ab 	bl	80004f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039a:	f000 fc77 	bl	8000c8c <MX_GPIO_Init>
  MX_ADC1_Init();
 800039e:	f000 f8d7 	bl	8000550 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80003a2:	f000 f939 	bl	8000618 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 80003a6:	f000 f96f 	bl	8000688 <MX_I2C1_Init>
  MX_I2C2_Init();
 80003aa:	f000 f9ad 	bl	8000708 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 80003ae:	f000 f9eb 	bl	8000788 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 80003b2:	f000 fa3f 	bl	8000834 <MX_SPI1_Init>
  MX_SPI3_Init();
 80003b6:	f000 fa7b 	bl	80008b0 <MX_SPI3_Init>
  MX_TIM3_Init();
 80003ba:	f000 fab7 	bl	800092c <MX_TIM3_Init>
  MX_UART4_Init();
 80003be:	f000 fb2b 	bl	8000a18 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80003c2:	f000 fb75 	bl	8000ab0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80003c6:	f000 fbbf 	bl	8000b48 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80003ca:	f000 fc0b 	bl	8000be4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80003ce:	f000 fc55 	bl	8000c7c <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  uint8_t RXone_Data_local[4];
  uint8_t RXtwo_Data_local[4];
  //int xd = 0;
  HAL_TIM_Base_Start(&htim3);
 80003d2:	480f      	ldr	r0, [pc, #60]	; (8000410 <main+0x88>)
 80003d4:	f005 ffa8 	bl	8006328 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80003d8:	210c      	movs	r1, #12
 80003da:	480d      	ldr	r0, [pc, #52]	; (8000410 <main+0x88>)
 80003dc:	f006 f86e 	bl	80064bc <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2101      	movs	r1, #1
 80003e4:	480b      	ldr	r0, [pc, #44]	; (8000414 <main+0x8c>)
 80003e6:	f002 fd93 	bl	8002f10 <HAL_GPIO_WritePin>
  //int milis = HAL_GetTick();

  int time = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
 80003ee:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <main+0x90>)
 80003f0:	681b      	ldr	r3, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 memcpy(RXone_Data_local, &RXone_Data, 4); //just copy the data into scope so it can be viewed in debugger
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <main+0x94>)
 80003f6:	681b      	ldr	r3, [r3, #0]
	 memcpy(RXtwo_Data_local, &RXtwo_Data, 4);
 80003f8:	607b      	str	r3, [r7, #4]
	 if(flagger){
 80003fa:	4b09      	ldr	r3, [pc, #36]	; (8000420 <main+0x98>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d0f5      	beq.n	80003ee <main+0x66>
		 //HAL_SPI_Receive(&hspi1, RX_Data, sizeof(RX_Data), 5000);
		 //HAL_Delay(5000);
		 time = milis;
 8000402:	4b08      	ldr	r3, [pc, #32]	; (8000424 <main+0x9c>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	60fb      	str	r3, [r7, #12]
		 flagger = 0;
 8000408:	4b05      	ldr	r3, [pc, #20]	; (8000420 <main+0x98>)
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
  {
 800040e:	e7ee      	b.n	80003ee <main+0x66>
 8000410:	20000294 	.word	0x20000294
 8000414:	48000800 	.word	0x48000800
 8000418:	20000528 	.word	0x20000528
 800041c:	2000052c 	.word	0x2000052c
 8000420:	20000524 	.word	0x20000524
 8000424:	20000530 	.word	0x20000530

08000428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b096      	sub	sp, #88	; 0x58
 800042c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042e:	f107 0314 	add.w	r3, r7, #20
 8000432:	2244      	movs	r2, #68	; 0x44
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f007 fe04 	bl	8008044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800043c:	463b      	mov	r3, r7
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
 8000448:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800044a:	2000      	movs	r0, #0
 800044c:	f003 fbc8 	bl	8003be0 <HAL_PWREx_ControlVoltageScaling>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000456:	f000 fd6f 	bl	8000f38 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800045a:	f003 fb91 	bl	8003b80 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800045e:	4b23      	ldr	r3, [pc, #140]	; (80004ec <SystemClock_Config+0xc4>)
 8000460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000464:	4a21      	ldr	r2, [pc, #132]	; (80004ec <SystemClock_Config+0xc4>)
 8000466:	f023 0318 	bic.w	r3, r3, #24
 800046a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800046e:	2314      	movs	r3, #20
 8000470:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000472:	2301      	movs	r3, #1
 8000474:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000476:	2301      	movs	r3, #1
 8000478:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800047a:	2300      	movs	r3, #0
 800047c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800047e:	2360      	movs	r3, #96	; 0x60
 8000480:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000482:	2302      	movs	r3, #2
 8000484:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000486:	2301      	movs	r3, #1
 8000488:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800048a:	2301      	movs	r3, #1
 800048c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800048e:	233c      	movs	r3, #60	; 0x3c
 8000490:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000492:	2302      	movs	r3, #2
 8000494:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000496:	2302      	movs	r3, #2
 8000498:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800049a:	2302      	movs	r3, #2
 800049c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049e:	f107 0314 	add.w	r3, r7, #20
 80004a2:	4618      	mov	r0, r3
 80004a4:	f003 fc40 	bl	8003d28 <HAL_RCC_OscConfig>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80004ae:	f000 fd43 	bl	8000f38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b2:	230f      	movs	r3, #15
 80004b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b6:	2303      	movs	r3, #3
 80004b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80004be:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80004c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80004c4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80004c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80004ca:	463b      	mov	r3, r7
 80004cc:	2105      	movs	r1, #5
 80004ce:	4618      	mov	r0, r3
 80004d0:	f004 f844 	bl	800455c <HAL_RCC_ClockConfig>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80004da:	f000 fd2d 	bl	8000f38 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80004de:	f004 fe2b 	bl	8005138 <HAL_RCCEx_EnableMSIPLLMode>
}
 80004e2:	bf00      	nop
 80004e4:	3758      	adds	r7, #88	; 0x58
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40021000 	.word	0x40021000

080004f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b0a6      	sub	sp, #152	; 0x98
 80004f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2294      	movs	r2, #148	; 0x94
 80004fa:	2100      	movs	r1, #0
 80004fc:	4618      	mov	r0, r3
 80004fe:	f007 fda1 	bl	8008044 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8000502:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000506:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000510:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000514:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000516:	2301      	movs	r3, #1
 8000518:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800051a:	2301      	movs	r3, #1
 800051c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800051e:	2318      	movs	r3, #24
 8000520:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000522:	2302      	movs	r3, #2
 8000524:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000526:	2302      	movs	r3, #2
 8000528:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800052a:	2302      	movs	r3, #2
 800052c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800052e:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000532:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	4618      	mov	r0, r3
 8000538:	f004 face 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000542:	f000 fcf9 	bl	8000f38 <Error_Handler>
  }
}
 8000546:	bf00      	nop
 8000548:	3798      	adds	r7, #152	; 0x98
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
	...

08000550 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000556:	463b      	mov	r3, r7
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
 8000564:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000566:	4b29      	ldr	r3, [pc, #164]	; (800060c <MX_ADC1_Init+0xbc>)
 8000568:	4a29      	ldr	r2, [pc, #164]	; (8000610 <MX_ADC1_Init+0xc0>)
 800056a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800056c:	4b27      	ldr	r3, [pc, #156]	; (800060c <MX_ADC1_Init+0xbc>)
 800056e:	2200      	movs	r2, #0
 8000570:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000572:	4b26      	ldr	r3, [pc, #152]	; (800060c <MX_ADC1_Init+0xbc>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000578:	4b24      	ldr	r3, [pc, #144]	; (800060c <MX_ADC1_Init+0xbc>)
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800057e:	4b23      	ldr	r3, [pc, #140]	; (800060c <MX_ADC1_Init+0xbc>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000584:	4b21      	ldr	r3, [pc, #132]	; (800060c <MX_ADC1_Init+0xbc>)
 8000586:	2204      	movs	r2, #4
 8000588:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800058a:	4b20      	ldr	r3, [pc, #128]	; (800060c <MX_ADC1_Init+0xbc>)
 800058c:	2200      	movs	r2, #0
 800058e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000590:	4b1e      	ldr	r3, [pc, #120]	; (800060c <MX_ADC1_Init+0xbc>)
 8000592:	2200      	movs	r2, #0
 8000594:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000596:	4b1d      	ldr	r3, [pc, #116]	; (800060c <MX_ADC1_Init+0xbc>)
 8000598:	2201      	movs	r2, #1
 800059a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <MX_ADC1_Init+0xbc>)
 800059e:	2200      	movs	r2, #0
 80005a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005a4:	4b19      	ldr	r3, [pc, #100]	; (800060c <MX_ADC1_Init+0xbc>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005aa:	4b18      	ldr	r3, [pc, #96]	; (800060c <MX_ADC1_Init+0xbc>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <MX_ADC1_Init+0xbc>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005b8:	4b14      	ldr	r3, [pc, #80]	; (800060c <MX_ADC1_Init+0xbc>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005be:	4b13      	ldr	r3, [pc, #76]	; (800060c <MX_ADC1_Init+0xbc>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005c6:	4811      	ldr	r0, [pc, #68]	; (800060c <MX_ADC1_Init+0xbc>)
 80005c8:	f001 fb4c 	bl	8001c64 <HAL_ADC_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80005d2:	f000 fcb1 	bl	8000f38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <MX_ADC1_Init+0xc4>)
 80005d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005da:	2306      	movs	r3, #6
 80005dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005de:	2300      	movs	r3, #0
 80005e0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005e2:	237f      	movs	r3, #127	; 0x7f
 80005e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005e6:	2304      	movs	r3, #4
 80005e8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ee:	463b      	mov	r3, r7
 80005f0:	4619      	mov	r1, r3
 80005f2:	4806      	ldr	r0, [pc, #24]	; (800060c <MX_ADC1_Init+0xbc>)
 80005f4:	f001 fc82 	bl	8001efc <HAL_ADC_ConfigChannel>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005fe:	f000 fc9b 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	3718      	adds	r7, #24
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000034 	.word	0x20000034
 8000610:	50040000 	.word	0x50040000
 8000614:	36902000 	.word	0x36902000

08000618 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 800061c:	4b18      	ldr	r3, [pc, #96]	; (8000680 <MX_DFSDM1_Init+0x68>)
 800061e:	4a19      	ldr	r2, [pc, #100]	; (8000684 <MX_DFSDM1_Init+0x6c>)
 8000620:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000622:	4b17      	ldr	r3, [pc, #92]	; (8000680 <MX_DFSDM1_Init+0x68>)
 8000624:	2201      	movs	r2, #1
 8000626:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_DFSDM1_Init+0x68>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 800062e:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_DFSDM1_Init+0x68>)
 8000630:	2202      	movs	r2, #2
 8000632:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_DFSDM1_Init+0x68>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_DFSDM1_Init+0x68>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_DFSDM1_Init+0x68>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_DFSDM1_Init+0x68>)
 8000648:	2200      	movs	r2, #0
 800064a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_DFSDM1_Init+0x68>)
 800064e:	2204      	movs	r2, #4
 8000650:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_DFSDM1_Init+0x68>)
 8000654:	2200      	movs	r2, #0
 8000656:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_DFSDM1_Init+0x68>)
 800065a:	2201      	movs	r2, #1
 800065c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_DFSDM1_Init+0x68>)
 8000660:	2200      	movs	r2, #0
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_DFSDM1_Init+0x68>)
 8000666:	2200      	movs	r2, #0
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_DFSDM1_Init+0x68>)
 800066c:	f002 f952 	bl	8002914 <HAL_DFSDM_ChannelInit>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000676:	f000 fc5f 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000009c 	.word	0x2000009c
 8000684:	40016040 	.word	0x40016040

08000688 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800068c:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <MX_I2C1_Init+0x74>)
 800068e:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <MX_I2C1_Init+0x78>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00101B29;
 8000692:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <MX_I2C1_Init+0x74>)
 8000694:	4a1b      	ldr	r2, [pc, #108]	; (8000704 <MX_I2C1_Init+0x7c>)
 8000696:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000698:	4b18      	ldr	r3, [pc, #96]	; (80006fc <MX_I2C1_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <MX_I2C1_Init+0x74>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_I2C1_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_I2C1_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_I2C1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c2:	480e      	ldr	r0, [pc, #56]	; (80006fc <MX_I2C1_Init+0x74>)
 80006c4:	f002 fc5f 	bl	8002f86 <HAL_I2C_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006ce:	f000 fc33 	bl	8000f38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006d2:	2100      	movs	r1, #0
 80006d4:	4809      	ldr	r0, [pc, #36]	; (80006fc <MX_I2C1_Init+0x74>)
 80006d6:	f002 fce5 	bl	80030a4 <HAL_I2CEx_ConfigAnalogFilter>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006e0:	f000 fc2a 	bl	8000f38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006e4:	2100      	movs	r1, #0
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_I2C1_Init+0x74>)
 80006e8:	f002 fd27 	bl	800313a <HAL_I2CEx_ConfigDigitalFilter>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006f2:	f000 fc21 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000d4 	.word	0x200000d4
 8000700:	40005400 	.word	0x40005400
 8000704:	00101b29 	.word	0x00101b29

08000708 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_I2C2_Init+0x74>)
 800070e:	4a1c      	ldr	r2, [pc, #112]	; (8000780 <MX_I2C2_Init+0x78>)
 8000710:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00101B29;
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_I2C2_Init+0x74>)
 8000714:	4a1b      	ldr	r2, [pc, #108]	; (8000784 <MX_I2C2_Init+0x7c>)
 8000716:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_I2C2_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_I2C2_Init+0x74>)
 8000720:	2201      	movs	r2, #1
 8000722:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_I2C2_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_I2C2_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_I2C2_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_I2C2_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_I2C2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000742:	480e      	ldr	r0, [pc, #56]	; (800077c <MX_I2C2_Init+0x74>)
 8000744:	f002 fc1f 	bl	8002f86 <HAL_I2C_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800074e:	f000 fbf3 	bl	8000f38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000752:	2100      	movs	r1, #0
 8000754:	4809      	ldr	r0, [pc, #36]	; (800077c <MX_I2C2_Init+0x74>)
 8000756:	f002 fca5 	bl	80030a4 <HAL_I2CEx_ConfigAnalogFilter>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000760:	f000 fbea 	bl	8000f38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000764:	2100      	movs	r1, #0
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_I2C2_Init+0x74>)
 8000768:	f002 fce7 	bl	800313a <HAL_I2CEx_ConfigDigitalFilter>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000772:	f000 fbe1 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000128 	.word	0x20000128
 8000780:	40005800 	.word	0x40005800
 8000784:	00101b29 	.word	0x00101b29

08000788 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 800079c:	4b23      	ldr	r3, [pc, #140]	; (800082c <MX_OCTOSPI1_Init+0xa4>)
 800079e:	4a24      	ldr	r2, [pc, #144]	; (8000830 <MX_OCTOSPI1_Init+0xa8>)
 80007a0:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80007a2:	4b22      	ldr	r3, [pc, #136]	; (800082c <MX_OCTOSPI1_Init+0xa4>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80007a8:	4b20      	ldr	r3, [pc, #128]	; (800082c <MX_OCTOSPI1_Init+0xa4>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <MX_OCTOSPI1_Init+0xa4>)
 80007b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007b4:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_OCTOSPI1_Init+0xa4>)
 80007b8:	2220      	movs	r2, #32
 80007ba:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_OCTOSPI1_Init+0xa4>)
 80007be:	2201      	movs	r2, #1
 80007c0:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_OCTOSPI1_Init+0xa4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_OCTOSPI1_Init+0xa4>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_OCTOSPI1_Init+0xa4>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_OCTOSPI1_Init+0xa4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_OCTOSPI1_Init+0xa4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_OCTOSPI1_Init+0xa4>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_OCTOSPI1_Init+0xa4>)
 80007e8:	2208      	movs	r2, #8
 80007ea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80007ec:	480f      	ldr	r0, [pc, #60]	; (800082c <MX_OCTOSPI1_Init+0xa4>)
 80007ee:	f002 fcf1 	bl	80031d4 <HAL_OSPI_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 80007f8:	f000 fb9e 	bl	8000f38 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 80007fc:	2301      	movs	r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000800:	2301      	movs	r3, #1
 8000802:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000804:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000808:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <MX_OCTOSPI1_Init+0xa4>)
 8000814:	f002 fd98 	bl	8003348 <HAL_OSPIM_Config>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 800081e:	f000 fb8b 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000017c 	.word	0x2000017c
 8000830:	a0001000 	.word	0xa0001000

08000834 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_SPI1_Init+0x74>)
 800083a:	4a1c      	ldr	r2, [pc, #112]	; (80008ac <MX_SPI1_Init+0x78>)
 800083c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_SPI1_Init+0x74>)
 8000840:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000844:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_SPI1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800084c:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <MX_SPI1_Init+0x74>)
 800084e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000852:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_SPI1_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_SPI1_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_SPI1_Init+0x74>)
 8000862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000866:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_SPI1_Init+0x74>)
 800086a:	2208      	movs	r2, #8
 800086c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_SPI1_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_SPI1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_SPI1_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_SPI1_Init+0x74>)
 8000882:	2207      	movs	r2, #7
 8000884:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <MX_SPI1_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_SPI1_Init+0x74>)
 800088e:	2208      	movs	r2, #8
 8000890:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_SPI1_Init+0x74>)
 8000894:	f004 fe48 	bl	8005528 <HAL_SPI_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800089e:	f000 fb4b 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200001cc 	.word	0x200001cc
 80008ac:	40013000 	.word	0x40013000

080008b0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <MX_SPI3_Init+0x74>)
 80008b6:	4a1c      	ldr	r2, [pc, #112]	; (8000928 <MX_SPI3_Init+0x78>)
 80008b8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_SPI3_Init+0x74>)
 80008bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008c0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008c2:	4b18      	ldr	r3, [pc, #96]	; (8000924 <MX_SPI3_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <MX_SPI3_Init+0x74>)
 80008ca:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008ce:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_SPI3_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_SPI3_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_SPI3_Init+0x74>)
 80008de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_SPI3_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_SPI3_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_SPI3_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_SPI3_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_SPI3_Init+0x74>)
 80008fe:	2207      	movs	r2, #7
 8000900:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_SPI3_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_SPI3_Init+0x74>)
 800090a:	2208      	movs	r2, #8
 800090c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_SPI3_Init+0x74>)
 8000910:	f004 fe0a 	bl	8005528 <HAL_SPI_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800091a:	f000 fb0d 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000230 	.word	0x20000230
 8000928:	40003c00 	.word	0x40003c00

0800092c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	; 0x38
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000932:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094c:	463b      	mov	r3, r7
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
 800095a:	615a      	str	r2, [r3, #20]
 800095c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800095e:	4b2c      	ldr	r3, [pc, #176]	; (8000a10 <MX_TIM3_Init+0xe4>)
 8000960:	4a2c      	ldr	r2, [pc, #176]	; (8000a14 <MX_TIM3_Init+0xe8>)
 8000962:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000964:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <MX_TIM3_Init+0xe4>)
 8000966:	2200      	movs	r2, #0
 8000968:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <MX_TIM3_Init+0xe4>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2;
 8000970:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <MX_TIM3_Init+0xe4>)
 8000972:	2202      	movs	r2, #2
 8000974:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000976:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <MX_TIM3_Init+0xe4>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097c:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <MX_TIM3_Init+0xe4>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000982:	4823      	ldr	r0, [pc, #140]	; (8000a10 <MX_TIM3_Init+0xe4>)
 8000984:	f005 fc78 	bl	8006278 <HAL_TIM_Base_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800098e:	f000 fad3 	bl	8000f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000998:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800099c:	4619      	mov	r1, r3
 800099e:	481c      	ldr	r0, [pc, #112]	; (8000a10 <MX_TIM3_Init+0xe4>)
 80009a0:	f005 ffa6 	bl	80068f0 <HAL_TIM_ConfigClockSource>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80009aa:	f000 fac5 	bl	8000f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009ae:	4818      	ldr	r0, [pc, #96]	; (8000a10 <MX_TIM3_Init+0xe4>)
 80009b0:	f005 fd22 	bl	80063f8 <HAL_TIM_PWM_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80009ba:	f000 fabd 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4810      	ldr	r0, [pc, #64]	; (8000a10 <MX_TIM3_Init+0xe4>)
 80009ce:	f006 fc89 	bl	80072e4 <HAL_TIMEx_MasterConfigSynchronization>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80009d8:	f000 faae 	bl	8000f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009dc:	2360      	movs	r3, #96	; 0x60
 80009de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 80009e0:	2301      	movs	r3, #1
 80009e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80009e8:	2304      	movs	r3, #4
 80009ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009ec:	463b      	mov	r3, r7
 80009ee:	220c      	movs	r2, #12
 80009f0:	4619      	mov	r1, r3
 80009f2:	4807      	ldr	r0, [pc, #28]	; (8000a10 <MX_TIM3_Init+0xe4>)
 80009f4:	f005 fe68 	bl	80066c8 <HAL_TIM_PWM_ConfigChannel>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80009fe:	f000 fa9b 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a02:	4803      	ldr	r0, [pc, #12]	; (8000a10 <MX_TIM3_Init+0xe4>)
 8000a04:	f000 fd12 	bl	800142c <HAL_TIM_MspPostInit>

}
 8000a08:	bf00      	nop
 8000a0a:	3738      	adds	r7, #56	; 0x38
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000294 	.word	0x20000294
 8000a14:	40000400 	.word	0x40000400

08000a18 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a1c:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <MX_UART4_Init+0x90>)
 8000a1e:	4a23      	ldr	r2, [pc, #140]	; (8000aac <MX_UART4_Init+0x94>)
 8000a20:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a22:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <MX_UART4_Init+0x90>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <MX_UART4_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <MX_UART4_Init+0x90>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <MX_UART4_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_UART4_Init+0x90>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_UART4_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_UART4_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_UART4_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_UART4_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_UART4_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a60:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <MX_UART4_Init+0x90>)
 8000a62:	f006 fcc7 	bl	80073f4 <HAL_UART_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000a6c:	f000 fa64 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a70:	2100      	movs	r1, #0
 8000a72:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <MX_UART4_Init+0x90>)
 8000a74:	f007 f9f8 	bl	8007e68 <HAL_UARTEx_SetTxFifoThreshold>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000a7e:	f000 fa5b 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a82:	2100      	movs	r1, #0
 8000a84:	4808      	ldr	r0, [pc, #32]	; (8000aa8 <MX_UART4_Init+0x90>)
 8000a86:	f007 fa2d 	bl	8007ee4 <HAL_UARTEx_SetRxFifoThreshold>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000a90:	f000 fa52 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_UART4_Init+0x90>)
 8000a96:	f007 f9ae 	bl	8007df6 <HAL_UARTEx_DisableFifoMode>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000aa0:	f000 fa4a 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	200002e0 	.word	0x200002e0
 8000aac:	40004c00 	.word	0x40004c00

08000ab0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab4:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000ab6:	4a23      	ldr	r2, [pc, #140]	; (8000b44 <MX_USART1_UART_Init+0x94>)
 8000ab8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aba:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae6:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000af8:	4811      	ldr	r0, [pc, #68]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000afa:	f006 fc7b 	bl	80073f4 <HAL_UART_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b04:	f000 fa18 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b08:	2100      	movs	r1, #0
 8000b0a:	480d      	ldr	r0, [pc, #52]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000b0c:	f007 f9ac 	bl	8007e68 <HAL_UARTEx_SetTxFifoThreshold>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b16:	f000 fa0f 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4808      	ldr	r0, [pc, #32]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000b1e:	f007 f9e1 	bl	8007ee4 <HAL_UARTEx_SetRxFifoThreshold>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b28:	f000 fa06 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <MX_USART1_UART_Init+0x90>)
 8000b2e:	f007 f962 	bl	8007df6 <HAL_UARTEx_DisableFifoMode>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b38:	f000 f9fe 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000370 	.word	0x20000370
 8000b44:	40013800 	.word	0x40013800

08000b48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b4c:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <MX_USART2_UART_Init+0x94>)
 8000b4e:	4a24      	ldr	r2, [pc, #144]	; (8000be0 <MX_USART2_UART_Init+0x98>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b52:	4b22      	ldr	r3, [pc, #136]	; (8000bdc <MX_USART2_UART_Init+0x94>)
 8000b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <MX_USART2_UART_Init+0x94>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b1e      	ldr	r3, [pc, #120]	; (8000bdc <MX_USART2_UART_Init+0x94>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <MX_USART2_UART_Init+0x94>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <MX_USART2_UART_Init+0x94>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000b72:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <MX_USART2_UART_Init+0x94>)
 8000b74:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b78:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <MX_USART2_UART_Init+0x94>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <MX_USART2_UART_Init+0x94>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <MX_USART2_UART_Init+0x94>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <MX_USART2_UART_Init+0x94>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b92:	4812      	ldr	r0, [pc, #72]	; (8000bdc <MX_USART2_UART_Init+0x94>)
 8000b94:	f006 fc2e 	bl	80073f4 <HAL_UART_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000b9e:	f000 f9cb 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <MX_USART2_UART_Init+0x94>)
 8000ba6:	f007 f95f 	bl	8007e68 <HAL_UARTEx_SetTxFifoThreshold>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000bb0:	f000 f9c2 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4809      	ldr	r0, [pc, #36]	; (8000bdc <MX_USART2_UART_Init+0x94>)
 8000bb8:	f007 f994 	bl	8007ee4 <HAL_UARTEx_SetRxFifoThreshold>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000bc2:	f000 f9b9 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_USART2_UART_Init+0x94>)
 8000bc8:	f007 f915 	bl	8007df6 <HAL_UARTEx_DisableFifoMode>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000bd2:	f000 f9b1 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000400 	.word	0x20000400
 8000be0:	40004400 	.word	0x40004400

08000be4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000be8:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000bea:	4a23      	ldr	r2, [pc, #140]	; (8000c78 <MX_USART3_UART_Init+0x94>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c2c:	4811      	ldr	r0, [pc, #68]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c2e:	f006 fbe1 	bl	80073f4 <HAL_UART_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c38:	f000 f97e 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	480d      	ldr	r0, [pc, #52]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c40:	f007 f912 	bl	8007e68 <HAL_UARTEx_SetTxFifoThreshold>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c4a:	f000 f975 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4808      	ldr	r0, [pc, #32]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c52:	f007 f947 	bl	8007ee4 <HAL_UARTEx_SetRxFifoThreshold>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c5c:	f000 f96c 	bl	8000f38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c62:	f007 f8c8 	bl	8007df6 <HAL_UARTEx_DisableFifoMode>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c6c:	f000 f964 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000490 	.word	0x20000490
 8000c78:	40004800 	.word	0x40004800

08000c7c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca2:	4ba0      	ldr	r3, [pc, #640]	; (8000f24 <MX_GPIO_Init+0x298>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	4a9f      	ldr	r2, [pc, #636]	; (8000f24 <MX_GPIO_Init+0x298>)
 8000ca8:	f043 0310 	orr.w	r3, r3, #16
 8000cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cae:	4b9d      	ldr	r3, [pc, #628]	; (8000f24 <MX_GPIO_Init+0x298>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	f003 0310 	and.w	r3, r3, #16
 8000cb6:	61bb      	str	r3, [r7, #24]
 8000cb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	4b9a      	ldr	r3, [pc, #616]	; (8000f24 <MX_GPIO_Init+0x298>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	4a99      	ldr	r2, [pc, #612]	; (8000f24 <MX_GPIO_Init+0x298>)
 8000cc0:	f043 0304 	orr.w	r3, r3, #4
 8000cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc6:	4b97      	ldr	r3, [pc, #604]	; (8000f24 <MX_GPIO_Init+0x298>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	f003 0304 	and.w	r3, r3, #4
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd2:	4b94      	ldr	r3, [pc, #592]	; (8000f24 <MX_GPIO_Init+0x298>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	4a93      	ldr	r2, [pc, #588]	; (8000f24 <MX_GPIO_Init+0x298>)
 8000cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cde:	4b91      	ldr	r3, [pc, #580]	; (8000f24 <MX_GPIO_Init+0x298>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b8e      	ldr	r3, [pc, #568]	; (8000f24 <MX_GPIO_Init+0x298>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	4a8d      	ldr	r2, [pc, #564]	; (8000f24 <MX_GPIO_Init+0x298>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf6:	4b8b      	ldr	r3, [pc, #556]	; (8000f24 <MX_GPIO_Init+0x298>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	4b88      	ldr	r3, [pc, #544]	; (8000f24 <MX_GPIO_Init+0x298>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	4a87      	ldr	r2, [pc, #540]	; (8000f24 <MX_GPIO_Init+0x298>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0e:	4b85      	ldr	r3, [pc, #532]	; (8000f24 <MX_GPIO_Init+0x298>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1a:	4b82      	ldr	r3, [pc, #520]	; (8000f24 <MX_GPIO_Init+0x298>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	4a81      	ldr	r2, [pc, #516]	; (8000f24 <MX_GPIO_Init+0x298>)
 8000d20:	f043 0308 	orr.w	r3, r3, #8
 8000d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d26:	4b7f      	ldr	r3, [pc, #508]	; (8000f24 <MX_GPIO_Init+0x298>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	f003 0308 	and.w	r3, r3, #8
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f240 1105 	movw	r1, #261	; 0x105
 8000d38:	487b      	ldr	r0, [pc, #492]	; (8000f28 <MX_GPIO_Init+0x29c>)
 8000d3a:	f002 f8e9 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f240 214f 	movw	r1, #591	; 0x24f
 8000d44:	4879      	ldr	r0, [pc, #484]	; (8000f2c <MX_GPIO_Init+0x2a0>)
 8000d46:	f002 f8e3 	bl	8002f10 <HAL_GPIO_WritePin>
                          |VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f248 110c 	movw	r1, #33036	; 0x810c
 8000d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d54:	f002 f8dc 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f24f 0134 	movw	r1, #61492	; 0xf034
 8000d5e:	4874      	ldr	r0, [pc, #464]	; (8000f30 <MX_GPIO_Init+0x2a4>)
 8000d60:	f002 f8d6 	bl	8002f10 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f242 0183 	movw	r1, #8323	; 0x2083
 8000d6a:	4872      	ldr	r0, [pc, #456]	; (8000f34 <MX_GPIO_Init+0x2a8>)
 8000d6c:	f002 f8d0 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000d70:	f240 1305 	movw	r3, #261	; 0x105
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	4867      	ldr	r0, [pc, #412]	; (8000f28 <MX_GPIO_Init+0x29c>)
 8000d8a:	f001 ff2f 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000d8e:	236a      	movs	r3, #106	; 0x6a
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d9c:	f107 031c 	add.w	r3, r7, #28
 8000da0:	4619      	mov	r1, r3
 8000da2:	4861      	ldr	r0, [pc, #388]	; (8000f28 <MX_GPIO_Init+0x29c>)
 8000da4:	f001 ff22 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000da8:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000db2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	485b      	ldr	r0, [pc, #364]	; (8000f2c <MX_GPIO_Init+0x2a0>)
 8000dc0:	f001 ff14 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd4:	f107 031c 	add.w	r3, r7, #28
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4854      	ldr	r0, [pc, #336]	; (8000f2c <MX_GPIO_Init+0x2a0>)
 8000ddc:	f001 ff06 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000de0:	f248 130c 	movw	r3, #33036	; 0x810c
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfc:	f001 fef6 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pin : D7_Pin */
  GPIO_InitStruct.Pin = D7_Pin;
 8000e00:	2310      	movs	r3, #16
 8000e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e04:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e18:	f001 fee8 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e20:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	4619      	mov	r1, r3
 8000e30:	483f      	ldr	r0, [pc, #252]	; (8000f30 <MX_GPIO_Init+0x2a4>)
 8000e32:	f001 fedb 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e36:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000e3a:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4838      	ldr	r0, [pc, #224]	; (8000f30 <MX_GPIO_Init+0x2a4>)
 8000e50:	f001 fecc 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8000e54:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8000e58:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e5a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4832      	ldr	r0, [pc, #200]	; (8000f34 <MX_GPIO_Init+0x2a8>)
 8000e6c:	f001 febe 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8000e70:	f242 0383 	movw	r3, #8323	; 0x2083
 8000e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4619      	mov	r1, r3
 8000e88:	482a      	ldr	r0, [pc, #168]	; (8000f34 <MX_GPIO_Init+0x2a8>)
 8000e8a:	f001 feaf 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000e8e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4821      	ldr	r0, [pc, #132]	; (8000f2c <MX_GPIO_Init+0x2a0>)
 8000ea8:	f001 fea0 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 031c 	add.w	r3, r7, #28
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec4:	f001 fe92 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000ec8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000eda:	230a      	movs	r3, #10
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee8:	f001 fe80 	bl	8002bec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2100      	movs	r1, #0
 8000ef0:	200a      	movs	r0, #10
 8000ef2:	f001 fcd8 	bl	80028a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ef6:	200a      	movs	r0, #10
 8000ef8:	f001 fcf1 	bl	80028de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2100      	movs	r1, #0
 8000f00:	2017      	movs	r0, #23
 8000f02:	f001 fcd0 	bl	80028a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f06:	2017      	movs	r0, #23
 8000f08:	f001 fce9 	bl	80028de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2028      	movs	r0, #40	; 0x28
 8000f12:	f001 fcc8 	bl	80028a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f16:	2028      	movs	r0, #40	; 0x28
 8000f18:	f001 fce1 	bl	80028de <HAL_NVIC_EnableIRQ>

}
 8000f1c:	bf00      	nop
 8000f1e:	3730      	adds	r7, #48	; 0x30
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40021000 	.word	0x40021000
 8000f28:	48001000 	.word	0x48001000
 8000f2c:	48000800 	.word	0x48000800
 8000f30:	48000400 	.word	0x48000400
 8000f34:	48000c00 	.word	0x48000c00

08000f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3c:	b672      	cpsid	i
}
 8000f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <Error_Handler+0x8>
	...

08000f44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <HAL_MspInit+0x44>)
 8000f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f4e:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <HAL_MspInit+0x44>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6613      	str	r3, [r2, #96]	; 0x60
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <HAL_MspInit+0x44>)
 8000f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <HAL_MspInit+0x44>)
 8000f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f66:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <HAL_MspInit+0x44>)
 8000f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_MspInit+0x44>)
 8000f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000

08000f8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a15      	ldr	r2, [pc, #84]	; (8001000 <HAL_ADC_MspInit+0x74>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d123      	bne.n	8000ff6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_ADC_MspInit+0x78>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	4a14      	ldr	r2, [pc, #80]	; (8001004 <HAL_ADC_MspInit+0x78>)
 8000fb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fba:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_ADC_MspInit+0x78>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <HAL_ADC_MspInit+0x78>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <HAL_ADC_MspInit+0x78>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <HAL_ADC_MspInit+0x78>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8000fde:	2330      	movs	r3, #48	; 0x30
 8000fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fe2:	230b      	movs	r3, #11
 8000fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <HAL_ADC_MspInit+0x7c>)
 8000ff2:	f001 fdfb 	bl	8002bec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	; 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	50040000 	.word	0x50040000
 8001004:	40021000 	.word	0x40021000
 8001008:	48000800 	.word	0x48000800

0800100c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b0ae      	sub	sp, #184	; 0xb8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	2294      	movs	r2, #148	; 0x94
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f007 f809 	bl	8008044 <memset>
  if(DFSDM1_Init == 0)
 8001032:	4b25      	ldr	r3, [pc, #148]	; (80010c8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d142      	bne.n	80010c0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800103a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800103e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001040:	2300      	movs	r3, #0
 8001042:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001046:	f107 0310 	add.w	r3, r7, #16
 800104a:	4618      	mov	r0, r3
 800104c:	f003 fd44 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001056:	f7ff ff6f 	bl	8000f38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800105a:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 800105c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105e:	4a1b      	ldr	r2, [pc, #108]	; (80010cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001060:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001064:	6613      	str	r3, [r2, #96]	; 0x60
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	4a15      	ldr	r2, [pc, #84]	; (80010cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001078:	f043 0310 	orr.w	r3, r3, #16
 800107c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	f003 0310 	and.w	r3, r3, #16
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800108a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800108e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80010a4:	2306      	movs	r3, #6
 80010a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010ae:	4619      	mov	r1, r3
 80010b0:	4807      	ldr	r0, [pc, #28]	; (80010d0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80010b2:	f001 fd9b 	bl	8002bec <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	4a02      	ldr	r2, [pc, #8]	; (80010c8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010be:	6013      	str	r3, [r2, #0]
  }

}
 80010c0:	bf00      	nop
 80010c2:	37b8      	adds	r7, #184	; 0xb8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000538 	.word	0x20000538
 80010cc:	40021000 	.word	0x40021000
 80010d0:	48001000 	.word	0x48001000

080010d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0b0      	sub	sp, #192	; 0xc0
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ec:	f107 0318 	add.w	r3, r7, #24
 80010f0:	2294      	movs	r2, #148	; 0x94
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f006 ffa5 	bl	8008044 <memset>
  if(hi2c->Instance==I2C1)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a42      	ldr	r2, [pc, #264]	; (8001208 <HAL_I2C_MspInit+0x134>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d13c      	bne.n	800117e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001104:	2340      	movs	r3, #64	; 0x40
 8001106:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001108:	2300      	movs	r3, #0
 800110a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110c:	f107 0318 	add.w	r3, r7, #24
 8001110:	4618      	mov	r0, r3
 8001112:	f003 fce1 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800111c:	f7ff ff0c 	bl	8000f38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001120:	4b3a      	ldr	r3, [pc, #232]	; (800120c <HAL_I2C_MspInit+0x138>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	4a39      	ldr	r2, [pc, #228]	; (800120c <HAL_I2C_MspInit+0x138>)
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112c:	4b37      	ldr	r3, [pc, #220]	; (800120c <HAL_I2C_MspInit+0x138>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001138:	f44f 7340 	mov.w	r3, #768	; 0x300
 800113c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001140:	2312      	movs	r3, #18
 8001142:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001146:	2301      	movs	r3, #1
 8001148:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001152:	2304      	movs	r3, #4
 8001154:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800115c:	4619      	mov	r1, r3
 800115e:	482c      	ldr	r0, [pc, #176]	; (8001210 <HAL_I2C_MspInit+0x13c>)
 8001160:	f001 fd44 	bl	8002bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001164:	4b29      	ldr	r3, [pc, #164]	; (800120c <HAL_I2C_MspInit+0x138>)
 8001166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001168:	4a28      	ldr	r2, [pc, #160]	; (800120c <HAL_I2C_MspInit+0x138>)
 800116a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800116e:	6593      	str	r3, [r2, #88]	; 0x58
 8001170:	4b26      	ldr	r3, [pc, #152]	; (800120c <HAL_I2C_MspInit+0x138>)
 8001172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800117c:	e040      	b.n	8001200 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a24      	ldr	r2, [pc, #144]	; (8001214 <HAL_I2C_MspInit+0x140>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d13b      	bne.n	8001200 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800118c:	2300      	movs	r3, #0
 800118e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001190:	f107 0318 	add.w	r3, r7, #24
 8001194:	4618      	mov	r0, r3
 8001196:	f003 fc9f 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80011a0:	f7ff feca 	bl	8000f38 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_I2C_MspInit+0x138>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	4a18      	ldr	r2, [pc, #96]	; (800120c <HAL_I2C_MspInit+0x138>)
 80011aa:	f043 0302 	orr.w	r3, r3, #2
 80011ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_I2C_MspInit+0x138>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80011bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c4:	2312      	movs	r3, #18
 80011c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011d6:	2304      	movs	r3, #4
 80011d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011e0:	4619      	mov	r1, r3
 80011e2:	480b      	ldr	r0, [pc, #44]	; (8001210 <HAL_I2C_MspInit+0x13c>)
 80011e4:	f001 fd02 	bl	8002bec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <HAL_I2C_MspInit+0x138>)
 80011ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <HAL_I2C_MspInit+0x138>)
 80011ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f2:	6593      	str	r3, [r2, #88]	; 0x58
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <HAL_I2C_MspInit+0x138>)
 80011f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
}
 8001200:	bf00      	nop
 8001202:	37c0      	adds	r7, #192	; 0xc0
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40005400 	.word	0x40005400
 800120c:	40021000 	.word	0x40021000
 8001210:	48000400 	.word	0x48000400
 8001214:	40005800 	.word	0x40005800

08001218 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b0b0      	sub	sp, #192	; 0xc0
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001230:	f107 0318 	add.w	r3, r7, #24
 8001234:	2294      	movs	r2, #148	; 0x94
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f006 ff03 	bl	8008044 <memset>
  if(hospi->Instance==OCTOSPI1)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a28      	ldr	r2, [pc, #160]	; (80012e4 <HAL_OSPI_MspInit+0xcc>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d149      	bne.n	80012dc <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001248:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800124c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800124e:	2300      	movs	r3, #0
 8001250:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001254:	f107 0318 	add.w	r3, r7, #24
 8001258:	4618      	mov	r0, r3
 800125a:	f003 fc3d 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001264:	f7ff fe68 	bl	8000f38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001268:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <HAL_OSPI_MspInit+0xd0>)
 800126a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126c:	4a1e      	ldr	r2, [pc, #120]	; (80012e8 <HAL_OSPI_MspInit+0xd0>)
 800126e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001272:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <HAL_OSPI_MspInit+0xd0>)
 8001276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001280:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <HAL_OSPI_MspInit+0xd0>)
 8001282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001284:	4a18      	ldr	r2, [pc, #96]	; (80012e8 <HAL_OSPI_MspInit+0xd0>)
 8001286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128a:	6513      	str	r3, [r2, #80]	; 0x50
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <HAL_OSPI_MspInit+0xd0>)
 800128e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_OSPI_MspInit+0xd0>)
 800129a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129c:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <HAL_OSPI_MspInit+0xd0>)
 800129e:	f043 0310 	orr.w	r3, r3, #16
 80012a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a4:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_OSPI_MspInit+0xd0>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a8:	f003 0310 	and.w	r3, r3, #16
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80012b0:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80012b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80012ca:	230a      	movs	r3, #10
 80012cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012d4:	4619      	mov	r1, r3
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <HAL_OSPI_MspInit+0xd4>)
 80012d8:	f001 fc88 	bl	8002bec <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80012dc:	bf00      	nop
 80012de:	37c0      	adds	r7, #192	; 0xc0
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	a0001000 	.word	0xa0001000
 80012e8:	40021000 	.word	0x40021000
 80012ec:	48001000 	.word	0x48001000

080012f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08c      	sub	sp, #48	; 0x30
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a33      	ldr	r2, [pc, #204]	; (80013dc <HAL_SPI_MspInit+0xec>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d131      	bne.n	8001376 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001312:	4b33      	ldr	r3, [pc, #204]	; (80013e0 <HAL_SPI_MspInit+0xf0>)
 8001314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001316:	4a32      	ldr	r2, [pc, #200]	; (80013e0 <HAL_SPI_MspInit+0xf0>)
 8001318:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800131c:	6613      	str	r3, [r2, #96]	; 0x60
 800131e:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <HAL_SPI_MspInit+0xf0>)
 8001320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001322:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001326:	61bb      	str	r3, [r7, #24]
 8001328:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <HAL_SPI_MspInit+0xf0>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	4a2c      	ldr	r2, [pc, #176]	; (80013e0 <HAL_SPI_MspInit+0xf0>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001336:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <HAL_SPI_MspInit+0xf0>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001342:	23e0      	movs	r3, #224	; 0xe0
 8001344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134e:	2303      	movs	r3, #3
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001352:	2305      	movs	r3, #5
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4619      	mov	r1, r3
 800135c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001360:	f001 fc44 	bl	8002bec <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001364:	2200      	movs	r2, #0
 8001366:	2100      	movs	r1, #0
 8001368:	2023      	movs	r0, #35	; 0x23
 800136a:	f001 fa9c 	bl	80028a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800136e:	2023      	movs	r0, #35	; 0x23
 8001370:	f001 fab5 	bl	80028de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001374:	e02d      	b.n	80013d2 <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI3)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a1a      	ldr	r2, [pc, #104]	; (80013e4 <HAL_SPI_MspInit+0xf4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d128      	bne.n	80013d2 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <HAL_SPI_MspInit+0xf0>)
 8001382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001384:	4a16      	ldr	r2, [pc, #88]	; (80013e0 <HAL_SPI_MspInit+0xf0>)
 8001386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800138a:	6593      	str	r3, [r2, #88]	; 0x58
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_SPI_MspInit+0xf0>)
 800138e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_SPI_MspInit+0xf0>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139c:	4a10      	ldr	r2, [pc, #64]	; (80013e0 <HAL_SPI_MspInit+0xf0>)
 800139e:	f043 0304 	orr.w	r3, r3, #4
 80013a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <HAL_SPI_MspInit+0xf0>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80013b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013be:	2303      	movs	r3, #3
 80013c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013c2:	2306      	movs	r3, #6
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	4619      	mov	r1, r3
 80013cc:	4806      	ldr	r0, [pc, #24]	; (80013e8 <HAL_SPI_MspInit+0xf8>)
 80013ce:	f001 fc0d 	bl	8002bec <HAL_GPIO_Init>
}
 80013d2:	bf00      	nop
 80013d4:	3730      	adds	r7, #48	; 0x30
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40013000 	.word	0x40013000
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40003c00 	.word	0x40003c00
 80013e8:	48000800 	.word	0x48000800

080013ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <HAL_TIM_Base_MspInit+0x38>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d10b      	bne.n	8001416 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_TIM_Base_MspInit+0x3c>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	4a09      	ldr	r2, [pc, #36]	; (8001428 <HAL_TIM_Base_MspInit+0x3c>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	6593      	str	r3, [r2, #88]	; 0x58
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <HAL_TIM_Base_MspInit+0x3c>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40000400 	.word	0x40000400
 8001428:	40021000 	.word	0x40021000

0800142c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a11      	ldr	r2, [pc, #68]	; (8001490 <HAL_TIM_MspPostInit+0x64>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d11b      	bne.n	8001486 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <HAL_TIM_MspPostInit+0x68>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	4a10      	ldr	r2, [pc, #64]	; (8001494 <HAL_TIM_MspPostInit+0x68>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <HAL_TIM_MspPostInit+0x68>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001466:	2302      	movs	r3, #2
 8001468:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001476:	2302      	movs	r3, #2
 8001478:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 030c 	add.w	r3, r7, #12
 800147e:	4619      	mov	r1, r3
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <HAL_TIM_MspPostInit+0x6c>)
 8001482:	f001 fbb3 	bl	8002bec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001486:	bf00      	nop
 8001488:	3720      	adds	r7, #32
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40000400 	.word	0x40000400
 8001494:	40021000 	.word	0x40021000
 8001498:	48000400 	.word	0x48000400

0800149c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b0b4      	sub	sp, #208	; 0xd0
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b8:	2294      	movs	r2, #148	; 0x94
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f006 fdc1 	bl	8008044 <memset>
  if(huart->Instance==UART4)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a83      	ldr	r2, [pc, #524]	; (80016d4 <HAL_UART_MspInit+0x238>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d13c      	bne.n	8001546 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80014cc:	2308      	movs	r3, #8
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d8:	4618      	mov	r0, r3
 80014da:	f003 fafd 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014e4:	f7ff fd28 	bl	8000f38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80014e8:	4b7b      	ldr	r3, [pc, #492]	; (80016d8 <HAL_UART_MspInit+0x23c>)
 80014ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ec:	4a7a      	ldr	r2, [pc, #488]	; (80016d8 <HAL_UART_MspInit+0x23c>)
 80014ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014f2:	6593      	str	r3, [r2, #88]	; 0x58
 80014f4:	4b78      	ldr	r3, [pc, #480]	; (80016d8 <HAL_UART_MspInit+0x23c>)
 80014f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001500:	4b75      	ldr	r3, [pc, #468]	; (80016d8 <HAL_UART_MspInit+0x23c>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001504:	4a74      	ldr	r2, [pc, #464]	; (80016d8 <HAL_UART_MspInit+0x23c>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150c:	4b72      	ldr	r3, [pc, #456]	; (80016d8 <HAL_UART_MspInit+0x23c>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	623b      	str	r3, [r7, #32]
 8001516:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001518:	2303      	movs	r3, #3
 800151a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152a:	2303      	movs	r3, #3
 800152c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001530:	2308      	movs	r3, #8
 8001532:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001540:	f001 fb54 	bl	8002bec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001544:	e0c2      	b.n	80016cc <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a64      	ldr	r2, [pc, #400]	; (80016dc <HAL_UART_MspInit+0x240>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d13b      	bne.n	80015c8 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001550:	2301      	movs	r3, #1
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001554:	2300      	movs	r3, #0
 8001556:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001558:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800155c:	4618      	mov	r0, r3
 800155e:	f003 fabb 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001568:	f7ff fce6 	bl	8000f38 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800156c:	4b5a      	ldr	r3, [pc, #360]	; (80016d8 <HAL_UART_MspInit+0x23c>)
 800156e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001570:	4a59      	ldr	r2, [pc, #356]	; (80016d8 <HAL_UART_MspInit+0x23c>)
 8001572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001576:	6613      	str	r3, [r2, #96]	; 0x60
 8001578:	4b57      	ldr	r3, [pc, #348]	; (80016d8 <HAL_UART_MspInit+0x23c>)
 800157a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001580:	61fb      	str	r3, [r7, #28]
 8001582:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	4b54      	ldr	r3, [pc, #336]	; (80016d8 <HAL_UART_MspInit+0x23c>)
 8001586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001588:	4a53      	ldr	r2, [pc, #332]	; (80016d8 <HAL_UART_MspInit+0x23c>)
 800158a:	f043 0302 	orr.w	r3, r3, #2
 800158e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001590:	4b51      	ldr	r3, [pc, #324]	; (80016d8 <HAL_UART_MspInit+0x23c>)
 8001592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800159c:	23c0      	movs	r3, #192	; 0xc0
 800159e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015b4:	2307      	movs	r3, #7
 80015b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ba:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015be:	4619      	mov	r1, r3
 80015c0:	4847      	ldr	r0, [pc, #284]	; (80016e0 <HAL_UART_MspInit+0x244>)
 80015c2:	f001 fb13 	bl	8002bec <HAL_GPIO_Init>
}
 80015c6:	e081      	b.n	80016cc <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a45      	ldr	r2, [pc, #276]	; (80016e4 <HAL_UART_MspInit+0x248>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d13b      	bne.n	800164a <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015d2:	2302      	movs	r3, #2
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015de:	4618      	mov	r0, r3
 80015e0:	f003 fa7a 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_UART_MspInit+0x152>
      Error_Handler();
 80015ea:	f7ff fca5 	bl	8000f38 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ee:	4b3a      	ldr	r3, [pc, #232]	; (80016d8 <HAL_UART_MspInit+0x23c>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	4a39      	ldr	r2, [pc, #228]	; (80016d8 <HAL_UART_MspInit+0x23c>)
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f8:	6593      	str	r3, [r2, #88]	; 0x58
 80015fa:	4b37      	ldr	r3, [pc, #220]	; (80016d8 <HAL_UART_MspInit+0x23c>)
 80015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001606:	4b34      	ldr	r3, [pc, #208]	; (80016d8 <HAL_UART_MspInit+0x23c>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	4a33      	ldr	r2, [pc, #204]	; (80016d8 <HAL_UART_MspInit+0x23c>)
 800160c:	f043 0308 	orr.w	r3, r3, #8
 8001610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001612:	4b31      	ldr	r3, [pc, #196]	; (80016d8 <HAL_UART_MspInit+0x23c>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800161e:	2378      	movs	r3, #120	; 0x78
 8001620:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001630:	2303      	movs	r3, #3
 8001632:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001636:	2307      	movs	r3, #7
 8001638:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001640:	4619      	mov	r1, r3
 8001642:	4829      	ldr	r0, [pc, #164]	; (80016e8 <HAL_UART_MspInit+0x24c>)
 8001644:	f001 fad2 	bl	8002bec <HAL_GPIO_Init>
}
 8001648:	e040      	b.n	80016cc <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a27      	ldr	r2, [pc, #156]	; (80016ec <HAL_UART_MspInit+0x250>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d13b      	bne.n	80016cc <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001654:	2304      	movs	r3, #4
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001658:	2300      	movs	r3, #0
 800165a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800165c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001660:	4618      	mov	r0, r3
 8001662:	f003 fa39 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800166c:	f7ff fc64 	bl	8000f38 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_UART_MspInit+0x23c>)
 8001672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001674:	4a18      	ldr	r2, [pc, #96]	; (80016d8 <HAL_UART_MspInit+0x23c>)
 8001676:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800167a:	6593      	str	r3, [r2, #88]	; 0x58
 800167c:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <HAL_UART_MspInit+0x23c>)
 800167e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001680:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <HAL_UART_MspInit+0x23c>)
 800168a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168c:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <HAL_UART_MspInit+0x23c>)
 800168e:	f043 0308 	orr.w	r3, r3, #8
 8001692:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001694:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <HAL_UART_MspInit+0x23c>)
 8001696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80016a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b4:	2303      	movs	r3, #3
 80016b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016ba:	2307      	movs	r3, #7
 80016bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016c4:	4619      	mov	r1, r3
 80016c6:	4808      	ldr	r0, [pc, #32]	; (80016e8 <HAL_UART_MspInit+0x24c>)
 80016c8:	f001 fa90 	bl	8002bec <HAL_GPIO_Init>
}
 80016cc:	bf00      	nop
 80016ce:	37d0      	adds	r7, #208	; 0xd0
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40004c00 	.word	0x40004c00
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40013800 	.word	0x40013800
 80016e0:	48000400 	.word	0x48000400
 80016e4:	40004400 	.word	0x40004400
 80016e8:	48000c00 	.word	0x48000c00
 80016ec:	40004800 	.word	0x40004800

080016f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <NMI_Handler+0x4>

080016f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <HardFault_Handler+0x4>

080016fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <MemManage_Handler+0x4>

08001702 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <BusFault_Handler+0x4>

08001708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <UsageFault_Handler+0x4>

0800170e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800173c:	f000 f8d2 	bl	80018e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}

08001744 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	setDataReady();
 8001748:	f7fe fd98 	bl	800027c <setDataReady>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(D7_Pin);
 800174c:	2010      	movs	r0, #16
 800174e:	f001 fbf7 	bl	8002f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}

08001756 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800175a:	2020      	movs	r0, #32
 800175c:	f001 fbf0 	bl	8002f40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001760:	2040      	movs	r0, #64	; 0x40
 8001762:	f001 fbed 	bl	8002f40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001766:	2080      	movs	r0, #128	; 0x80
 8001768:	f001 fbea 	bl	8002f40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800176c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001770:	f001 fbe6 	bl	8002f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}

08001778 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <SPI1_IRQHandler+0x10>)
 800177e:	f004 f8d7 	bl	8005930 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200001cc 	.word	0x200001cc

0800178c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8001790:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001794:	f001 fbd4 	bl	8002f40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001798:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800179c:	f001 fbd0 	bl	8002f40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 80017a0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80017a4:	f001 fbcc 	bl	8002f40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80017a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017ac:	f001 fbc8 	bl	8002f40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80017b0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017b4:	f001 fbc4 	bl	8002f40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80017b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017bc:	f001 fbc0 	bl	8002f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <SystemInit+0x20>)
 80017ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <SystemInit+0x20>)
 80017d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001820 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017ec:	f7ff ffea 	bl	80017c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f0:	480c      	ldr	r0, [pc, #48]	; (8001824 <LoopForever+0x6>)
  ldr r1, =_edata
 80017f2:	490d      	ldr	r1, [pc, #52]	; (8001828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f4:	4a0d      	ldr	r2, [pc, #52]	; (800182c <LoopForever+0xe>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f8:	e002      	b.n	8001800 <LoopCopyDataInit>

080017fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fe:	3304      	adds	r3, #4

08001800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001804:	d3f9      	bcc.n	80017fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001808:	4c0a      	ldr	r4, [pc, #40]	; (8001834 <LoopForever+0x16>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800180c:	e001      	b.n	8001812 <LoopFillZerobss>

0800180e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001810:	3204      	adds	r2, #4

08001812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001814:	d3fb      	bcc.n	800180e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001816:	f006 fbf1 	bl	8007ffc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800181a:	f7fe fdb5 	bl	8000388 <main>

0800181e <LoopForever>:

LoopForever:
    b LoopForever
 800181e:	e7fe      	b.n	800181e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001820:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800182c:	080083b4 	.word	0x080083b4
  ldr r2, =_sbss
 8001830:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001834:	20000564 	.word	0x20000564

08001838 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC1_IRQHandler>

0800183a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001844:	2003      	movs	r0, #3
 8001846:	f001 f823 	bl	8002890 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800184a:	2000      	movs	r0, #0
 800184c:	f000 f80e 	bl	800186c <HAL_InitTick>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	71fb      	strb	r3, [r7, #7]
 800185a:	e001      	b.n	8001860 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800185c:	f7ff fb72 	bl	8000f44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001860:	79fb      	ldrb	r3, [r7, #7]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <HAL_InitTick+0x6c>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d023      	beq.n	80018c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001880:	4b16      	ldr	r3, [pc, #88]	; (80018dc <HAL_InitTick+0x70>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <HAL_InitTick+0x6c>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001892:	fbb2 f3f3 	udiv	r3, r2, r3
 8001896:	4618      	mov	r0, r3
 8001898:	f001 f82f 	bl	80028fa <HAL_SYSTICK_Config>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10f      	bne.n	80018c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b0f      	cmp	r3, #15
 80018a6:	d809      	bhi.n	80018bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a8:	2200      	movs	r2, #0
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018b0:	f000 fff9 	bl	80028a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018b4:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <HAL_InitTick+0x74>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e007      	b.n	80018cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
 80018c0:	e004      	b.n	80018cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	73fb      	strb	r3, [r7, #15]
 80018c6:	e001      	b.n	80018cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000014 	.word	0x20000014
 80018dc:	2000000c 	.word	0x2000000c
 80018e0:	20000010 	.word	0x20000010

080018e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x20>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_IncTick+0x24>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	4a04      	ldr	r2, [pc, #16]	; (8001908 <HAL_IncTick+0x24>)
 80018f6:	6013      	str	r3, [r2, #0]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000014 	.word	0x20000014
 8001908:	2000053c 	.word	0x2000053c

0800190c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <HAL_GetTick+0x14>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	2000053c 	.word	0x2000053c

08001924 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	609a      	str	r2, [r3, #8]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	609a      	str	r2, [r3, #8]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800198c:	b480      	push	{r7}
 800198e:	b087      	sub	sp, #28
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3360      	adds	r3, #96	; 0x60
 800199e:	461a      	mov	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <LL_ADC_SetOffset+0x44>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	4313      	orrs	r3, r2
 80019bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019c4:	bf00      	nop
 80019c6:	371c      	adds	r7, #28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	03fff000 	.word	0x03fff000

080019d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3360      	adds	r3, #96	; 0x60
 80019e2:	461a      	mov	r2, r3
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b087      	sub	sp, #28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3360      	adds	r3, #96	; 0x60
 8001a10:	461a      	mov	r2, r3
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	431a      	orrs	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a2a:	bf00      	nop
 8001a2c:	371c      	adds	r7, #28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	615a      	str	r2, [r3, #20]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	3330      	adds	r3, #48	; 0x30
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	0a1b      	lsrs	r3, r3, #8
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	4413      	add	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	211f      	movs	r1, #31
 8001a88:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	401a      	ands	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	0e9b      	lsrs	r3, r3, #26
 8001a94:	f003 011f 	and.w	r1, r3, #31
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001aa8:	bf00      	nop
 8001aaa:	371c      	adds	r7, #28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b087      	sub	sp, #28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3314      	adds	r3, #20
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	0e5b      	lsrs	r3, r3, #25
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	4413      	add	r3, r2
 8001ad2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	0d1b      	lsrs	r3, r3, #20
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	2107      	movs	r1, #7
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	401a      	ands	r2, r3
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	0d1b      	lsrs	r3, r3, #20
 8001aee:	f003 031f 	and.w	r3, r3, #31
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	fa01 f303 	lsl.w	r3, r1, r3
 8001af8:	431a      	orrs	r2, r3
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001afe:	bf00      	nop
 8001b00:	371c      	adds	r7, #28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b24:	43db      	mvns	r3, r3
 8001b26:	401a      	ands	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f003 0318 	and.w	r3, r3, #24
 8001b2e:	4908      	ldr	r1, [pc, #32]	; (8001b50 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b30:	40d9      	lsrs	r1, r3
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	400b      	ands	r3, r1
 8001b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	0007ffff 	.word	0x0007ffff

08001b54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6093      	str	r3, [r2, #8]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b8c:	d101      	bne.n	8001b92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001bb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001bdc:	d101      	bne.n	8001be2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <LL_ADC_IsEnabled+0x18>
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <LL_ADC_IsEnabled+0x1a>
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d101      	bne.n	8001c2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 0308 	and.w	r3, r3, #8
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d101      	bne.n	8001c54 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e12f      	b.n	8001ede <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d109      	bne.n	8001ca0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff f97d 	bl	8000f8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff67 	bl	8001b78 <LL_ADC_IsDeepPowerDownEnabled>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d004      	beq.n	8001cba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff4d 	bl	8001b54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ff82 	bl	8001bc8 <LL_ADC_IsInternalRegulatorEnabled>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d115      	bne.n	8001cf6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff ff66 	bl	8001ba0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cd4:	4b84      	ldr	r3, [pc, #528]	; (8001ee8 <HAL_ADC_Init+0x284>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	099b      	lsrs	r3, r3, #6
 8001cda:	4a84      	ldr	r2, [pc, #528]	; (8001eec <HAL_ADC_Init+0x288>)
 8001cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce0:	099b      	lsrs	r3, r3, #6
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ce8:	e002      	b.n	8001cf0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f9      	bne.n	8001cea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ff64 	bl	8001bc8 <LL_ADC_IsInternalRegulatorEnabled>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10d      	bne.n	8001d22 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	f043 0210 	orr.w	r2, r3, #16
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	f043 0201 	orr.w	r2, r3, #1
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ff75 	bl	8001c16 <LL_ADC_REG_IsConversionOngoing>
 8001d2c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d32:	f003 0310 	and.w	r3, r3, #16
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f040 80c8 	bne.w	8001ecc <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f040 80c4 	bne.w	8001ecc <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d48:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d4c:	f043 0202 	orr.w	r2, r3, #2
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff49 	bl	8001bf0 <LL_ADC_IsEnabled>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10b      	bne.n	8001d7c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d64:	4862      	ldr	r0, [pc, #392]	; (8001ef0 <HAL_ADC_Init+0x28c>)
 8001d66:	f7ff ff43 	bl	8001bf0 <LL_ADC_IsEnabled>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d105      	bne.n	8001d7c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	4619      	mov	r1, r3
 8001d76:	485f      	ldr	r0, [pc, #380]	; (8001ef4 <HAL_ADC_Init+0x290>)
 8001d78:	f7ff fdd4 	bl	8001924 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7e5b      	ldrb	r3, [r3, #25]
 8001d80:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d86:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001d8c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001d92:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d9a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d106      	bne.n	8001db8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	3b01      	subs	r3, #1
 8001db0:	045b      	lsls	r3, r3, #17
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d009      	beq.n	8001dd4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dcc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	4b47      	ldr	r3, [pc, #284]	; (8001ef8 <HAL_ADC_Init+0x294>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	69b9      	ldr	r1, [r7, #24]
 8001de4:	430b      	orrs	r3, r1
 8001de6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff12 	bl	8001c16 <LL_ADC_REG_IsConversionOngoing>
 8001df2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff1f 	bl	8001c3c <LL_ADC_INJ_IsConversionOngoing>
 8001dfe:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d140      	bne.n	8001e88 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d13d      	bne.n	8001e88 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	7e1b      	ldrb	r3, [r3, #24]
 8001e14:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e16:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e1e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e2e:	f023 0306 	bic.w	r3, r3, #6
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6812      	ldr	r2, [r2, #0]
 8001e36:	69b9      	ldr	r1, [r7, #24]
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d118      	bne.n	8001e78 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e50:	f023 0304 	bic.w	r3, r3, #4
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e5c:	4311      	orrs	r1, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e62:	4311      	orrs	r1, r2
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 0201 	orr.w	r2, r2, #1
 8001e74:	611a      	str	r2, [r3, #16]
 8001e76:	e007      	b.n	8001e88 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691a      	ldr	r2, [r3, #16]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0201 	bic.w	r2, r2, #1
 8001e86:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d10c      	bne.n	8001eaa <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f023 010f 	bic.w	r1, r3, #15
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	1e5a      	subs	r2, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ea8:	e007      	b.n	8001eba <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 020f 	bic.w	r2, r2, #15
 8001eb8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	f023 0303 	bic.w	r3, r3, #3
 8001ec2:	f043 0201 	orr.w	r2, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	659a      	str	r2, [r3, #88]	; 0x58
 8001eca:	e007      	b.n	8001edc <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	f043 0210 	orr.w	r2, r3, #16
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001edc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3720      	adds	r7, #32
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000000c 	.word	0x2000000c
 8001eec:	053e2d63 	.word	0x053e2d63
 8001ef0:	50040000 	.word	0x50040000
 8001ef4:	50040300 	.word	0x50040300
 8001ef8:	fff0c007 	.word	0xfff0c007

08001efc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b0b6      	sub	sp, #216	; 0xd8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x22>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e3d3      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x7ca>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fe73 	bl	8001c16 <LL_ADC_REG_IsConversionOngoing>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 83b8 	bne.w	80026a8 <HAL_ADC_ConfigChannel+0x7ac>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b05      	cmp	r3, #5
 8001f3e:	d824      	bhi.n	8001f8a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	3b02      	subs	r3, #2
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	d81b      	bhi.n	8001f82 <HAL_ADC_ConfigChannel+0x86>
 8001f4a:	a201      	add	r2, pc, #4	; (adr r2, 8001f50 <HAL_ADC_ConfigChannel+0x54>)
 8001f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f50:	08001f61 	.word	0x08001f61
 8001f54:	08001f69 	.word	0x08001f69
 8001f58:	08001f71 	.word	0x08001f71
 8001f5c:	08001f79 	.word	0x08001f79
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	220c      	movs	r2, #12
 8001f64:	605a      	str	r2, [r3, #4]
          break;
 8001f66:	e010      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	2212      	movs	r2, #18
 8001f6c:	605a      	str	r2, [r3, #4]
          break;
 8001f6e:	e00c      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	2218      	movs	r2, #24
 8001f74:	605a      	str	r2, [r3, #4]
          break;
 8001f76:	e008      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f7e:	605a      	str	r2, [r3, #4]
          break;
 8001f80:	e003      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2206      	movs	r2, #6
 8001f86:	605a      	str	r2, [r3, #4]
          break;
 8001f88:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	6859      	ldr	r1, [r3, #4]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	f7ff fd60 	bl	8001a5c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fe38 	bl	8001c16 <LL_ADC_REG_IsConversionOngoing>
 8001fa6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fe44 	bl	8001c3c <LL_ADC_INJ_IsConversionOngoing>
 8001fb4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fb8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f040 81c1 	bne.w	8002344 <HAL_ADC_ConfigChannel+0x448>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f040 81bc 	bne.w	8002344 <HAL_ADC_ConfigChannel+0x448>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fd4:	d10f      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0xfa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f7ff fd67 	bl	8001ab4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fd21 	bl	8001a36 <LL_ADC_SetSamplingTimeCommonConfig>
 8001ff4:	e00e      	b.n	8002014 <HAL_ADC_ConfigChannel+0x118>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6818      	ldr	r0, [r3, #0]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6819      	ldr	r1, [r3, #0]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	461a      	mov	r2, r3
 8002004:	f7ff fd56 	bl	8001ab4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fd11 	bl	8001a36 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	695a      	ldr	r2, [r3, #20]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	08db      	lsrs	r3, r3, #3
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	2b04      	cmp	r3, #4
 8002034:	d00a      	beq.n	800204c <HAL_ADC_ConfigChannel+0x150>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	6919      	ldr	r1, [r3, #16]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002046:	f7ff fca1 	bl	800198c <LL_ADC_SetOffset>
 800204a:	e17b      	b.n	8002344 <HAL_ADC_ConfigChannel+0x448>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2100      	movs	r1, #0
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fcbe 	bl	80019d4 <LL_ADC_GetOffsetChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10a      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x17c>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fcb3 	bl	80019d4 <LL_ADC_GetOffsetChannel>
 800206e:	4603      	mov	r3, r0
 8002070:	0e9b      	lsrs	r3, r3, #26
 8002072:	f003 021f 	and.w	r2, r3, #31
 8002076:	e01e      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x1ba>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2100      	movs	r1, #0
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fca8 	bl	80019d4 <LL_ADC_GetOffsetChannel>
 8002084:	4603      	mov	r3, r0
 8002086:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002096:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800209a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800209e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x1ae>
  {
    return 32U;
 80020a6:	2320      	movs	r3, #32
 80020a8:	e004      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x1b8>
  }
  return __builtin_clz(value);
 80020aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d105      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x1d2>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	0e9b      	lsrs	r3, r3, #26
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	e018      	b.n	8002100 <HAL_ADC_ConfigChannel+0x204>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020da:	fa93 f3a3 	rbit	r3, r3
 80020de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80020e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80020ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x1fa>
    return 32U;
 80020f2:	2320      	movs	r3, #32
 80020f4:	e004      	b.n	8002100 <HAL_ADC_ConfigChannel+0x204>
  return __builtin_clz(value);
 80020f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020fa:	fab3 f383 	clz	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002100:	429a      	cmp	r2, r3
 8002102:	d106      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2200      	movs	r2, #0
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fc77 	bl	8001a00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2101      	movs	r1, #1
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fc5b 	bl	80019d4 <LL_ADC_GetOffsetChannel>
 800211e:	4603      	mov	r3, r0
 8002120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10a      	bne.n	800213e <HAL_ADC_ConfigChannel+0x242>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2101      	movs	r1, #1
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fc50 	bl	80019d4 <LL_ADC_GetOffsetChannel>
 8002134:	4603      	mov	r3, r0
 8002136:	0e9b      	lsrs	r3, r3, #26
 8002138:	f003 021f 	and.w	r2, r3, #31
 800213c:	e01e      	b.n	800217c <HAL_ADC_ConfigChannel+0x280>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2101      	movs	r1, #1
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fc45 	bl	80019d4 <LL_ADC_GetOffsetChannel>
 800214a:	4603      	mov	r3, r0
 800214c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800215c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002160:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002164:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x274>
    return 32U;
 800216c:	2320      	movs	r3, #32
 800216e:	e004      	b.n	800217a <HAL_ADC_ConfigChannel+0x27e>
  return __builtin_clz(value);
 8002170:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002174:	fab3 f383 	clz	r3, r3
 8002178:	b2db      	uxtb	r3, r3
 800217a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002184:	2b00      	cmp	r3, #0
 8002186:	d105      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x298>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	0e9b      	lsrs	r3, r3, #26
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	e018      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x2ca>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021a0:	fa93 f3a3 	rbit	r3, r3
 80021a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80021a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80021b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 80021b8:	2320      	movs	r3, #32
 80021ba:	e004      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x2ca>
  return __builtin_clz(value);
 80021bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021c0:	fab3 f383 	clz	r3, r3
 80021c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d106      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2200      	movs	r2, #0
 80021d0:	2101      	movs	r1, #1
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fc14 	bl	8001a00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2102      	movs	r1, #2
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fbf8 	bl	80019d4 <LL_ADC_GetOffsetChannel>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10a      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x308>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2102      	movs	r1, #2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fbed 	bl	80019d4 <LL_ADC_GetOffsetChannel>
 80021fa:	4603      	mov	r3, r0
 80021fc:	0e9b      	lsrs	r3, r3, #26
 80021fe:	f003 021f 	and.w	r2, r3, #31
 8002202:	e01e      	b.n	8002242 <HAL_ADC_ConfigChannel+0x346>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2102      	movs	r1, #2
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fbe2 	bl	80019d4 <LL_ADC_GetOffsetChannel>
 8002210:	4603      	mov	r3, r0
 8002212:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002222:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002226:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800222a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x33a>
    return 32U;
 8002232:	2320      	movs	r3, #32
 8002234:	e004      	b.n	8002240 <HAL_ADC_ConfigChannel+0x344>
  return __builtin_clz(value);
 8002236:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800223a:	fab3 f383 	clz	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224a:	2b00      	cmp	r3, #0
 800224c:	d105      	bne.n	800225a <HAL_ADC_ConfigChannel+0x35e>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	0e9b      	lsrs	r3, r3, #26
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	e016      	b.n	8002288 <HAL_ADC_ConfigChannel+0x38c>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800226c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800226e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002272:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_ADC_ConfigChannel+0x382>
    return 32U;
 800227a:	2320      	movs	r3, #32
 800227c:	e004      	b.n	8002288 <HAL_ADC_ConfigChannel+0x38c>
  return __builtin_clz(value);
 800227e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002282:	fab3 f383 	clz	r3, r3
 8002286:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002288:	429a      	cmp	r2, r3
 800228a:	d106      	bne.n	800229a <HAL_ADC_ConfigChannel+0x39e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2200      	movs	r2, #0
 8002292:	2102      	movs	r1, #2
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fbb3 	bl	8001a00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2103      	movs	r1, #3
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fb97 	bl	80019d4 <LL_ADC_GetOffsetChannel>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10a      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x3ca>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2103      	movs	r1, #3
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fb8c 	bl	80019d4 <LL_ADC_GetOffsetChannel>
 80022bc:	4603      	mov	r3, r0
 80022be:	0e9b      	lsrs	r3, r3, #26
 80022c0:	f003 021f 	and.w	r2, r3, #31
 80022c4:	e017      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x3fa>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2103      	movs	r1, #3
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fb81 	bl	80019d4 <LL_ADC_GetOffsetChannel>
 80022d2:	4603      	mov	r3, r0
 80022d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80022de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022e0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80022e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x3f0>
    return 32U;
 80022e8:	2320      	movs	r3, #32
 80022ea:	e003      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 80022ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d105      	bne.n	800230e <HAL_ADC_ConfigChannel+0x412>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	0e9b      	lsrs	r3, r3, #26
 8002308:	f003 031f 	and.w	r3, r3, #31
 800230c:	e011      	b.n	8002332 <HAL_ADC_ConfigChannel+0x436>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002314:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002316:	fa93 f3a3 	rbit	r3, r3
 800231a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800231c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800231e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_ADC_ConfigChannel+0x42e>
    return 32U;
 8002326:	2320      	movs	r3, #32
 8002328:	e003      	b.n	8002332 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 800232a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800232c:	fab3 f383 	clz	r3, r3
 8002330:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002332:	429a      	cmp	r2, r3
 8002334:	d106      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x448>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2200      	movs	r2, #0
 800233c:	2103      	movs	r1, #3
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fb5e 	bl	8001a00 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fc51 	bl	8001bf0 <LL_ADC_IsEnabled>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	f040 813f 	bne.w	80025d4 <HAL_ADC_ConfigChannel+0x6d8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	6819      	ldr	r1, [r3, #0]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	461a      	mov	r2, r3
 8002364:	f7ff fbd2 	bl	8001b0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4a8e      	ldr	r2, [pc, #568]	; (80025a8 <HAL_ADC_ConfigChannel+0x6ac>)
 800236e:	4293      	cmp	r3, r2
 8002370:	f040 8130 	bne.w	80025d4 <HAL_ADC_ConfigChannel+0x6d8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10b      	bne.n	800239c <HAL_ADC_ConfigChannel+0x4a0>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	0e9b      	lsrs	r3, r3, #26
 800238a:	3301      	adds	r3, #1
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	2b09      	cmp	r3, #9
 8002392:	bf94      	ite	ls
 8002394:	2301      	movls	r3, #1
 8002396:	2300      	movhi	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	e019      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x4d4>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023a4:	fa93 f3a3 	rbit	r3, r3
 80023a8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80023aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023ac:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80023ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x4bc>
    return 32U;
 80023b4:	2320      	movs	r3, #32
 80023b6:	e003      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 80023b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	3301      	adds	r3, #1
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	2b09      	cmp	r3, #9
 80023c8:	bf94      	ite	ls
 80023ca:	2301      	movls	r3, #1
 80023cc:	2300      	movhi	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d079      	beq.n	80024c8 <HAL_ADC_ConfigChannel+0x5cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d107      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x4f4>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	0e9b      	lsrs	r3, r3, #26
 80023e6:	3301      	adds	r3, #1
 80023e8:	069b      	lsls	r3, r3, #26
 80023ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ee:	e015      	b.n	800241c <HAL_ADC_ConfigChannel+0x520>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023f8:	fa93 f3a3 	rbit	r3, r3
 80023fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80023fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002400:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_ADC_ConfigChannel+0x510>
    return 32U;
 8002408:	2320      	movs	r3, #32
 800240a:	e003      	b.n	8002414 <HAL_ADC_ConfigChannel+0x518>
  return __builtin_clz(value);
 800240c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800240e:	fab3 f383 	clz	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	3301      	adds	r3, #1
 8002416:	069b      	lsls	r3, r3, #26
 8002418:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002424:	2b00      	cmp	r3, #0
 8002426:	d109      	bne.n	800243c <HAL_ADC_ConfigChannel+0x540>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	0e9b      	lsrs	r3, r3, #26
 800242e:	3301      	adds	r3, #1
 8002430:	f003 031f 	and.w	r3, r3, #31
 8002434:	2101      	movs	r1, #1
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	e017      	b.n	800246c <HAL_ADC_ConfigChannel+0x570>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800244a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800244c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800244e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x55c>
    return 32U;
 8002454:	2320      	movs	r3, #32
 8002456:	e003      	b.n	8002460 <HAL_ADC_ConfigChannel+0x564>
  return __builtin_clz(value);
 8002458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	3301      	adds	r3, #1
 8002462:	f003 031f 	and.w	r3, r3, #31
 8002466:	2101      	movs	r1, #1
 8002468:	fa01 f303 	lsl.w	r3, r1, r3
 800246c:	ea42 0103 	orr.w	r1, r2, r3
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10a      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x596>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	0e9b      	lsrs	r3, r3, #26
 8002482:	3301      	adds	r3, #1
 8002484:	f003 021f 	and.w	r2, r3, #31
 8002488:	4613      	mov	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4413      	add	r3, r2
 800248e:	051b      	lsls	r3, r3, #20
 8002490:	e018      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x5c8>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80024a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80024aa:	2320      	movs	r3, #32
 80024ac:	e003      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80024ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024b0:	fab3 f383 	clz	r3, r3
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	3301      	adds	r3, #1
 80024b8:	f003 021f 	and.w	r2, r3, #31
 80024bc:	4613      	mov	r3, r2
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	4413      	add	r3, r2
 80024c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024c4:	430b      	orrs	r3, r1
 80024c6:	e080      	b.n	80025ca <HAL_ADC_ConfigChannel+0x6ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d107      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x5e8>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0e9b      	lsrs	r3, r3, #26
 80024da:	3301      	adds	r3, #1
 80024dc:	069b      	lsls	r3, r3, #26
 80024de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024e2:	e015      	b.n	8002510 <HAL_ADC_ConfigChannel+0x614>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80024f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x604>
    return 32U;
 80024fc:	2320      	movs	r3, #32
 80024fe:	e003      	b.n	8002508 <HAL_ADC_ConfigChannel+0x60c>
  return __builtin_clz(value);
 8002500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	3301      	adds	r3, #1
 800250a:	069b      	lsls	r3, r3, #26
 800250c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002518:	2b00      	cmp	r3, #0
 800251a:	d109      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x634>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	0e9b      	lsrs	r3, r3, #26
 8002522:	3301      	adds	r3, #1
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	2101      	movs	r1, #1
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	e017      	b.n	8002560 <HAL_ADC_ConfigChannel+0x664>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	61fb      	str	r3, [r7, #28]
  return result;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_ADC_ConfigChannel+0x650>
    return 32U;
 8002548:	2320      	movs	r3, #32
 800254a:	e003      	b.n	8002554 <HAL_ADC_ConfigChannel+0x658>
  return __builtin_clz(value);
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	fab3 f383 	clz	r3, r3
 8002552:	b2db      	uxtb	r3, r3
 8002554:	3301      	adds	r3, #1
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	2101      	movs	r1, #1
 800255c:	fa01 f303 	lsl.w	r3, r1, r3
 8002560:	ea42 0103 	orr.w	r1, r2, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10d      	bne.n	800258c <HAL_ADC_ConfigChannel+0x690>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	0e9b      	lsrs	r3, r3, #26
 8002576:	3301      	adds	r3, #1
 8002578:	f003 021f 	and.w	r2, r3, #31
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	3b1e      	subs	r3, #30
 8002584:	051b      	lsls	r3, r3, #20
 8002586:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800258a:	e01d      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x6cc>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	fa93 f3a3 	rbit	r3, r3
 8002598:	613b      	str	r3, [r7, #16]
  return result;
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d103      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x6b0>
    return 32U;
 80025a4:	2320      	movs	r3, #32
 80025a6:	e005      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x6b8>
 80025a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	fab3 f383 	clz	r3, r3
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	3301      	adds	r3, #1
 80025b6:	f003 021f 	and.w	r2, r3, #31
 80025ba:	4613      	mov	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4413      	add	r3, r2
 80025c0:	3b1e      	subs	r3, #30
 80025c2:	051b      	lsls	r3, r3, #20
 80025c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025c8:	430b      	orrs	r3, r1
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	6892      	ldr	r2, [r2, #8]
 80025ce:	4619      	mov	r1, r3
 80025d0:	f7ff fa70 	bl	8001ab4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4b3d      	ldr	r3, [pc, #244]	; (80026d0 <HAL_ADC_ConfigChannel+0x7d4>)
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d06c      	beq.n	80026ba <HAL_ADC_ConfigChannel+0x7be>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025e0:	483c      	ldr	r0, [pc, #240]	; (80026d4 <HAL_ADC_ConfigChannel+0x7d8>)
 80025e2:	f7ff f9c5 	bl	8001970 <LL_ADC_GetCommonPathInternalCh>
 80025e6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a3a      	ldr	r2, [pc, #232]	; (80026d8 <HAL_ADC_ConfigChannel+0x7dc>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d127      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x748>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d121      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x748>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a35      	ldr	r2, [pc, #212]	; (80026dc <HAL_ADC_ConfigChannel+0x7e0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d157      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800260a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800260e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002612:	4619      	mov	r1, r3
 8002614:	482f      	ldr	r0, [pc, #188]	; (80026d4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002616:	f7ff f998 	bl	800194a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800261a:	4b31      	ldr	r3, [pc, #196]	; (80026e0 <HAL_ADC_ConfigChannel+0x7e4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	099b      	lsrs	r3, r3, #6
 8002620:	4a30      	ldr	r2, [pc, #192]	; (80026e4 <HAL_ADC_ConfigChannel+0x7e8>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	099b      	lsrs	r3, r3, #6
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	4613      	mov	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002634:	e002      	b.n	800263c <HAL_ADC_ConfigChannel+0x740>
          {
            wait_loop_index--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	3b01      	subs	r3, #1
 800263a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f9      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x73a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002642:	e03a      	b.n	80026ba <HAL_ADC_ConfigChannel+0x7be>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a27      	ldr	r2, [pc, #156]	; (80026e8 <HAL_ADC_ConfigChannel+0x7ec>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d113      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x77a>
 800264e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002652:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10d      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x77a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a1f      	ldr	r2, [pc, #124]	; (80026dc <HAL_ADC_ConfigChannel+0x7e0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d12a      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002664:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002668:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800266c:	4619      	mov	r1, r3
 800266e:	4819      	ldr	r0, [pc, #100]	; (80026d4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002670:	f7ff f96b 	bl	800194a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002674:	e021      	b.n	80026ba <HAL_ADC_ConfigChannel+0x7be>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a1c      	ldr	r2, [pc, #112]	; (80026ec <HAL_ADC_ConfigChannel+0x7f0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d11c      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x7be>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002680:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d116      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x7be>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a12      	ldr	r2, [pc, #72]	; (80026dc <HAL_ADC_ConfigChannel+0x7e0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d111      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002696:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800269a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800269e:	4619      	mov	r1, r3
 80026a0:	480c      	ldr	r0, [pc, #48]	; (80026d4 <HAL_ADC_ConfigChannel+0x7d8>)
 80026a2:	f7ff f952 	bl	800194a <LL_ADC_SetCommonPathInternalCh>
 80026a6:	e008      	b.n	80026ba <HAL_ADC_ConfigChannel+0x7be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ac:	f043 0220 	orr.w	r2, r3, #32
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80026c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	37d8      	adds	r7, #216	; 0xd8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	80080000 	.word	0x80080000
 80026d4:	50040300 	.word	0x50040300
 80026d8:	c7520000 	.word	0xc7520000
 80026dc:	50040000 	.word	0x50040000
 80026e0:	2000000c 	.word	0x2000000c
 80026e4:	053e2d63 	.word	0x053e2d63
 80026e8:	cb840000 	.word	0xcb840000
 80026ec:	80000001 	.word	0x80000001

080026f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800270c:	4013      	ands	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800271c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002722:	4a04      	ldr	r2, [pc, #16]	; (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	60d3      	str	r3, [r2, #12]
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800273c:	4b04      	ldr	r3, [pc, #16]	; (8002750 <__NVIC_GetPriorityGrouping+0x18>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	0a1b      	lsrs	r3, r3, #8
 8002742:	f003 0307 	and.w	r3, r3, #7
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	2b00      	cmp	r3, #0
 8002764:	db0b      	blt.n	800277e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	f003 021f 	and.w	r2, r3, #31
 800276c:	4907      	ldr	r1, [pc, #28]	; (800278c <__NVIC_EnableIRQ+0x38>)
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	2001      	movs	r0, #1
 8002776:	fa00 f202 	lsl.w	r2, r0, r2
 800277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000e100 	.word	0xe000e100

08002790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	6039      	str	r1, [r7, #0]
 800279a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	db0a      	blt.n	80027ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	490c      	ldr	r1, [pc, #48]	; (80027dc <__NVIC_SetPriority+0x4c>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	0112      	lsls	r2, r2, #4
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	440b      	add	r3, r1
 80027b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b8:	e00a      	b.n	80027d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4908      	ldr	r1, [pc, #32]	; (80027e0 <__NVIC_SetPriority+0x50>)
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	3b04      	subs	r3, #4
 80027c8:	0112      	lsls	r2, r2, #4
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	440b      	add	r3, r1
 80027ce:	761a      	strb	r2, [r3, #24]
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000e100 	.word	0xe000e100
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b089      	sub	sp, #36	; 0x24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f1c3 0307 	rsb	r3, r3, #7
 80027fe:	2b04      	cmp	r3, #4
 8002800:	bf28      	it	cs
 8002802:	2304      	movcs	r3, #4
 8002804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3304      	adds	r3, #4
 800280a:	2b06      	cmp	r3, #6
 800280c:	d902      	bls.n	8002814 <NVIC_EncodePriority+0x30>
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3b03      	subs	r3, #3
 8002812:	e000      	b.n	8002816 <NVIC_EncodePriority+0x32>
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002818:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	401a      	ands	r2, r3
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800282c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	fa01 f303 	lsl.w	r3, r1, r3
 8002836:	43d9      	mvns	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	4313      	orrs	r3, r2
         );
}
 800283e:	4618      	mov	r0, r3
 8002840:	3724      	adds	r7, #36	; 0x24
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800285c:	d301      	bcc.n	8002862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800285e:	2301      	movs	r3, #1
 8002860:	e00f      	b.n	8002882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002862:	4a0a      	ldr	r2, [pc, #40]	; (800288c <SysTick_Config+0x40>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3b01      	subs	r3, #1
 8002868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800286a:	210f      	movs	r1, #15
 800286c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002870:	f7ff ff8e 	bl	8002790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002874:	4b05      	ldr	r3, [pc, #20]	; (800288c <SysTick_Config+0x40>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800287a:	4b04      	ldr	r3, [pc, #16]	; (800288c <SysTick_Config+0x40>)
 800287c:	2207      	movs	r2, #7
 800287e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	e000e010 	.word	0xe000e010

08002890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ff29 	bl	80026f0 <__NVIC_SetPriorityGrouping>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b086      	sub	sp, #24
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	4603      	mov	r3, r0
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028b8:	f7ff ff3e 	bl	8002738 <__NVIC_GetPriorityGrouping>
 80028bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	6978      	ldr	r0, [r7, #20]
 80028c4:	f7ff ff8e 	bl	80027e4 <NVIC_EncodePriority>
 80028c8:	4602      	mov	r2, r0
 80028ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff5d 	bl	8002790 <__NVIC_SetPriority>
}
 80028d6:	bf00      	nop
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	4603      	mov	r3, r0
 80028e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff31 	bl	8002754 <__NVIC_EnableIRQ>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7ff ffa2 	bl	800284c <SysTick_Config>
 8002908:	4603      	mov	r3, r0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e0ac      	b.n	8002a80 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f000 f8b2 	bl	8002a94 <DFSDM_GetChannelFromInstance>
 8002930:	4603      	mov	r3, r0
 8002932:	4a55      	ldr	r2, [pc, #340]	; (8002a88 <HAL_DFSDM_ChannelInit+0x174>)
 8002934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e09f      	b.n	8002a80 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7fe fb63 	bl	800100c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002946:	4b51      	ldr	r3, [pc, #324]	; (8002a8c <HAL_DFSDM_ChannelInit+0x178>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	3301      	adds	r3, #1
 800294c:	4a4f      	ldr	r2, [pc, #316]	; (8002a8c <HAL_DFSDM_ChannelInit+0x178>)
 800294e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002950:	4b4e      	ldr	r3, [pc, #312]	; (8002a8c <HAL_DFSDM_ChannelInit+0x178>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d125      	bne.n	80029a4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002958:	4b4d      	ldr	r3, [pc, #308]	; (8002a90 <HAL_DFSDM_ChannelInit+0x17c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a4c      	ldr	r2, [pc, #304]	; (8002a90 <HAL_DFSDM_ChannelInit+0x17c>)
 800295e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002962:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002964:	4b4a      	ldr	r3, [pc, #296]	; (8002a90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	4948      	ldr	r1, [pc, #288]	; (8002a90 <HAL_DFSDM_ChannelInit+0x17c>)
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002972:	4b47      	ldr	r3, [pc, #284]	; (8002a90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a46      	ldr	r2, [pc, #280]	; (8002a90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002978:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800297c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	791b      	ldrb	r3, [r3, #4]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d108      	bne.n	8002998 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002986:	4b42      	ldr	r3, [pc, #264]	; (8002a90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	3b01      	subs	r3, #1
 8002990:	041b      	lsls	r3, r3, #16
 8002992:	493f      	ldr	r1, [pc, #252]	; (8002a90 <HAL_DFSDM_ChannelInit+0x17c>)
 8002994:	4313      	orrs	r3, r2
 8002996:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002998:	4b3d      	ldr	r3, [pc, #244]	; (8002a90 <HAL_DFSDM_ChannelInit+0x17c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a3c      	ldr	r2, [pc, #240]	; (8002a90 <HAL_DFSDM_ChannelInit+0x17c>)
 800299e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029a2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80029b2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6819      	ldr	r1, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80029c2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80029c8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 020f 	bic.w	r2, r2, #15
 80029e0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6819      	ldr	r1, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002a08:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6899      	ldr	r1, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f002 0207 	and.w	r2, r2, #7
 8002a34:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6859      	ldr	r1, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a60:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 f810 	bl	8002a94 <DFSDM_GetChannelFromInstance>
 8002a74:	4602      	mov	r2, r0
 8002a76:	4904      	ldr	r1, [pc, #16]	; (8002a88 <HAL_DFSDM_ChannelInit+0x174>)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000544 	.word	0x20000544
 8002a8c:	20000540 	.word	0x20000540
 8002a90:	40016000 	.word	0x40016000

08002a94 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a1c      	ldr	r2, [pc, #112]	; (8002b10 <DFSDM_GetChannelFromInstance+0x7c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d102      	bne.n	8002aaa <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	e02b      	b.n	8002b02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a19      	ldr	r2, [pc, #100]	; (8002b14 <DFSDM_GetChannelFromInstance+0x80>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d102      	bne.n	8002ab8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	e024      	b.n	8002b02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a17      	ldr	r2, [pc, #92]	; (8002b18 <DFSDM_GetChannelFromInstance+0x84>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d102      	bne.n	8002ac6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	e01d      	b.n	8002b02 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a14      	ldr	r2, [pc, #80]	; (8002b1c <DFSDM_GetChannelFromInstance+0x88>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d102      	bne.n	8002ad4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002ace:	2304      	movs	r3, #4
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	e016      	b.n	8002b02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a12      	ldr	r2, [pc, #72]	; (8002b20 <DFSDM_GetChannelFromInstance+0x8c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d102      	bne.n	8002ae2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002adc:	2305      	movs	r3, #5
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	e00f      	b.n	8002b02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a0f      	ldr	r2, [pc, #60]	; (8002b24 <DFSDM_GetChannelFromInstance+0x90>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d102      	bne.n	8002af0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002aea:	2306      	movs	r3, #6
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	e008      	b.n	8002b02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a0d      	ldr	r2, [pc, #52]	; (8002b28 <DFSDM_GetChannelFromInstance+0x94>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d102      	bne.n	8002afe <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002af8:	2307      	movs	r3, #7
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	e001      	b.n	8002b02 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002afe:	2303      	movs	r3, #3
 8002b00:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002b02:	68fb      	ldr	r3, [r7, #12]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	40016000 	.word	0x40016000
 8002b14:	40016020 	.word	0x40016020
 8002b18:	40016040 	.word	0x40016040
 8002b1c:	40016080 	.word	0x40016080
 8002b20:	400160a0 	.word	0x400160a0
 8002b24:	400160c0 	.word	0x400160c0
 8002b28:	400160e0 	.word	0x400160e0

08002b2c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d005      	beq.n	8002b50 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2204      	movs	r2, #4
 8002b48:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
 8002b4e:	e047      	b.n	8002be0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 020e 	bic.w	r2, r2, #14
 8002b5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0201 	bic.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b84:	f003 021c 	and.w	r2, r3, #28
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b92:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b9c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00c      	beq.n	8002bc0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002bbe:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	4798      	blx	r3
    }
  }
  return status;
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bfa:	e166      	b.n	8002eca <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	2101      	movs	r1, #1
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	fa01 f303 	lsl.w	r3, r1, r3
 8002c08:	4013      	ands	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 8158 	beq.w	8002ec4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d005      	beq.n	8002c2c <HAL_GPIO_Init+0x40>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d130      	bne.n	8002c8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	2203      	movs	r2, #3
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4013      	ands	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c62:	2201      	movs	r2, #1
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	f003 0201 	and.w	r2, r3, #1
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d017      	beq.n	8002cca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d123      	bne.n	8002d1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	08da      	lsrs	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3208      	adds	r2, #8
 8002cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	220f      	movs	r2, #15
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	691a      	ldr	r2, [r3, #16]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	08da      	lsrs	r2, r3, #3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3208      	adds	r2, #8
 8002d18:	6939      	ldr	r1, [r7, #16]
 8002d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	2203      	movs	r2, #3
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4013      	ands	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f003 0203 	and.w	r2, r3, #3
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 80b2 	beq.w	8002ec4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d60:	4b61      	ldr	r3, [pc, #388]	; (8002ee8 <HAL_GPIO_Init+0x2fc>)
 8002d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d64:	4a60      	ldr	r2, [pc, #384]	; (8002ee8 <HAL_GPIO_Init+0x2fc>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	6613      	str	r3, [r2, #96]	; 0x60
 8002d6c:	4b5e      	ldr	r3, [pc, #376]	; (8002ee8 <HAL_GPIO_Init+0x2fc>)
 8002d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d78:	4a5c      	ldr	r2, [pc, #368]	; (8002eec <HAL_GPIO_Init+0x300>)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	089b      	lsrs	r3, r3, #2
 8002d7e:	3302      	adds	r3, #2
 8002d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	220f      	movs	r2, #15
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002da2:	d02b      	beq.n	8002dfc <HAL_GPIO_Init+0x210>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a52      	ldr	r2, [pc, #328]	; (8002ef0 <HAL_GPIO_Init+0x304>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d025      	beq.n	8002df8 <HAL_GPIO_Init+0x20c>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a51      	ldr	r2, [pc, #324]	; (8002ef4 <HAL_GPIO_Init+0x308>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d01f      	beq.n	8002df4 <HAL_GPIO_Init+0x208>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a50      	ldr	r2, [pc, #320]	; (8002ef8 <HAL_GPIO_Init+0x30c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d019      	beq.n	8002df0 <HAL_GPIO_Init+0x204>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a4f      	ldr	r2, [pc, #316]	; (8002efc <HAL_GPIO_Init+0x310>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d013      	beq.n	8002dec <HAL_GPIO_Init+0x200>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a4e      	ldr	r2, [pc, #312]	; (8002f00 <HAL_GPIO_Init+0x314>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d00d      	beq.n	8002de8 <HAL_GPIO_Init+0x1fc>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a4d      	ldr	r2, [pc, #308]	; (8002f04 <HAL_GPIO_Init+0x318>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d007      	beq.n	8002de4 <HAL_GPIO_Init+0x1f8>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a4c      	ldr	r2, [pc, #304]	; (8002f08 <HAL_GPIO_Init+0x31c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d101      	bne.n	8002de0 <HAL_GPIO_Init+0x1f4>
 8002ddc:	2307      	movs	r3, #7
 8002dde:	e00e      	b.n	8002dfe <HAL_GPIO_Init+0x212>
 8002de0:	2308      	movs	r3, #8
 8002de2:	e00c      	b.n	8002dfe <HAL_GPIO_Init+0x212>
 8002de4:	2306      	movs	r3, #6
 8002de6:	e00a      	b.n	8002dfe <HAL_GPIO_Init+0x212>
 8002de8:	2305      	movs	r3, #5
 8002dea:	e008      	b.n	8002dfe <HAL_GPIO_Init+0x212>
 8002dec:	2304      	movs	r3, #4
 8002dee:	e006      	b.n	8002dfe <HAL_GPIO_Init+0x212>
 8002df0:	2303      	movs	r3, #3
 8002df2:	e004      	b.n	8002dfe <HAL_GPIO_Init+0x212>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e002      	b.n	8002dfe <HAL_GPIO_Init+0x212>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e000      	b.n	8002dfe <HAL_GPIO_Init+0x212>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	f002 0203 	and.w	r2, r2, #3
 8002e04:	0092      	lsls	r2, r2, #2
 8002e06:	4093      	lsls	r3, r2
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e0e:	4937      	ldr	r1, [pc, #220]	; (8002eec <HAL_GPIO_Init+0x300>)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	089b      	lsrs	r3, r3, #2
 8002e14:	3302      	adds	r3, #2
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e1c:	4b3b      	ldr	r3, [pc, #236]	; (8002f0c <HAL_GPIO_Init+0x320>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	43db      	mvns	r3, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e40:	4a32      	ldr	r2, [pc, #200]	; (8002f0c <HAL_GPIO_Init+0x320>)
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e46:	4b31      	ldr	r3, [pc, #196]	; (8002f0c <HAL_GPIO_Init+0x320>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4013      	ands	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e6a:	4a28      	ldr	r2, [pc, #160]	; (8002f0c <HAL_GPIO_Init+0x320>)
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e70:	4b26      	ldr	r3, [pc, #152]	; (8002f0c <HAL_GPIO_Init+0x320>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e94:	4a1d      	ldr	r2, [pc, #116]	; (8002f0c <HAL_GPIO_Init+0x320>)
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e9a:	4b1c      	ldr	r3, [pc, #112]	; (8002f0c <HAL_GPIO_Init+0x320>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ebe:	4a13      	ldr	r2, [pc, #76]	; (8002f0c <HAL_GPIO_Init+0x320>)
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f47f ae91 	bne.w	8002bfc <HAL_GPIO_Init+0x10>
  }
}
 8002eda:	bf00      	nop
 8002edc:	bf00      	nop
 8002ede:	371c      	adds	r7, #28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40010000 	.word	0x40010000
 8002ef0:	48000400 	.word	0x48000400
 8002ef4:	48000800 	.word	0x48000800
 8002ef8:	48000c00 	.word	0x48000c00
 8002efc:	48001000 	.word	0x48001000
 8002f00:	48001400 	.word	0x48001400
 8002f04:	48001800 	.word	0x48001800
 8002f08:	48001c00 	.word	0x48001c00
 8002f0c:	40010400 	.word	0x40010400

08002f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	807b      	strh	r3, [r7, #2]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f20:	787b      	ldrb	r3, [r7, #1]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f26:	887a      	ldrh	r2, [r7, #2]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f2c:	e002      	b.n	8002f34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f2e:	887a      	ldrh	r2, [r7, #2]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f4a:	4b08      	ldr	r3, [pc, #32]	; (8002f6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d006      	beq.n	8002f64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f56:	4a05      	ldr	r2, [pc, #20]	; (8002f6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f58:	88fb      	ldrh	r3, [r7, #6]
 8002f5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 f806 	bl	8002f70 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40010400 	.word	0x40010400

08002f70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e081      	b.n	800309c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d106      	bne.n	8002fb2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7fe f891 	bl	80010d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2224      	movs	r2, #36	; 0x24
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0201 	bic.w	r2, r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fd6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fe6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d107      	bne.n	8003000 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ffc:	609a      	str	r2, [r3, #8]
 8002ffe:	e006      	b.n	800300e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800300c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d104      	bne.n	8003020 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800301e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800302e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003032:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003042:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69d9      	ldr	r1, [r3, #28]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1a      	ldr	r2, [r3, #32]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f042 0201 	orr.w	r2, r2, #1
 800307c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b20      	cmp	r3, #32
 80030b8:	d138      	bne.n	800312c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e032      	b.n	800312e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2224      	movs	r2, #36	; 0x24
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0201 	bic.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6819      	ldr	r1, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	e000      	b.n	800312e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800312c:	2302      	movs	r3, #2
  }
}
 800312e:	4618      	mov	r0, r3
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800313a:	b480      	push	{r7}
 800313c:	b085      	sub	sp, #20
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b20      	cmp	r3, #32
 800314e:	d139      	bne.n	80031c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003156:	2b01      	cmp	r3, #1
 8003158:	d101      	bne.n	800315e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800315a:	2302      	movs	r3, #2
 800315c:	e033      	b.n	80031c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2224      	movs	r2, #36	; 0x24
 800316a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0201 	bic.w	r2, r2, #1
 800317c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800318c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	021b      	lsls	r3, r3, #8
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4313      	orrs	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	e000      	b.n	80031c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031c4:	2302      	movs	r3, #2
  }
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af02      	add	r7, sp, #8
 80031da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80031e0:	f7fe fb94 	bl	800190c <HAL_GetTick>
 80031e4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d102      	bne.n	80031f2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
 80031f0:	e092      	b.n	8003318 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f040 808b 	bne.w	8003318 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fe f808 	bl	8001218 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003208:	f241 3188 	movw	r1, #5000	; 0x1388
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f88b 	bl	8003328 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	4b42      	ldr	r3, [pc, #264]	; (8003324 <HAL_OSPI_Init+0x150>)
 800321a:	4013      	ands	r3, r2
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	68d1      	ldr	r1, [r2, #12]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6912      	ldr	r2, [r2, #16]
 8003224:	3a01      	subs	r2, #1
 8003226:	0412      	lsls	r2, r2, #16
 8003228:	4311      	orrs	r1, r2
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6952      	ldr	r2, [r2, #20]
 800322e:	3a01      	subs	r2, #1
 8003230:	0212      	lsls	r2, r2, #8
 8003232:	4311      	orrs	r1, r2
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003238:	4311      	orrs	r1, r2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	69d2      	ldr	r2, [r2, #28]
 800323e:	4311      	orrs	r1, r2
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6812      	ldr	r2, [r2, #0]
 8003244:	430b      	orrs	r3, r1
 8003246:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	0412      	lsls	r2, r2, #16
 8003252:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	3b01      	subs	r3, #1
 8003264:	021a      	lsls	r2, r3, #8
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2200      	movs	r2, #0
 8003278:	2120      	movs	r1, #32
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fb98 	bl	80039b0 <OSPI_WaitFlagStateUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d146      	bne.n	8003318 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	1e5a      	subs	r2, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80032c0:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d107      	bne.n	8003300 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0202 	orr.w	r2, r2, #2
 80032fe:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003308:	d103      	bne.n	8003312 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	645a      	str	r2, [r3, #68]	; 0x44
 8003310:	e002      	b.n	8003318 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2202      	movs	r2, #2
 8003316:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003318:	7bfb      	ldrb	r3, [r7, #15]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	f8e0f8f4 	.word	0xf8e0f8f4

08003328 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b092      	sub	sp, #72	; 0x48
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a08      	ldr	r2, [pc, #32]	; (8003388 <HAL_OSPIM_Config+0x40>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d105      	bne.n	8003376 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 800336e:	2301      	movs	r3, #1
 8003370:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003374:	e004      	b.n	8003380 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003376:	2301      	movs	r3, #1
 8003378:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003380:	2300      	movs	r3, #0
 8003382:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003386:	e01f      	b.n	80033c8 <HAL_OSPIM_Config+0x80>
 8003388:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 800338c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003390:	3301      	adds	r3, #1
 8003392:	b2d8      	uxtb	r0, r3
 8003394:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003398:	f107 0114 	add.w	r1, r7, #20
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	4619      	mov	r1, r3
 80033a8:	f000 fb3a 	bl	8003a20 <OSPIM_GetConfig>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d005      	beq.n	80033be <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2208      	movs	r2, #8
 80033bc:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80033be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033c2:	3301      	adds	r3, #1
 80033c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80033c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d9dd      	bls.n	800338c <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80033d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f040 82de 	bne.w	8003996 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80033da:	4bc6      	ldr	r3, [pc, #792]	; (80036f4 <HAL_OSPIM_Config+0x3ac>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00b      	beq.n	80033fe <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80033e6:	4bc3      	ldr	r3, [pc, #780]	; (80036f4 <HAL_OSPIM_Config+0x3ac>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4ac2      	ldr	r2, [pc, #776]	; (80036f4 <HAL_OSPIM_Config+0x3ac>)
 80033ec:	f023 0301 	bic.w	r3, r3, #1
 80033f0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80033f2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80033fe:	4bbe      	ldr	r3, [pc, #760]	; (80036f8 <HAL_OSPIM_Config+0x3b0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00b      	beq.n	8003422 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800340a:	4bbb      	ldr	r3, [pc, #748]	; (80036f8 <HAL_OSPIM_Config+0x3b0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4aba      	ldr	r2, [pc, #744]	; (80036f8 <HAL_OSPIM_Config+0x3b0>)
 8003410:	f023 0301 	bic.w	r3, r3, #1
 8003414:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003416:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800341a:	f043 0302 	orr.w	r3, r3, #2
 800341e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003422:	49b6      	ldr	r1, [pc, #728]	; (80036fc <HAL_OSPIM_Config+0x3b4>)
 8003424:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003426:	4613      	mov	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	3348      	adds	r3, #72	; 0x48
 8003430:	443b      	add	r3, r7
 8003432:	3b2c      	subs	r3, #44	; 0x2c
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	3b01      	subs	r3, #1
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	6859      	ldr	r1, [r3, #4]
 800343e:	48af      	ldr	r0, [pc, #700]	; (80036fc <HAL_OSPIM_Config+0x3b4>)
 8003440:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	3348      	adds	r3, #72	; 0x48
 800344c:	443b      	add	r3, r7
 800344e:	3b2c      	subs	r3, #44	; 0x2c
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3b01      	subs	r3, #1
 8003454:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4403      	add	r3, r0
 800345c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 800345e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	3348      	adds	r3, #72	; 0x48
 800346a:	443b      	add	r3, r7
 800346c:	3b34      	subs	r3, #52	; 0x34
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80a1 	beq.w	80035b8 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003476:	49a1      	ldr	r1, [pc, #644]	; (80036fc <HAL_OSPIM_Config+0x3b4>)
 8003478:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	3348      	adds	r3, #72	; 0x48
 8003484:	443b      	add	r3, r7
 8003486:	3b34      	subs	r3, #52	; 0x34
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3b01      	subs	r3, #1
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	6859      	ldr	r1, [r3, #4]
 8003492:	489a      	ldr	r0, [pc, #616]	; (80036fc <HAL_OSPIM_Config+0x3b4>)
 8003494:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003496:	4613      	mov	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	3348      	adds	r3, #72	; 0x48
 80034a0:	443b      	add	r3, r7
 80034a2:	3b34      	subs	r3, #52	; 0x34
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	f021 0201 	bic.w	r2, r1, #1
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4403      	add	r3, r0
 80034b0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80034b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	3348      	adds	r3, #72	; 0x48
 80034be:	443b      	add	r3, r7
 80034c0:	3b30      	subs	r3, #48	; 0x30
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d01d      	beq.n	8003504 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80034c8:	498c      	ldr	r1, [pc, #560]	; (80036fc <HAL_OSPIM_Config+0x3b4>)
 80034ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	3348      	adds	r3, #72	; 0x48
 80034d6:	443b      	add	r3, r7
 80034d8:	3b30      	subs	r3, #48	; 0x30
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3b01      	subs	r3, #1
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	4885      	ldr	r0, [pc, #532]	; (80036fc <HAL_OSPIM_Config+0x3b4>)
 80034e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	3348      	adds	r3, #72	; 0x48
 80034f2:	443b      	add	r3, r7
 80034f4:	3b30      	subs	r3, #48	; 0x30
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	f021 0210 	bic.w	r2, r1, #16
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4403      	add	r3, r0
 8003502:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003504:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	3348      	adds	r3, #72	; 0x48
 8003510:	443b      	add	r3, r7
 8003512:	3b28      	subs	r3, #40	; 0x28
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d021      	beq.n	800355e <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800351a:	4978      	ldr	r1, [pc, #480]	; (80036fc <HAL_OSPIM_Config+0x3b4>)
 800351c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	3348      	adds	r3, #72	; 0x48
 8003528:	443b      	add	r3, r7
 800352a:	3b28      	subs	r3, #40	; 0x28
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	3b01      	subs	r3, #1
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	6859      	ldr	r1, [r3, #4]
 800353a:	4870      	ldr	r0, [pc, #448]	; (80036fc <HAL_OSPIM_Config+0x3b4>)
 800353c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800353e:	4613      	mov	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	3348      	adds	r3, #72	; 0x48
 8003548:	443b      	add	r3, r7
 800354a:	3b28      	subs	r3, #40	; 0x28
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3b01      	subs	r3, #1
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4403      	add	r3, r0
 800355c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800355e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	3348      	adds	r3, #72	; 0x48
 800356a:	443b      	add	r3, r7
 800356c:	3b24      	subs	r3, #36	; 0x24
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d021      	beq.n	80035b8 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003574:	4961      	ldr	r1, [pc, #388]	; (80036fc <HAL_OSPIM_Config+0x3b4>)
 8003576:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	3348      	adds	r3, #72	; 0x48
 8003582:	443b      	add	r3, r7
 8003584:	3b24      	subs	r3, #36	; 0x24
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3b01      	subs	r3, #1
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	6859      	ldr	r1, [r3, #4]
 8003594:	4859      	ldr	r0, [pc, #356]	; (80036fc <HAL_OSPIM_Config+0x3b4>)
 8003596:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	3348      	adds	r3, #72	; 0x48
 80035a2:	443b      	add	r3, r7
 80035a4:	3b24      	subs	r3, #36	; 0x24
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3b01      	subs	r3, #1
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4403      	add	r3, r0
 80035b6:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	6819      	ldr	r1, [r3, #0]
 80035bc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	3348      	adds	r3, #72	; 0x48
 80035ca:	443b      	add	r3, r7
 80035cc:	3b34      	subs	r3, #52	; 0x34
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4299      	cmp	r1, r3
 80035d2:	d038      	beq.n	8003646 <HAL_OSPIM_Config+0x2fe>
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	6859      	ldr	r1, [r3, #4]
 80035d8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	3348      	adds	r3, #72	; 0x48
 80035e6:	443b      	add	r3, r7
 80035e8:	3b30      	subs	r3, #48	; 0x30
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4299      	cmp	r1, r3
 80035ee:	d02a      	beq.n	8003646 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	6899      	ldr	r1, [r3, #8]
 80035f4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	3348      	adds	r3, #72	; 0x48
 8003602:	443b      	add	r3, r7
 8003604:	3b2c      	subs	r3, #44	; 0x2c
 8003606:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003608:	4299      	cmp	r1, r3
 800360a:	d01c      	beq.n	8003646 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	68d9      	ldr	r1, [r3, #12]
 8003610:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	3348      	adds	r3, #72	; 0x48
 800361e:	443b      	add	r3, r7
 8003620:	3b28      	subs	r3, #40	; 0x28
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4299      	cmp	r1, r3
 8003626:	d00e      	beq.n	8003646 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	6919      	ldr	r1, [r3, #16]
 800362c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	3348      	adds	r3, #72	; 0x48
 800363a:	443b      	add	r3, r7
 800363c:	3b24      	subs	r3, #36	; 0x24
 800363e:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003640:	4299      	cmp	r1, r3
 8003642:	f040 80d3 	bne.w	80037ec <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003646:	492d      	ldr	r1, [pc, #180]	; (80036fc <HAL_OSPIM_Config+0x3b4>)
 8003648:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	3348      	adds	r3, #72	; 0x48
 8003656:	443b      	add	r3, r7
 8003658:	3b34      	subs	r3, #52	; 0x34
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3b01      	subs	r3, #1
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	6859      	ldr	r1, [r3, #4]
 8003664:	4825      	ldr	r0, [pc, #148]	; (80036fc <HAL_OSPIM_Config+0x3b4>)
 8003666:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800366a:	4613      	mov	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	3348      	adds	r3, #72	; 0x48
 8003674:	443b      	add	r3, r7
 8003676:	3b34      	subs	r3, #52	; 0x34
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3b01      	subs	r3, #1
 800367c:	f021 0201 	bic.w	r2, r1, #1
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4403      	add	r3, r0
 8003684:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003686:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	3348      	adds	r3, #72	; 0x48
 8003694:	443b      	add	r3, r7
 8003696:	3b30      	subs	r3, #48	; 0x30
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d01f      	beq.n	80036de <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800369e:	4917      	ldr	r1, [pc, #92]	; (80036fc <HAL_OSPIM_Config+0x3b4>)
 80036a0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	3348      	adds	r3, #72	; 0x48
 80036ae:	443b      	add	r3, r7
 80036b0:	3b30      	subs	r3, #48	; 0x30
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3b01      	subs	r3, #1
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	6859      	ldr	r1, [r3, #4]
 80036bc:	480f      	ldr	r0, [pc, #60]	; (80036fc <HAL_OSPIM_Config+0x3b4>)
 80036be:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	3348      	adds	r3, #72	; 0x48
 80036cc:	443b      	add	r3, r7
 80036ce:	3b30      	subs	r3, #48	; 0x30
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	f021 0210 	bic.w	r2, r1, #16
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4403      	add	r3, r0
 80036dc:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80036de:	4907      	ldr	r1, [pc, #28]	; (80036fc <HAL_OSPIM_Config+0x3b4>)
 80036e0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	3348      	adds	r3, #72	; 0x48
 80036ee:	443b      	add	r3, r7
 80036f0:	3b2c      	subs	r3, #44	; 0x2c
 80036f2:	e005      	b.n	8003700 <HAL_OSPIM_Config+0x3b8>
 80036f4:	a0001000 	.word	0xa0001000
 80036f8:	a0001400 	.word	0xa0001400
 80036fc:	50061c00 	.word	0x50061c00
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3b01      	subs	r3, #1
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	6859      	ldr	r1, [r3, #4]
 800370a:	48a6      	ldr	r0, [pc, #664]	; (80039a4 <HAL_OSPIM_Config+0x65c>)
 800370c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	3348      	adds	r3, #72	; 0x48
 800371a:	443b      	add	r3, r7
 800371c:	3b2c      	subs	r3, #44	; 0x2c
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3b01      	subs	r3, #1
 8003722:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4403      	add	r3, r0
 800372a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800372c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	3348      	adds	r3, #72	; 0x48
 800373a:	443b      	add	r3, r7
 800373c:	3b28      	subs	r3, #40	; 0x28
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d023      	beq.n	800378c <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003744:	4997      	ldr	r1, [pc, #604]	; (80039a4 <HAL_OSPIM_Config+0x65c>)
 8003746:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	3348      	adds	r3, #72	; 0x48
 8003754:	443b      	add	r3, r7
 8003756:	3b28      	subs	r3, #40	; 0x28
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3b01      	subs	r3, #1
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	440b      	add	r3, r1
 8003764:	6859      	ldr	r1, [r3, #4]
 8003766:	488f      	ldr	r0, [pc, #572]	; (80039a4 <HAL_OSPIM_Config+0x65c>)
 8003768:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	3348      	adds	r3, #72	; 0x48
 8003776:	443b      	add	r3, r7
 8003778:	3b28      	subs	r3, #40	; 0x28
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3b01      	subs	r3, #1
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4403      	add	r3, r0
 800378a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800378c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	3348      	adds	r3, #72	; 0x48
 800379a:	443b      	add	r3, r7
 800379c:	3b24      	subs	r3, #36	; 0x24
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d023      	beq.n	80037ec <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80037a4:	497f      	ldr	r1, [pc, #508]	; (80039a4 <HAL_OSPIM_Config+0x65c>)
 80037a6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037aa:	4613      	mov	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	3348      	adds	r3, #72	; 0x48
 80037b4:	443b      	add	r3, r7
 80037b6:	3b24      	subs	r3, #36	; 0x24
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	6859      	ldr	r1, [r3, #4]
 80037c6:	4877      	ldr	r0, [pc, #476]	; (80039a4 <HAL_OSPIM_Config+0x65c>)
 80037c8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	3348      	adds	r3, #72	; 0x48
 80037d6:	443b      	add	r3, r7
 80037d8:	3b24      	subs	r3, #36	; 0x24
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3b01      	subs	r3, #1
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4403      	add	r3, r0
 80037ea:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80037ec:	4a6d      	ldr	r2, [pc, #436]	; (80039a4 <HAL_OSPIM_Config+0x65c>)
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003800:	025b      	lsls	r3, r3, #9
 8003802:	431a      	orrs	r2, r3
 8003804:	4967      	ldr	r1, [pc, #412]	; (80039a4 <HAL_OSPIM_Config+0x65c>)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	3b01      	subs	r3, #1
 800380c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003816:	4a63      	ldr	r2, [pc, #396]	; (80039a4 <HAL_OSPIM_Config+0x65c>)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3b01      	subs	r3, #1
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f023 0203 	bic.w	r2, r3, #3
 8003828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	431a      	orrs	r2, r3
 800382e:	495d      	ldr	r1, [pc, #372]	; (80039a4 <HAL_OSPIM_Config+0x65c>)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3b01      	subs	r3, #1
 8003836:	f042 0201 	orr.w	r2, r2, #1
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d014      	beq.n	8003872 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003848:	4a56      	ldr	r2, [pc, #344]	; (80039a4 <HAL_OSPIM_Config+0x65c>)
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	3b01      	subs	r3, #1
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800385a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800385c:	015b      	lsls	r3, r3, #5
 800385e:	431a      	orrs	r2, r3
 8003860:	4950      	ldr	r1, [pc, #320]	; (80039a4 <HAL_OSPIM_Config+0x65c>)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	3b01      	subs	r3, #1
 8003868:	f042 0210 	orr.w	r2, r2, #16
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d019      	beq.n	80038b2 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800387e:	4a49      	ldr	r2, [pc, #292]	; (80039a4 <HAL_OSPIM_Config+0x65c>)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	3b01      	subs	r3, #1
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003896:	049b      	lsls	r3, r3, #18
 8003898:	431a      	orrs	r2, r3
 800389a:	4942      	ldr	r1, [pc, #264]	; (80039a4 <HAL_OSPIM_Config+0x65c>)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	3b01      	subs	r3, #1
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	e01c      	b.n	80038ec <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d018      	beq.n	80038ec <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80038ba:	4a3a      	ldr	r2, [pc, #232]	; (80039a4 <HAL_OSPIM_Config+0x65c>)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	3b01      	subs	r3, #1
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80038d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d2:	069b      	lsls	r3, r3, #26
 80038d4:	431a      	orrs	r2, r3
 80038d6:	4933      	ldr	r1, [pc, #204]	; (80039a4 <HAL_OSPIM_Config+0x65c>)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	3b01      	subs	r3, #1
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d019      	beq.n	800392c <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80038f8:	4a2a      	ldr	r2, [pc, #168]	; (80039a4 <HAL_OSPIM_Config+0x65c>)
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	3b01      	subs	r3, #1
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800390e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003910:	049b      	lsls	r3, r3, #18
 8003912:	431a      	orrs	r2, r3
 8003914:	4923      	ldr	r1, [pc, #140]	; (80039a4 <HAL_OSPIM_Config+0x65c>)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	3b01      	subs	r3, #1
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	e01c      	b.n	8003966 <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d018      	beq.n	8003966 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003934:	4a1b      	ldr	r2, [pc, #108]	; (80039a4 <HAL_OSPIM_Config+0x65c>)
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	3b01      	subs	r3, #1
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800394a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800394c:	069b      	lsls	r3, r3, #26
 800394e:	431a      	orrs	r2, r3
 8003950:	4914      	ldr	r1, [pc, #80]	; (80039a4 <HAL_OSPIM_Config+0x65c>)
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	3b01      	subs	r3, #1
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003966:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d005      	beq.n	800397e <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003972:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <HAL_OSPIM_Config+0x660>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a0c      	ldr	r2, [pc, #48]	; (80039a8 <HAL_OSPIM_Config+0x660>)
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800397e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800398a:	4b08      	ldr	r3, [pc, #32]	; (80039ac <HAL_OSPIM_Config+0x664>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a07      	ldr	r2, [pc, #28]	; (80039ac <HAL_OSPIM_Config+0x664>)
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003996:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800399a:	4618      	mov	r0, r3
 800399c:	3748      	adds	r7, #72	; 0x48
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	50061c00 	.word	0x50061c00
 80039a8:	a0001000 	.word	0xa0001000
 80039ac:	a0001400 	.word	0xa0001400

080039b0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	4613      	mov	r3, r2
 80039be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80039c0:	e01a      	b.n	80039f8 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039c8:	d016      	beq.n	80039f8 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ca:	f7fd ff9f 	bl	800190c <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d302      	bcc.n	80039e0 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10b      	bne.n	80039f8 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039e6:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ec:	f043 0201 	orr.w	r2, r3, #1
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e00e      	b.n	8003a16 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6a1a      	ldr	r2, [r3, #32]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	4013      	ands	r3, r2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bf14      	ite	ne
 8003a06:	2301      	movne	r3, #1
 8003a08:	2300      	moveq	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	79fb      	ldrb	r3, [r7, #7]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d1d6      	bne.n	80039c2 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	6039      	str	r1, [r7, #0]
 8003a2a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <OSPIM_GetConfig+0x26>
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d802      	bhi.n	8003a46 <OSPIM_GetConfig+0x26>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d102      	bne.n	8003a4c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	75fb      	strb	r3, [r7, #23]
 8003a4a:	e08e      	b.n	8003b6a <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2200      	movs	r2, #0
 8003a56:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2200      	movs	r2, #0
 8003a62:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2200      	movs	r2, #0
 8003a68:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003a6a:	79fb      	ldrb	r3, [r7, #7]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d101      	bne.n	8003a74 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003a70:	4b41      	ldr	r3, [pc, #260]	; (8003b78 <OSPIM_GetConfig+0x158>)
 8003a72:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	e074      	b.n	8003b64 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8003a7a:	4a40      	ldr	r2, [pc, #256]	; (8003b7c <OSPIM_GetConfig+0x15c>)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4053      	eors	r3, r2
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d103      	bne.n	8003aa6 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00a      	beq.n	8003ac6 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4053      	eors	r3, r2
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d103      	bne.n	8003ac6 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00a      	beq.n	8003ae6 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4053      	eors	r3, r2
 8003ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d103      	bne.n	8003ae6 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d018      	beq.n	8003b22 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	4053      	eors	r3, r2
 8003af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d111      	bne.n	8003b22 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d106      	bne.n	8003b16 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	60da      	str	r2, [r3, #12]
 8003b14:	e005      	b.n	8003b22 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d018      	beq.n	8003b5e <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4053      	eors	r3, r2
 8003b32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d111      	bne.n	8003b5e <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d106      	bne.n	8003b52 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	3301      	adds	r3, #1
 8003b48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	611a      	str	r2, [r3, #16]
 8003b50:	e005      	b.n	8003b5e <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	3301      	adds	r3, #1
 8003b56:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3301      	adds	r3, #1
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d987      	bls.n	8003a7a <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8003b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	04040222 	.word	0x04040222
 8003b7c:	50061c00 	.word	0x50061c00

08003b80 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b84:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a04      	ldr	r2, [pc, #16]	; (8003b9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8e:	6013      	str	r3, [r2, #0]
}
 8003b90:	bf00      	nop
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40007000 	.word	0x40007000

08003ba0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ba4:	4b0d      	ldr	r3, [pc, #52]	; (8003bdc <HAL_PWREx_GetVoltageRange+0x3c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb0:	d102      	bne.n	8003bb8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bb6:	e00b      	b.n	8003bd0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003bb8:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <HAL_PWREx_GetVoltageRange+0x3c>)
 8003bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bc6:	d102      	bne.n	8003bce <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bcc:	e000      	b.n	8003bd0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003bce:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	40007000 	.word	0x40007000

08003be0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d141      	bne.n	8003c72 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bee:	4b4b      	ldr	r3, [pc, #300]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bfa:	d131      	bne.n	8003c60 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bfc:	4b47      	ldr	r3, [pc, #284]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c02:	4a46      	ldr	r2, [pc, #280]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c0c:	4b43      	ldr	r3, [pc, #268]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c14:	4a41      	ldr	r2, [pc, #260]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003c1c:	4b40      	ldr	r3, [pc, #256]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2232      	movs	r2, #50	; 0x32
 8003c22:	fb02 f303 	mul.w	r3, r2, r3
 8003c26:	4a3f      	ldr	r2, [pc, #252]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c28:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2c:	0c9b      	lsrs	r3, r3, #18
 8003c2e:	3301      	adds	r3, #1
 8003c30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c32:	e002      	b.n	8003c3a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c3a:	4b38      	ldr	r3, [pc, #224]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c46:	d102      	bne.n	8003c4e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f2      	bne.n	8003c34 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c4e:	4b33      	ldr	r3, [pc, #204]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c5a:	d158      	bne.n	8003d0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e057      	b.n	8003d10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c60:	4b2e      	ldr	r3, [pc, #184]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c66:	4a2d      	ldr	r2, [pc, #180]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c70:	e04d      	b.n	8003d0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c78:	d141      	bne.n	8003cfe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c7a:	4b28      	ldr	r3, [pc, #160]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c86:	d131      	bne.n	8003cec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c88:	4b24      	ldr	r3, [pc, #144]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c8e:	4a23      	ldr	r2, [pc, #140]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c98:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ca0:	4a1e      	ldr	r2, [pc, #120]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ca6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003ca8:	4b1d      	ldr	r3, [pc, #116]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2232      	movs	r2, #50	; 0x32
 8003cae:	fb02 f303 	mul.w	r3, r2, r3
 8003cb2:	4a1c      	ldr	r2, [pc, #112]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb8:	0c9b      	lsrs	r3, r3, #18
 8003cba:	3301      	adds	r3, #1
 8003cbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cbe:	e002      	b.n	8003cc6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cc6:	4b15      	ldr	r3, [pc, #84]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd2:	d102      	bne.n	8003cda <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f2      	bne.n	8003cc0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cda:	4b10      	ldr	r3, [pc, #64]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce6:	d112      	bne.n	8003d0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e011      	b.n	8003d10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cec:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cf2:	4a0a      	ldr	r2, [pc, #40]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003cfc:	e007      	b.n	8003d0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cfe:	4b07      	ldr	r3, [pc, #28]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d06:	4a05      	ldr	r2, [pc, #20]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d0c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	40007000 	.word	0x40007000
 8003d20:	2000000c 	.word	0x2000000c
 8003d24:	431bde83 	.word	0x431bde83

08003d28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d102      	bne.n	8003d3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f000 bc08 	b.w	800454c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d3c:	4b96      	ldr	r3, [pc, #600]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 030c 	and.w	r3, r3, #12
 8003d44:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d46:	4b94      	ldr	r3, [pc, #592]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80e4 	beq.w	8003f26 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d007      	beq.n	8003d74 <HAL_RCC_OscConfig+0x4c>
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	2b0c      	cmp	r3, #12
 8003d68:	f040 808b 	bne.w	8003e82 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	f040 8087 	bne.w	8003e82 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d74:	4b88      	ldr	r3, [pc, #544]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_RCC_OscConfig+0x64>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e3df      	b.n	800454c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1a      	ldr	r2, [r3, #32]
 8003d90:	4b81      	ldr	r3, [pc, #516]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d004      	beq.n	8003da6 <HAL_RCC_OscConfig+0x7e>
 8003d9c:	4b7e      	ldr	r3, [pc, #504]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003da4:	e005      	b.n	8003db2 <HAL_RCC_OscConfig+0x8a>
 8003da6:	4b7c      	ldr	r3, [pc, #496]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d223      	bcs.n	8003dfe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fdcc 	bl	8004958 <RCC_SetFlashLatencyFromMSIRange>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e3c0      	b.n	800454c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dca:	4b73      	ldr	r3, [pc, #460]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a72      	ldr	r2, [pc, #456]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003dd0:	f043 0308 	orr.w	r3, r3, #8
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	4b70      	ldr	r3, [pc, #448]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	496d      	ldr	r1, [pc, #436]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003de8:	4b6b      	ldr	r3, [pc, #428]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	021b      	lsls	r3, r3, #8
 8003df6:	4968      	ldr	r1, [pc, #416]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	604b      	str	r3, [r1, #4]
 8003dfc:	e025      	b.n	8003e4a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dfe:	4b66      	ldr	r3, [pc, #408]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a65      	ldr	r2, [pc, #404]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003e04:	f043 0308 	orr.w	r3, r3, #8
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	4b63      	ldr	r3, [pc, #396]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	4960      	ldr	r1, [pc, #384]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e1c:	4b5e      	ldr	r3, [pc, #376]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	021b      	lsls	r3, r3, #8
 8003e2a:	495b      	ldr	r1, [pc, #364]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d109      	bne.n	8003e4a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fd8c 	bl	8004958 <RCC_SetFlashLatencyFromMSIRange>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e380      	b.n	800454c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e4a:	f000 fcc1 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	4b51      	ldr	r3, [pc, #324]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	091b      	lsrs	r3, r3, #4
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	4950      	ldr	r1, [pc, #320]	; (8003f9c <HAL_RCC_OscConfig+0x274>)
 8003e5c:	5ccb      	ldrb	r3, [r1, r3]
 8003e5e:	f003 031f 	and.w	r3, r3, #31
 8003e62:	fa22 f303 	lsr.w	r3, r2, r3
 8003e66:	4a4e      	ldr	r2, [pc, #312]	; (8003fa0 <HAL_RCC_OscConfig+0x278>)
 8003e68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e6a:	4b4e      	ldr	r3, [pc, #312]	; (8003fa4 <HAL_RCC_OscConfig+0x27c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fd fcfc 	bl	800186c <HAL_InitTick>
 8003e74:	4603      	mov	r3, r0
 8003e76:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d052      	beq.n	8003f24 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	e364      	b.n	800454c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d032      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e8a:	4b43      	ldr	r3, [pc, #268]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a42      	ldr	r2, [pc, #264]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e96:	f7fd fd39 	bl	800190c <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e9e:	f7fd fd35 	bl	800190c <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e34d      	b.n	800454c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eb0:	4b39      	ldr	r3, [pc, #228]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f0      	beq.n	8003e9e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ebc:	4b36      	ldr	r3, [pc, #216]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a35      	ldr	r2, [pc, #212]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003ec2:	f043 0308 	orr.w	r3, r3, #8
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	4b33      	ldr	r3, [pc, #204]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	4930      	ldr	r1, [pc, #192]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eda:	4b2f      	ldr	r3, [pc, #188]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	021b      	lsls	r3, r3, #8
 8003ee8:	492b      	ldr	r1, [pc, #172]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	604b      	str	r3, [r1, #4]
 8003eee:	e01a      	b.n	8003f26 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ef0:	4b29      	ldr	r3, [pc, #164]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a28      	ldr	r2, [pc, #160]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003ef6:	f023 0301 	bic.w	r3, r3, #1
 8003efa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003efc:	f7fd fd06 	bl	800190c <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f04:	f7fd fd02 	bl	800190c <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e31a      	b.n	800454c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f16:	4b20      	ldr	r3, [pc, #128]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0x1dc>
 8003f22:	e000      	b.n	8003f26 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d073      	beq.n	800401a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d005      	beq.n	8003f44 <HAL_RCC_OscConfig+0x21c>
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b0c      	cmp	r3, #12
 8003f3c:	d10e      	bne.n	8003f5c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d10b      	bne.n	8003f5c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f44:	4b14      	ldr	r3, [pc, #80]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d063      	beq.n	8004018 <HAL_RCC_OscConfig+0x2f0>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d15f      	bne.n	8004018 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e2f7      	b.n	800454c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f64:	d106      	bne.n	8003f74 <HAL_RCC_OscConfig+0x24c>
 8003f66:	4b0c      	ldr	r3, [pc, #48]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a0b      	ldr	r2, [pc, #44]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	e025      	b.n	8003fc0 <HAL_RCC_OscConfig+0x298>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f7c:	d114      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x280>
 8003f7e:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a05      	ldr	r2, [pc, #20]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	4b03      	ldr	r3, [pc, #12]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a02      	ldr	r2, [pc, #8]	; (8003f98 <HAL_RCC_OscConfig+0x270>)
 8003f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	e013      	b.n	8003fc0 <HAL_RCC_OscConfig+0x298>
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	08008334 	.word	0x08008334
 8003fa0:	2000000c 	.word	0x2000000c
 8003fa4:	20000010 	.word	0x20000010
 8003fa8:	4ba0      	ldr	r3, [pc, #640]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a9f      	ldr	r2, [pc, #636]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8003fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	4b9d      	ldr	r3, [pc, #628]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a9c      	ldr	r2, [pc, #624]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8003fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d013      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc8:	f7fd fca0 	bl	800190c <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fd0:	f7fd fc9c 	bl	800190c <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b64      	cmp	r3, #100	; 0x64
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e2b4      	b.n	800454c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fe2:	4b92      	ldr	r3, [pc, #584]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x2a8>
 8003fee:	e014      	b.n	800401a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff0:	f7fd fc8c 	bl	800190c <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff8:	f7fd fc88 	bl	800190c <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b64      	cmp	r3, #100	; 0x64
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e2a0      	b.n	800454c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800400a:	4b88      	ldr	r3, [pc, #544]	; (800422c <HAL_RCC_OscConfig+0x504>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x2d0>
 8004016:	e000      	b.n	800401a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d060      	beq.n	80040e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	2b04      	cmp	r3, #4
 800402a:	d005      	beq.n	8004038 <HAL_RCC_OscConfig+0x310>
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2b0c      	cmp	r3, #12
 8004030:	d119      	bne.n	8004066 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b02      	cmp	r3, #2
 8004036:	d116      	bne.n	8004066 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004038:	4b7c      	ldr	r3, [pc, #496]	; (800422c <HAL_RCC_OscConfig+0x504>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_RCC_OscConfig+0x328>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e27d      	b.n	800454c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004050:	4b76      	ldr	r3, [pc, #472]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	061b      	lsls	r3, r3, #24
 800405e:	4973      	ldr	r1, [pc, #460]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004060:	4313      	orrs	r3, r2
 8004062:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004064:	e040      	b.n	80040e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d023      	beq.n	80040b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800406e:	4b6f      	ldr	r3, [pc, #444]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a6e      	ldr	r2, [pc, #440]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407a:	f7fd fc47 	bl	800190c <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004082:	f7fd fc43 	bl	800190c <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e25b      	b.n	800454c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004094:	4b65      	ldr	r3, [pc, #404]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0f0      	beq.n	8004082 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a0:	4b62      	ldr	r3, [pc, #392]	; (800422c <HAL_RCC_OscConfig+0x504>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	061b      	lsls	r3, r3, #24
 80040ae:	495f      	ldr	r1, [pc, #380]	; (800422c <HAL_RCC_OscConfig+0x504>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	604b      	str	r3, [r1, #4]
 80040b4:	e018      	b.n	80040e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040b6:	4b5d      	ldr	r3, [pc, #372]	; (800422c <HAL_RCC_OscConfig+0x504>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a5c      	ldr	r2, [pc, #368]	; (800422c <HAL_RCC_OscConfig+0x504>)
 80040bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c2:	f7fd fc23 	bl	800190c <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ca:	f7fd fc1f 	bl	800190c <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e237      	b.n	800454c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040dc:	4b53      	ldr	r3, [pc, #332]	; (800422c <HAL_RCC_OscConfig+0x504>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f0      	bne.n	80040ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d03c      	beq.n	800416e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01c      	beq.n	8004136 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040fc:	4b4b      	ldr	r3, [pc, #300]	; (800422c <HAL_RCC_OscConfig+0x504>)
 80040fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004102:	4a4a      	ldr	r2, [pc, #296]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410c:	f7fd fbfe 	bl	800190c <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004114:	f7fd fbfa 	bl	800190c <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e212      	b.n	800454c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004126:	4b41      	ldr	r3, [pc, #260]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0ef      	beq.n	8004114 <HAL_RCC_OscConfig+0x3ec>
 8004134:	e01b      	b.n	800416e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004136:	4b3d      	ldr	r3, [pc, #244]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800413c:	4a3b      	ldr	r2, [pc, #236]	; (800422c <HAL_RCC_OscConfig+0x504>)
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004146:	f7fd fbe1 	bl	800190c <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800414e:	f7fd fbdd 	bl	800190c <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e1f5      	b.n	800454c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004160:	4b32      	ldr	r3, [pc, #200]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1ef      	bne.n	800414e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 80a6 	beq.w	80042c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800417c:	2300      	movs	r3, #0
 800417e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004180:	4b2a      	ldr	r3, [pc, #168]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10d      	bne.n	80041a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800418c:	4b27      	ldr	r3, [pc, #156]	; (800422c <HAL_RCC_OscConfig+0x504>)
 800418e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004190:	4a26      	ldr	r2, [pc, #152]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004196:	6593      	str	r3, [r2, #88]	; 0x58
 8004198:	4b24      	ldr	r3, [pc, #144]	; (800422c <HAL_RCC_OscConfig+0x504>)
 800419a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a0:	60bb      	str	r3, [r7, #8]
 80041a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a4:	2301      	movs	r3, #1
 80041a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041a8:	4b21      	ldr	r3, [pc, #132]	; (8004230 <HAL_RCC_OscConfig+0x508>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d118      	bne.n	80041e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041b4:	4b1e      	ldr	r3, [pc, #120]	; (8004230 <HAL_RCC_OscConfig+0x508>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a1d      	ldr	r2, [pc, #116]	; (8004230 <HAL_RCC_OscConfig+0x508>)
 80041ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041c0:	f7fd fba4 	bl	800190c <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c8:	f7fd fba0 	bl	800190c <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e1b8      	b.n	800454c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041da:	4b15      	ldr	r3, [pc, #84]	; (8004230 <HAL_RCC_OscConfig+0x508>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d108      	bne.n	8004200 <HAL_RCC_OscConfig+0x4d8>
 80041ee:	4b0f      	ldr	r3, [pc, #60]	; (800422c <HAL_RCC_OscConfig+0x504>)
 80041f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f4:	4a0d      	ldr	r2, [pc, #52]	; (800422c <HAL_RCC_OscConfig+0x504>)
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041fe:	e029      	b.n	8004254 <HAL_RCC_OscConfig+0x52c>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2b05      	cmp	r3, #5
 8004206:	d115      	bne.n	8004234 <HAL_RCC_OscConfig+0x50c>
 8004208:	4b08      	ldr	r3, [pc, #32]	; (800422c <HAL_RCC_OscConfig+0x504>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420e:	4a07      	ldr	r2, [pc, #28]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004210:	f043 0304 	orr.w	r3, r3, #4
 8004214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004218:	4b04      	ldr	r3, [pc, #16]	; (800422c <HAL_RCC_OscConfig+0x504>)
 800421a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421e:	4a03      	ldr	r2, [pc, #12]	; (800422c <HAL_RCC_OscConfig+0x504>)
 8004220:	f043 0301 	orr.w	r3, r3, #1
 8004224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004228:	e014      	b.n	8004254 <HAL_RCC_OscConfig+0x52c>
 800422a:	bf00      	nop
 800422c:	40021000 	.word	0x40021000
 8004230:	40007000 	.word	0x40007000
 8004234:	4b9d      	ldr	r3, [pc, #628]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423a:	4a9c      	ldr	r2, [pc, #624]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 800423c:	f023 0301 	bic.w	r3, r3, #1
 8004240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004244:	4b99      	ldr	r3, [pc, #612]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	4a98      	ldr	r2, [pc, #608]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 800424c:	f023 0304 	bic.w	r3, r3, #4
 8004250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d016      	beq.n	800428a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425c:	f7fd fb56 	bl	800190c <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004262:	e00a      	b.n	800427a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004264:	f7fd fb52 	bl	800190c <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004272:	4293      	cmp	r3, r2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e168      	b.n	800454c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800427a:	4b8c      	ldr	r3, [pc, #560]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 800427c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0ed      	beq.n	8004264 <HAL_RCC_OscConfig+0x53c>
 8004288:	e015      	b.n	80042b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428a:	f7fd fb3f 	bl	800190c <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004290:	e00a      	b.n	80042a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004292:	f7fd fb3b 	bl	800190c <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e151      	b.n	800454c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042a8:	4b80      	ldr	r3, [pc, #512]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 80042aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1ed      	bne.n	8004292 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042b6:	7ffb      	ldrb	r3, [r7, #31]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d105      	bne.n	80042c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042bc:	4b7b      	ldr	r3, [pc, #492]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 80042be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c0:	4a7a      	ldr	r2, [pc, #488]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 80042c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d03c      	beq.n	800434e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01c      	beq.n	8004316 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042dc:	4b73      	ldr	r3, [pc, #460]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 80042de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042e2:	4a72      	ldr	r2, [pc, #456]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 80042e4:	f043 0301 	orr.w	r3, r3, #1
 80042e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ec:	f7fd fb0e 	bl	800190c <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042f4:	f7fd fb0a 	bl	800190c <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e122      	b.n	800454c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004306:	4b69      	ldr	r3, [pc, #420]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 8004308:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0ef      	beq.n	80042f4 <HAL_RCC_OscConfig+0x5cc>
 8004314:	e01b      	b.n	800434e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004316:	4b65      	ldr	r3, [pc, #404]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 8004318:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800431c:	4a63      	ldr	r2, [pc, #396]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 800431e:	f023 0301 	bic.w	r3, r3, #1
 8004322:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004326:	f7fd faf1 	bl	800190c <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800432e:	f7fd faed 	bl	800190c <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e105      	b.n	800454c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004340:	4b5a      	ldr	r3, [pc, #360]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 8004342:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1ef      	bne.n	800432e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 80f9 	beq.w	800454a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435c:	2b02      	cmp	r3, #2
 800435e:	f040 80cf 	bne.w	8004500 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004362:	4b52      	ldr	r3, [pc, #328]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f003 0203 	and.w	r2, r3, #3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	429a      	cmp	r2, r3
 8004374:	d12c      	bne.n	80043d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	3b01      	subs	r3, #1
 8004382:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004384:	429a      	cmp	r2, r3
 8004386:	d123      	bne.n	80043d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004392:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004394:	429a      	cmp	r2, r3
 8004396:	d11b      	bne.n	80043d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d113      	bne.n	80043d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b2:	085b      	lsrs	r3, r3, #1
 80043b4:	3b01      	subs	r3, #1
 80043b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d109      	bne.n	80043d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	085b      	lsrs	r3, r3, #1
 80043c8:	3b01      	subs	r3, #1
 80043ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d071      	beq.n	80044b4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	2b0c      	cmp	r3, #12
 80043d4:	d068      	beq.n	80044a8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043d6:	4b35      	ldr	r3, [pc, #212]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d105      	bne.n	80043ee <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80043e2:	4b32      	ldr	r3, [pc, #200]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e0ac      	b.n	800454c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043f2:	4b2e      	ldr	r3, [pc, #184]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a2d      	ldr	r2, [pc, #180]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 80043f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043fe:	f7fd fa85 	bl	800190c <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004406:	f7fd fa81 	bl	800190c <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e099      	b.n	800454c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004418:	4b24      	ldr	r3, [pc, #144]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1f0      	bne.n	8004406 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004424:	4b21      	ldr	r3, [pc, #132]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	4b21      	ldr	r3, [pc, #132]	; (80044b0 <HAL_RCC_OscConfig+0x788>)
 800442a:	4013      	ands	r3, r2
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004434:	3a01      	subs	r2, #1
 8004436:	0112      	lsls	r2, r2, #4
 8004438:	4311      	orrs	r1, r2
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800443e:	0212      	lsls	r2, r2, #8
 8004440:	4311      	orrs	r1, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004446:	0852      	lsrs	r2, r2, #1
 8004448:	3a01      	subs	r2, #1
 800444a:	0552      	lsls	r2, r2, #21
 800444c:	4311      	orrs	r1, r2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004452:	0852      	lsrs	r2, r2, #1
 8004454:	3a01      	subs	r2, #1
 8004456:	0652      	lsls	r2, r2, #25
 8004458:	4311      	orrs	r1, r2
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800445e:	06d2      	lsls	r2, r2, #27
 8004460:	430a      	orrs	r2, r1
 8004462:	4912      	ldr	r1, [pc, #72]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 8004464:	4313      	orrs	r3, r2
 8004466:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004468:	4b10      	ldr	r3, [pc, #64]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a0f      	ldr	r2, [pc, #60]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 800446e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004472:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004474:	4b0d      	ldr	r3, [pc, #52]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4a0c      	ldr	r2, [pc, #48]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 800447a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800447e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004480:	f7fd fa44 	bl	800190c <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004488:	f7fd fa40 	bl	800190c <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e058      	b.n	800454c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800449a:	4b04      	ldr	r3, [pc, #16]	; (80044ac <HAL_RCC_OscConfig+0x784>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044a6:	e050      	b.n	800454a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e04f      	b.n	800454c <HAL_RCC_OscConfig+0x824>
 80044ac:	40021000 	.word	0x40021000
 80044b0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044b4:	4b27      	ldr	r3, [pc, #156]	; (8004554 <HAL_RCC_OscConfig+0x82c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d144      	bne.n	800454a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044c0:	4b24      	ldr	r3, [pc, #144]	; (8004554 <HAL_RCC_OscConfig+0x82c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a23      	ldr	r2, [pc, #140]	; (8004554 <HAL_RCC_OscConfig+0x82c>)
 80044c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044cc:	4b21      	ldr	r3, [pc, #132]	; (8004554 <HAL_RCC_OscConfig+0x82c>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	4a20      	ldr	r2, [pc, #128]	; (8004554 <HAL_RCC_OscConfig+0x82c>)
 80044d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044d8:	f7fd fa18 	bl	800190c <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e0:	f7fd fa14 	bl	800190c <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e02c      	b.n	800454c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044f2:	4b18      	ldr	r3, [pc, #96]	; (8004554 <HAL_RCC_OscConfig+0x82c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0x7b8>
 80044fe:	e024      	b.n	800454a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	2b0c      	cmp	r3, #12
 8004504:	d01f      	beq.n	8004546 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004506:	4b13      	ldr	r3, [pc, #76]	; (8004554 <HAL_RCC_OscConfig+0x82c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a12      	ldr	r2, [pc, #72]	; (8004554 <HAL_RCC_OscConfig+0x82c>)
 800450c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004512:	f7fd f9fb 	bl	800190c <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800451a:	f7fd f9f7 	bl	800190c <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e00f      	b.n	800454c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800452c:	4b09      	ldr	r3, [pc, #36]	; (8004554 <HAL_RCC_OscConfig+0x82c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1f0      	bne.n	800451a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004538:	4b06      	ldr	r3, [pc, #24]	; (8004554 <HAL_RCC_OscConfig+0x82c>)
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	4905      	ldr	r1, [pc, #20]	; (8004554 <HAL_RCC_OscConfig+0x82c>)
 800453e:	4b06      	ldr	r3, [pc, #24]	; (8004558 <HAL_RCC_OscConfig+0x830>)
 8004540:	4013      	ands	r3, r2
 8004542:	60cb      	str	r3, [r1, #12]
 8004544:	e001      	b.n	800454a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e000      	b.n	800454c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3720      	adds	r7, #32
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40021000 	.word	0x40021000
 8004558:	feeefffc 	.word	0xfeeefffc

0800455c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e11d      	b.n	80047b0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004574:	4b90      	ldr	r3, [pc, #576]	; (80047b8 <HAL_RCC_ClockConfig+0x25c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 030f 	and.w	r3, r3, #15
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d910      	bls.n	80045a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004582:	4b8d      	ldr	r3, [pc, #564]	; (80047b8 <HAL_RCC_ClockConfig+0x25c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f023 020f 	bic.w	r2, r3, #15
 800458a:	498b      	ldr	r1, [pc, #556]	; (80047b8 <HAL_RCC_ClockConfig+0x25c>)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004592:	4b89      	ldr	r3, [pc, #548]	; (80047b8 <HAL_RCC_ClockConfig+0x25c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d001      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e105      	b.n	80047b0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d010      	beq.n	80045d2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	4b81      	ldr	r3, [pc, #516]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045bc:	429a      	cmp	r2, r3
 80045be:	d908      	bls.n	80045d2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045c0:	4b7e      	ldr	r3, [pc, #504]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	497b      	ldr	r1, [pc, #492]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d079      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d11e      	bne.n	8004624 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045e6:	4b75      	ldr	r3, [pc, #468]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e0dc      	b.n	80047b0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80045f6:	f000 fa09 	bl	8004a0c <RCC_GetSysClockFreqFromPLLSource>
 80045fa:	4603      	mov	r3, r0
 80045fc:	4a70      	ldr	r2, [pc, #448]	; (80047c0 <HAL_RCC_ClockConfig+0x264>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d946      	bls.n	8004690 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004602:	4b6e      	ldr	r3, [pc, #440]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d140      	bne.n	8004690 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800460e:	4b6b      	ldr	r3, [pc, #428]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004616:	4a69      	ldr	r2, [pc, #420]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800461c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800461e:	2380      	movs	r3, #128	; 0x80
 8004620:	617b      	str	r3, [r7, #20]
 8004622:	e035      	b.n	8004690 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b02      	cmp	r3, #2
 800462a:	d107      	bne.n	800463c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800462c:	4b63      	ldr	r3, [pc, #396]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d115      	bne.n	8004664 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e0b9      	b.n	80047b0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d107      	bne.n	8004654 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004644:	4b5d      	ldr	r3, [pc, #372]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d109      	bne.n	8004664 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e0ad      	b.n	80047b0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004654:	4b59      	ldr	r3, [pc, #356]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e0a5      	b.n	80047b0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004664:	f000 f8b4 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 8004668:	4603      	mov	r3, r0
 800466a:	4a55      	ldr	r2, [pc, #340]	; (80047c0 <HAL_RCC_ClockConfig+0x264>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d90f      	bls.n	8004690 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004670:	4b52      	ldr	r3, [pc, #328]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d109      	bne.n	8004690 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800467c:	4b4f      	ldr	r3, [pc, #316]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004684:	4a4d      	ldr	r2, [pc, #308]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800468c:	2380      	movs	r3, #128	; 0x80
 800468e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004690:	4b4a      	ldr	r3, [pc, #296]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f023 0203 	bic.w	r2, r3, #3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	4947      	ldr	r1, [pc, #284]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a2:	f7fd f933 	bl	800190c <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a8:	e00a      	b.n	80046c0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046aa:	f7fd f92f 	bl	800190c <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e077      	b.n	80047b0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c0:	4b3e      	ldr	r3, [pc, #248]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 020c 	and.w	r2, r3, #12
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d1eb      	bne.n	80046aa <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2b80      	cmp	r3, #128	; 0x80
 80046d6:	d105      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80046d8:	4b38      	ldr	r3, [pc, #224]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	4a37      	ldr	r2, [pc, #220]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 80046de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046e2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d010      	beq.n	8004712 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	4b31      	ldr	r3, [pc, #196]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d208      	bcs.n	8004712 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004700:	4b2e      	ldr	r3, [pc, #184]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	492b      	ldr	r1, [pc, #172]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 800470e:	4313      	orrs	r3, r2
 8004710:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004712:	4b29      	ldr	r3, [pc, #164]	; (80047b8 <HAL_RCC_ClockConfig+0x25c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	429a      	cmp	r2, r3
 800471e:	d210      	bcs.n	8004742 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004720:	4b25      	ldr	r3, [pc, #148]	; (80047b8 <HAL_RCC_ClockConfig+0x25c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f023 020f 	bic.w	r2, r3, #15
 8004728:	4923      	ldr	r1, [pc, #140]	; (80047b8 <HAL_RCC_ClockConfig+0x25c>)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	4313      	orrs	r3, r2
 800472e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004730:	4b21      	ldr	r3, [pc, #132]	; (80047b8 <HAL_RCC_ClockConfig+0x25c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 030f 	and.w	r3, r3, #15
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d001      	beq.n	8004742 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e036      	b.n	80047b0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0304 	and.w	r3, r3, #4
 800474a:	2b00      	cmp	r3, #0
 800474c:	d008      	beq.n	8004760 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800474e:	4b1b      	ldr	r3, [pc, #108]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	4918      	ldr	r1, [pc, #96]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 800475c:	4313      	orrs	r3, r2
 800475e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b00      	cmp	r3, #0
 800476a:	d009      	beq.n	8004780 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800476c:	4b13      	ldr	r3, [pc, #76]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	4910      	ldr	r1, [pc, #64]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 800477c:	4313      	orrs	r3, r2
 800477e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004780:	f000 f826 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 8004784:	4602      	mov	r2, r0
 8004786:	4b0d      	ldr	r3, [pc, #52]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	091b      	lsrs	r3, r3, #4
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	490c      	ldr	r1, [pc, #48]	; (80047c4 <HAL_RCC_ClockConfig+0x268>)
 8004792:	5ccb      	ldrb	r3, [r1, r3]
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
 800479c:	4a0a      	ldr	r2, [pc, #40]	; (80047c8 <HAL_RCC_ClockConfig+0x26c>)
 800479e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80047a0:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <HAL_RCC_ClockConfig+0x270>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fd f861 	bl	800186c <HAL_InitTick>
 80047aa:	4603      	mov	r3, r0
 80047ac:	73fb      	strb	r3, [r7, #15]

  return status;
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40022000 	.word	0x40022000
 80047bc:	40021000 	.word	0x40021000
 80047c0:	04c4b400 	.word	0x04c4b400
 80047c4:	08008334 	.word	0x08008334
 80047c8:	2000000c 	.word	0x2000000c
 80047cc:	20000010 	.word	0x20000010

080047d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b089      	sub	sp, #36	; 0x24
 80047d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	2300      	movs	r3, #0
 80047dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047de:	4b3e      	ldr	r3, [pc, #248]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 030c 	and.w	r3, r3, #12
 80047e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047e8:	4b3b      	ldr	r3, [pc, #236]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_RCC_GetSysClockFreq+0x34>
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	2b0c      	cmp	r3, #12
 80047fc:	d121      	bne.n	8004842 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d11e      	bne.n	8004842 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004804:	4b34      	ldr	r3, [pc, #208]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b00      	cmp	r3, #0
 800480e:	d107      	bne.n	8004820 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004810:	4b31      	ldr	r3, [pc, #196]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004816:	0a1b      	lsrs	r3, r3, #8
 8004818:	f003 030f 	and.w	r3, r3, #15
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	e005      	b.n	800482c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004820:	4b2d      	ldr	r3, [pc, #180]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	091b      	lsrs	r3, r3, #4
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800482c:	4a2b      	ldr	r2, [pc, #172]	; (80048dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004834:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10d      	bne.n	8004858 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004840:	e00a      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b04      	cmp	r3, #4
 8004846:	d102      	bne.n	800484e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004848:	4b25      	ldr	r3, [pc, #148]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	e004      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b08      	cmp	r3, #8
 8004852:	d101      	bne.n	8004858 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004854:	4b23      	ldr	r3, [pc, #140]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004856:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	2b0c      	cmp	r3, #12
 800485c:	d134      	bne.n	80048c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800485e:	4b1e      	ldr	r3, [pc, #120]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b02      	cmp	r3, #2
 800486c:	d003      	beq.n	8004876 <HAL_RCC_GetSysClockFreq+0xa6>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b03      	cmp	r3, #3
 8004872:	d003      	beq.n	800487c <HAL_RCC_GetSysClockFreq+0xac>
 8004874:	e005      	b.n	8004882 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004876:	4b1a      	ldr	r3, [pc, #104]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004878:	617b      	str	r3, [r7, #20]
      break;
 800487a:	e005      	b.n	8004888 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800487c:	4b19      	ldr	r3, [pc, #100]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800487e:	617b      	str	r3, [r7, #20]
      break;
 8004880:	e002      	b.n	8004888 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	617b      	str	r3, [r7, #20]
      break;
 8004886:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004888:	4b13      	ldr	r3, [pc, #76]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	091b      	lsrs	r3, r3, #4
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	3301      	adds	r3, #1
 8004894:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004896:	4b10      	ldr	r3, [pc, #64]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	0a1b      	lsrs	r3, r3, #8
 800489c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	fb03 f202 	mul.w	r2, r3, r2
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048ae:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	0e5b      	lsrs	r3, r3, #25
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	3301      	adds	r3, #1
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80048c8:	69bb      	ldr	r3, [r7, #24]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3724      	adds	r7, #36	; 0x24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40021000 	.word	0x40021000
 80048dc:	0800834c 	.word	0x0800834c
 80048e0:	00f42400 	.word	0x00f42400
 80048e4:	007a1200 	.word	0x007a1200

080048e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048ec:	4b03      	ldr	r3, [pc, #12]	; (80048fc <HAL_RCC_GetHCLKFreq+0x14>)
 80048ee:	681b      	ldr	r3, [r3, #0]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	2000000c 	.word	0x2000000c

08004900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004904:	f7ff fff0 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 8004908:	4602      	mov	r2, r0
 800490a:	4b06      	ldr	r3, [pc, #24]	; (8004924 <HAL_RCC_GetPCLK1Freq+0x24>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	0a1b      	lsrs	r3, r3, #8
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	4904      	ldr	r1, [pc, #16]	; (8004928 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004916:	5ccb      	ldrb	r3, [r1, r3]
 8004918:	f003 031f 	and.w	r3, r3, #31
 800491c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004920:	4618      	mov	r0, r3
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40021000 	.word	0x40021000
 8004928:	08008344 	.word	0x08008344

0800492c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004930:	f7ff ffda 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 8004934:	4602      	mov	r2, r0
 8004936:	4b06      	ldr	r3, [pc, #24]	; (8004950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	0adb      	lsrs	r3, r3, #11
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	4904      	ldr	r1, [pc, #16]	; (8004954 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004942:	5ccb      	ldrb	r3, [r1, r3]
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800494c:	4618      	mov	r0, r3
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40021000 	.word	0x40021000
 8004954:	08008344 	.word	0x08008344

08004958 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004960:	2300      	movs	r3, #0
 8004962:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004964:	4b27      	ldr	r3, [pc, #156]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004970:	f7ff f916 	bl	8003ba0 <HAL_PWREx_GetVoltageRange>
 8004974:	6178      	str	r0, [r7, #20]
 8004976:	e014      	b.n	80049a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004978:	4b22      	ldr	r3, [pc, #136]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800497a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497c:	4a21      	ldr	r2, [pc, #132]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800497e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004982:	6593      	str	r3, [r2, #88]	; 0x58
 8004984:	4b1f      	ldr	r3, [pc, #124]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004990:	f7ff f906 	bl	8003ba0 <HAL_PWREx_GetVoltageRange>
 8004994:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004996:	4b1b      	ldr	r3, [pc, #108]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499a:	4a1a      	ldr	r2, [pc, #104]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800499c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049a8:	d10b      	bne.n	80049c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b80      	cmp	r3, #128	; 0x80
 80049ae:	d913      	bls.n	80049d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2ba0      	cmp	r3, #160	; 0xa0
 80049b4:	d902      	bls.n	80049bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049b6:	2302      	movs	r3, #2
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	e00d      	b.n	80049d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049bc:	2301      	movs	r3, #1
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	e00a      	b.n	80049d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b7f      	cmp	r3, #127	; 0x7f
 80049c6:	d902      	bls.n	80049ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80049c8:	2302      	movs	r3, #2
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	e004      	b.n	80049d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b70      	cmp	r3, #112	; 0x70
 80049d2:	d101      	bne.n	80049d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049d4:	2301      	movs	r3, #1
 80049d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049d8:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f023 020f 	bic.w	r2, r3, #15
 80049e0:	4909      	ldr	r1, [pc, #36]	; (8004a08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049e8:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 030f 	and.w	r3, r3, #15
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d001      	beq.n	80049fa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40021000 	.word	0x40021000
 8004a08:	40022000 	.word	0x40022000

08004a0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a12:	4b2d      	ldr	r3, [pc, #180]	; (8004ac8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d00b      	beq.n	8004a3a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b03      	cmp	r3, #3
 8004a26:	d825      	bhi.n	8004a74 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d008      	beq.n	8004a40 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d11f      	bne.n	8004a74 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004a34:	4b25      	ldr	r3, [pc, #148]	; (8004acc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004a36:	613b      	str	r3, [r7, #16]
    break;
 8004a38:	e01f      	b.n	8004a7a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004a3a:	4b25      	ldr	r3, [pc, #148]	; (8004ad0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004a3c:	613b      	str	r3, [r7, #16]
    break;
 8004a3e:	e01c      	b.n	8004a7a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a40:	4b21      	ldr	r3, [pc, #132]	; (8004ac8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0308 	and.w	r3, r3, #8
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d107      	bne.n	8004a5c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a4c:	4b1e      	ldr	r3, [pc, #120]	; (8004ac8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	f003 030f 	and.w	r3, r3, #15
 8004a58:	617b      	str	r3, [r7, #20]
 8004a5a:	e005      	b.n	8004a68 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a5c:	4b1a      	ldr	r3, [pc, #104]	; (8004ac8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	091b      	lsrs	r3, r3, #4
 8004a62:	f003 030f 	and.w	r3, r3, #15
 8004a66:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004a68:	4a1a      	ldr	r2, [pc, #104]	; (8004ad4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a70:	613b      	str	r3, [r7, #16]
    break;
 8004a72:	e002      	b.n	8004a7a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004a74:	2300      	movs	r3, #0
 8004a76:	613b      	str	r3, [r7, #16]
    break;
 8004a78:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a7a:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	091b      	lsrs	r3, r3, #4
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	3301      	adds	r3, #1
 8004a86:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a88:	4b0f      	ldr	r3, [pc, #60]	; (8004ac8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	0a1b      	lsrs	r3, r3, #8
 8004a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	fb03 f202 	mul.w	r2, r3, r2
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	0e5b      	lsrs	r3, r3, #25
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	3301      	adds	r3, #1
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004aba:	683b      	ldr	r3, [r7, #0]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	371c      	adds	r7, #28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	00f42400 	.word	0x00f42400
 8004ad0:	007a1200 	.word	0x007a1200
 8004ad4:	0800834c 	.word	0x0800834c

08004ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d040      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004af8:	2b80      	cmp	r3, #128	; 0x80
 8004afa:	d02a      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004afc:	2b80      	cmp	r3, #128	; 0x80
 8004afe:	d825      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004b00:	2b60      	cmp	r3, #96	; 0x60
 8004b02:	d026      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004b04:	2b60      	cmp	r3, #96	; 0x60
 8004b06:	d821      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004b08:	2b40      	cmp	r3, #64	; 0x40
 8004b0a:	d006      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004b0c:	2b40      	cmp	r3, #64	; 0x40
 8004b0e:	d81d      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d009      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d010      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004b18:	e018      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b1a:	4b89      	ldr	r3, [pc, #548]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	4a88      	ldr	r2, [pc, #544]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b24:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b26:	e015      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fb12 	bl	8005158 <RCCEx_PLLSAI1_Config>
 8004b34:	4603      	mov	r3, r0
 8004b36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b38:	e00c      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3320      	adds	r3, #32
 8004b3e:	2100      	movs	r1, #0
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fbfd 	bl	8005340 <RCCEx_PLLSAI2_Config>
 8004b46:	4603      	mov	r3, r0
 8004b48:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b4a:	e003      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	74fb      	strb	r3, [r7, #19]
      break;
 8004b50:	e000      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b54:	7cfb      	ldrb	r3, [r7, #19]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10b      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b5a:	4b79      	ldr	r3, [pc, #484]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b60:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b68:	4975      	ldr	r1, [pc, #468]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004b70:	e001      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b72:	7cfb      	ldrb	r3, [r7, #19]
 8004b74:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d047      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b8a:	d030      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b90:	d82a      	bhi.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b96:	d02a      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b9c:	d824      	bhi.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba2:	d008      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba8:	d81e      	bhi.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb2:	d010      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004bb4:	e018      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004bb6:	4b62      	ldr	r3, [pc, #392]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	4a61      	ldr	r2, [pc, #388]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bc2:	e015      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 fac4 	bl	8005158 <RCCEx_PLLSAI1_Config>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bd4:	e00c      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	3320      	adds	r3, #32
 8004bda:	2100      	movs	r1, #0
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 fbaf 	bl	8005340 <RCCEx_PLLSAI2_Config>
 8004be2:	4603      	mov	r3, r0
 8004be4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004be6:	e003      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	74fb      	strb	r3, [r7, #19]
      break;
 8004bec:	e000      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004bee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bf0:	7cfb      	ldrb	r3, [r7, #19]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10b      	bne.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004bf6:	4b52      	ldr	r3, [pc, #328]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c04:	494e      	ldr	r1, [pc, #312]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004c0c:	e001      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0e:	7cfb      	ldrb	r3, [r7, #19]
 8004c10:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 809f 	beq.w	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c20:	2300      	movs	r3, #0
 8004c22:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c24:	4b46      	ldr	r3, [pc, #280]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e000      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004c34:	2300      	movs	r3, #0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00d      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c3a:	4b41      	ldr	r3, [pc, #260]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3e:	4a40      	ldr	r2, [pc, #256]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c44:	6593      	str	r3, [r2, #88]	; 0x58
 8004c46:	4b3e      	ldr	r3, [pc, #248]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c4e:	60bb      	str	r3, [r7, #8]
 8004c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c52:	2301      	movs	r3, #1
 8004c54:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c56:	4b3b      	ldr	r3, [pc, #236]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a3a      	ldr	r2, [pc, #232]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c62:	f7fc fe53 	bl	800190c <HAL_GetTick>
 8004c66:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c68:	e009      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c6a:	f7fc fe4f 	bl	800190c <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d902      	bls.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	74fb      	strb	r3, [r7, #19]
        break;
 8004c7c:	e005      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c7e:	4b31      	ldr	r3, [pc, #196]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0ef      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004c8a:	7cfb      	ldrb	r3, [r7, #19]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d15b      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c90:	4b2b      	ldr	r3, [pc, #172]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c9a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d01f      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d019      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cae:	4b24      	ldr	r3, [pc, #144]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cba:	4b21      	ldr	r3, [pc, #132]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc0:	4a1f      	ldr	r2, [pc, #124]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cca:	4b1d      	ldr	r3, [pc, #116]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd0:	4a1b      	ldr	r2, [pc, #108]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cda:	4a19      	ldr	r2, [pc, #100]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d016      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cec:	f7fc fe0e 	bl	800190c <HAL_GetTick>
 8004cf0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cf2:	e00b      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cf4:	f7fc fe0a 	bl	800190c <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d902      	bls.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	74fb      	strb	r3, [r7, #19]
            break;
 8004d0a:	e006      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d0c:	4b0c      	ldr	r3, [pc, #48]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0ec      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004d1a:	7cfb      	ldrb	r3, [r7, #19]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10c      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d20:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d30:	4903      	ldr	r1, [pc, #12]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d38:	e008      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d3a:	7cfb      	ldrb	r3, [r7, #19]
 8004d3c:	74bb      	strb	r3, [r7, #18]
 8004d3e:	e005      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004d40:	40021000 	.word	0x40021000
 8004d44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d48:	7cfb      	ldrb	r3, [r7, #19]
 8004d4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d4c:	7c7b      	ldrb	r3, [r7, #17]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d105      	bne.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d52:	4ba0      	ldr	r3, [pc, #640]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d56:	4a9f      	ldr	r2, [pc, #636]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d6a:	4b9a      	ldr	r3, [pc, #616]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d70:	f023 0203 	bic.w	r2, r3, #3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d78:	4996      	ldr	r1, [pc, #600]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d8c:	4b91      	ldr	r3, [pc, #580]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d92:	f023 020c 	bic.w	r2, r3, #12
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	498e      	ldr	r1, [pc, #568]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dae:	4b89      	ldr	r3, [pc, #548]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dbc:	4985      	ldr	r1, [pc, #532]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004dd0:	4b80      	ldr	r3, [pc, #512]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dde:	497d      	ldr	r1, [pc, #500]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0310 	and.w	r3, r3, #16
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004df2:	4b78      	ldr	r3, [pc, #480]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e00:	4974      	ldr	r1, [pc, #464]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0320 	and.w	r3, r3, #32
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e14:	4b6f      	ldr	r3, [pc, #444]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e22:	496c      	ldr	r1, [pc, #432]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e36:	4b67      	ldr	r3, [pc, #412]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e44:	4963      	ldr	r1, [pc, #396]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e58:	4b5e      	ldr	r3, [pc, #376]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e66:	495b      	ldr	r1, [pc, #364]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e7a:	4b56      	ldr	r3, [pc, #344]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e88:	4952      	ldr	r1, [pc, #328]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00a      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e9c:	4b4d      	ldr	r3, [pc, #308]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eaa:	494a      	ldr	r1, [pc, #296]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ebe:	4b45      	ldr	r3, [pc, #276]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ecc:	4941      	ldr	r1, [pc, #260]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ee0:	4b3c      	ldr	r3, [pc, #240]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ee2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ee6:	f023 0203 	bic.w	r2, r3, #3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eee:	4939      	ldr	r1, [pc, #228]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d028      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f02:	4b34      	ldr	r3, [pc, #208]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f10:	4930      	ldr	r1, [pc, #192]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f20:	d106      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f22:	4b2c      	ldr	r3, [pc, #176]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	4a2b      	ldr	r2, [pc, #172]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f2c:	60d3      	str	r3, [r2, #12]
 8004f2e:	e011      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f38:	d10c      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	2101      	movs	r1, #1
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 f909 	bl	8005158 <RCCEx_PLLSAI1_Config>
 8004f46:	4603      	mov	r3, r0
 8004f48:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f4a:	7cfb      	ldrb	r3, [r7, #19]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004f50:	7cfb      	ldrb	r3, [r7, #19]
 8004f52:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d04d      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f68:	d108      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004f6a:	4b1a      	ldr	r3, [pc, #104]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f70:	4a18      	ldr	r2, [pc, #96]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f76:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004f7a:	e012      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004f7c:	4b15      	ldr	r3, [pc, #84]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f82:	4a14      	ldr	r2, [pc, #80]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f88:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004f8c:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f9a:	490e      	ldr	r1, [pc, #56]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004faa:	d106      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fac:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	4a08      	ldr	r2, [pc, #32]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fb6:	60d3      	str	r3, [r2, #12]
 8004fb8:	e020      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fc2:	d109      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fc4:	4b03      	ldr	r3, [pc, #12]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	4a02      	ldr	r2, [pc, #8]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fce:	60d3      	str	r3, [r2, #12]
 8004fd0:	e014      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004fd2:	bf00      	nop
 8004fd4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fe0:	d10c      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 f8b5 	bl	8005158 <RCCEx_PLLSAI1_Config>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ff2:	7cfb      	ldrb	r3, [r7, #19]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004ff8:	7cfb      	ldrb	r3, [r7, #19]
 8004ffa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d028      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005008:	4b4a      	ldr	r3, [pc, #296]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800500a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005016:	4947      	ldr	r1, [pc, #284]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005022:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005026:	d106      	bne.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005028:	4b42      	ldr	r3, [pc, #264]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	4a41      	ldr	r2, [pc, #260]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800502e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005032:	60d3      	str	r3, [r2, #12]
 8005034:	e011      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800503a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800503e:	d10c      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3304      	adds	r3, #4
 8005044:	2101      	movs	r1, #1
 8005046:	4618      	mov	r0, r3
 8005048:	f000 f886 	bl	8005158 <RCCEx_PLLSAI1_Config>
 800504c:	4603      	mov	r3, r0
 800504e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005050:	7cfb      	ldrb	r3, [r7, #19]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005056:	7cfb      	ldrb	r3, [r7, #19]
 8005058:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d01e      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005066:	4b33      	ldr	r3, [pc, #204]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005076:	492f      	ldr	r1, [pc, #188]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005084:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005088:	d10c      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3304      	adds	r3, #4
 800508e:	2102      	movs	r1, #2
 8005090:	4618      	mov	r0, r3
 8005092:	f000 f861 	bl	8005158 <RCCEx_PLLSAI1_Config>
 8005096:	4603      	mov	r3, r0
 8005098:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800509a:	7cfb      	ldrb	r3, [r7, #19]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80050a0:	7cfb      	ldrb	r3, [r7, #19]
 80050a2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00b      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050b0:	4b20      	ldr	r3, [pc, #128]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050b6:	f023 0204 	bic.w	r2, r3, #4
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050c0:	491c      	ldr	r1, [pc, #112]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00b      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80050d4:	4b17      	ldr	r3, [pc, #92]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050da:	f023 0218 	bic.w	r2, r3, #24
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e4:	4913      	ldr	r1, [pc, #76]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d017      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80050f8:	4b0e      	ldr	r3, [pc, #56]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005108:	490a      	ldr	r1, [pc, #40]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800510a:	4313      	orrs	r3, r2
 800510c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005116:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800511a:	d105      	bne.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800511c:	4b05      	ldr	r3, [pc, #20]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	4a04      	ldr	r2, [pc, #16]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005126:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005128:	7cbb      	ldrb	r3, [r7, #18]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	40021000 	.word	0x40021000

08005138 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800513c:	4b05      	ldr	r3, [pc, #20]	; (8005154 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a04      	ldr	r2, [pc, #16]	; (8005154 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005142:	f043 0304 	orr.w	r3, r3, #4
 8005146:	6013      	str	r3, [r2, #0]
}
 8005148:	bf00      	nop
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40021000 	.word	0x40021000

08005158 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005166:	4b72      	ldr	r3, [pc, #456]	; (8005330 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00e      	beq.n	8005190 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005172:	4b6f      	ldr	r3, [pc, #444]	; (8005330 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f003 0203 	and.w	r2, r3, #3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	429a      	cmp	r2, r3
 8005180:	d103      	bne.n	800518a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
       ||
 8005186:	2b00      	cmp	r3, #0
 8005188:	d142      	bne.n	8005210 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	73fb      	strb	r3, [r7, #15]
 800518e:	e03f      	b.n	8005210 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2b03      	cmp	r3, #3
 8005196:	d018      	beq.n	80051ca <RCCEx_PLLSAI1_Config+0x72>
 8005198:	2b03      	cmp	r3, #3
 800519a:	d825      	bhi.n	80051e8 <RCCEx_PLLSAI1_Config+0x90>
 800519c:	2b01      	cmp	r3, #1
 800519e:	d002      	beq.n	80051a6 <RCCEx_PLLSAI1_Config+0x4e>
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d009      	beq.n	80051b8 <RCCEx_PLLSAI1_Config+0x60>
 80051a4:	e020      	b.n	80051e8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051a6:	4b62      	ldr	r3, [pc, #392]	; (8005330 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d11d      	bne.n	80051ee <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051b6:	e01a      	b.n	80051ee <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051b8:	4b5d      	ldr	r3, [pc, #372]	; (8005330 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d116      	bne.n	80051f2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051c8:	e013      	b.n	80051f2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051ca:	4b59      	ldr	r3, [pc, #356]	; (8005330 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10f      	bne.n	80051f6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051d6:	4b56      	ldr	r3, [pc, #344]	; (8005330 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d109      	bne.n	80051f6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051e6:	e006      	b.n	80051f6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	73fb      	strb	r3, [r7, #15]
      break;
 80051ec:	e004      	b.n	80051f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80051ee:	bf00      	nop
 80051f0:	e002      	b.n	80051f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80051f2:	bf00      	nop
 80051f4:	e000      	b.n	80051f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80051f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d108      	bne.n	8005210 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80051fe:	4b4c      	ldr	r3, [pc, #304]	; (8005330 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	f023 0203 	bic.w	r2, r3, #3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4949      	ldr	r1, [pc, #292]	; (8005330 <RCCEx_PLLSAI1_Config+0x1d8>)
 800520c:	4313      	orrs	r3, r2
 800520e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005210:	7bfb      	ldrb	r3, [r7, #15]
 8005212:	2b00      	cmp	r3, #0
 8005214:	f040 8086 	bne.w	8005324 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005218:	4b45      	ldr	r3, [pc, #276]	; (8005330 <RCCEx_PLLSAI1_Config+0x1d8>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a44      	ldr	r2, [pc, #272]	; (8005330 <RCCEx_PLLSAI1_Config+0x1d8>)
 800521e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005222:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005224:	f7fc fb72 	bl	800190c <HAL_GetTick>
 8005228:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800522a:	e009      	b.n	8005240 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800522c:	f7fc fb6e 	bl	800190c <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d902      	bls.n	8005240 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	73fb      	strb	r3, [r7, #15]
        break;
 800523e:	e005      	b.n	800524c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005240:	4b3b      	ldr	r3, [pc, #236]	; (8005330 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1ef      	bne.n	800522c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800524c:	7bfb      	ldrb	r3, [r7, #15]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d168      	bne.n	8005324 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d113      	bne.n	8005280 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005258:	4b35      	ldr	r3, [pc, #212]	; (8005330 <RCCEx_PLLSAI1_Config+0x1d8>)
 800525a:	691a      	ldr	r2, [r3, #16]
 800525c:	4b35      	ldr	r3, [pc, #212]	; (8005334 <RCCEx_PLLSAI1_Config+0x1dc>)
 800525e:	4013      	ands	r3, r2
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6892      	ldr	r2, [r2, #8]
 8005264:	0211      	lsls	r1, r2, #8
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	68d2      	ldr	r2, [r2, #12]
 800526a:	06d2      	lsls	r2, r2, #27
 800526c:	4311      	orrs	r1, r2
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6852      	ldr	r2, [r2, #4]
 8005272:	3a01      	subs	r2, #1
 8005274:	0112      	lsls	r2, r2, #4
 8005276:	430a      	orrs	r2, r1
 8005278:	492d      	ldr	r1, [pc, #180]	; (8005330 <RCCEx_PLLSAI1_Config+0x1d8>)
 800527a:	4313      	orrs	r3, r2
 800527c:	610b      	str	r3, [r1, #16]
 800527e:	e02d      	b.n	80052dc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d115      	bne.n	80052b2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005286:	4b2a      	ldr	r3, [pc, #168]	; (8005330 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005288:	691a      	ldr	r2, [r3, #16]
 800528a:	4b2b      	ldr	r3, [pc, #172]	; (8005338 <RCCEx_PLLSAI1_Config+0x1e0>)
 800528c:	4013      	ands	r3, r2
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6892      	ldr	r2, [r2, #8]
 8005292:	0211      	lsls	r1, r2, #8
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6912      	ldr	r2, [r2, #16]
 8005298:	0852      	lsrs	r2, r2, #1
 800529a:	3a01      	subs	r2, #1
 800529c:	0552      	lsls	r2, r2, #21
 800529e:	4311      	orrs	r1, r2
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	6852      	ldr	r2, [r2, #4]
 80052a4:	3a01      	subs	r2, #1
 80052a6:	0112      	lsls	r2, r2, #4
 80052a8:	430a      	orrs	r2, r1
 80052aa:	4921      	ldr	r1, [pc, #132]	; (8005330 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	610b      	str	r3, [r1, #16]
 80052b0:	e014      	b.n	80052dc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052b2:	4b1f      	ldr	r3, [pc, #124]	; (8005330 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052b4:	691a      	ldr	r2, [r3, #16]
 80052b6:	4b21      	ldr	r3, [pc, #132]	; (800533c <RCCEx_PLLSAI1_Config+0x1e4>)
 80052b8:	4013      	ands	r3, r2
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6892      	ldr	r2, [r2, #8]
 80052be:	0211      	lsls	r1, r2, #8
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6952      	ldr	r2, [r2, #20]
 80052c4:	0852      	lsrs	r2, r2, #1
 80052c6:	3a01      	subs	r2, #1
 80052c8:	0652      	lsls	r2, r2, #25
 80052ca:	4311      	orrs	r1, r2
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6852      	ldr	r2, [r2, #4]
 80052d0:	3a01      	subs	r2, #1
 80052d2:	0112      	lsls	r2, r2, #4
 80052d4:	430a      	orrs	r2, r1
 80052d6:	4916      	ldr	r1, [pc, #88]	; (8005330 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80052dc:	4b14      	ldr	r3, [pc, #80]	; (8005330 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a13      	ldr	r2, [pc, #76]	; (8005330 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e8:	f7fc fb10 	bl	800190c <HAL_GetTick>
 80052ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052ee:	e009      	b.n	8005304 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052f0:	f7fc fb0c 	bl	800190c <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d902      	bls.n	8005304 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	73fb      	strb	r3, [r7, #15]
          break;
 8005302:	e005      	b.n	8005310 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005304:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0ef      	beq.n	80052f0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005310:	7bfb      	ldrb	r3, [r7, #15]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d106      	bne.n	8005324 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005316:	4b06      	ldr	r3, [pc, #24]	; (8005330 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005318:	691a      	ldr	r2, [r3, #16]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	4904      	ldr	r1, [pc, #16]	; (8005330 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005320:	4313      	orrs	r3, r2
 8005322:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005324:	7bfb      	ldrb	r3, [r7, #15]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	40021000 	.word	0x40021000
 8005334:	07ff800f 	.word	0x07ff800f
 8005338:	ff9f800f 	.word	0xff9f800f
 800533c:	f9ff800f 	.word	0xf9ff800f

08005340 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800534e:	4b72      	ldr	r3, [pc, #456]	; (8005518 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00e      	beq.n	8005378 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800535a:	4b6f      	ldr	r3, [pc, #444]	; (8005518 <RCCEx_PLLSAI2_Config+0x1d8>)
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f003 0203 	and.w	r2, r3, #3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d103      	bne.n	8005372 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
       ||
 800536e:	2b00      	cmp	r3, #0
 8005370:	d142      	bne.n	80053f8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	73fb      	strb	r3, [r7, #15]
 8005376:	e03f      	b.n	80053f8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b03      	cmp	r3, #3
 800537e:	d018      	beq.n	80053b2 <RCCEx_PLLSAI2_Config+0x72>
 8005380:	2b03      	cmp	r3, #3
 8005382:	d825      	bhi.n	80053d0 <RCCEx_PLLSAI2_Config+0x90>
 8005384:	2b01      	cmp	r3, #1
 8005386:	d002      	beq.n	800538e <RCCEx_PLLSAI2_Config+0x4e>
 8005388:	2b02      	cmp	r3, #2
 800538a:	d009      	beq.n	80053a0 <RCCEx_PLLSAI2_Config+0x60>
 800538c:	e020      	b.n	80053d0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800538e:	4b62      	ldr	r3, [pc, #392]	; (8005518 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d11d      	bne.n	80053d6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800539e:	e01a      	b.n	80053d6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053a0:	4b5d      	ldr	r3, [pc, #372]	; (8005518 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d116      	bne.n	80053da <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053b0:	e013      	b.n	80053da <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80053b2:	4b59      	ldr	r3, [pc, #356]	; (8005518 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10f      	bne.n	80053de <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053be:	4b56      	ldr	r3, [pc, #344]	; (8005518 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d109      	bne.n	80053de <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053ce:	e006      	b.n	80053de <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	73fb      	strb	r3, [r7, #15]
      break;
 80053d4:	e004      	b.n	80053e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80053d6:	bf00      	nop
 80053d8:	e002      	b.n	80053e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80053da:	bf00      	nop
 80053dc:	e000      	b.n	80053e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80053de:	bf00      	nop
    }

    if(status == HAL_OK)
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d108      	bne.n	80053f8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80053e6:	4b4c      	ldr	r3, [pc, #304]	; (8005518 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f023 0203 	bic.w	r2, r3, #3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4949      	ldr	r1, [pc, #292]	; (8005518 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f040 8086 	bne.w	800550c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005400:	4b45      	ldr	r3, [pc, #276]	; (8005518 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a44      	ldr	r2, [pc, #272]	; (8005518 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800540a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800540c:	f7fc fa7e 	bl	800190c <HAL_GetTick>
 8005410:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005412:	e009      	b.n	8005428 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005414:	f7fc fa7a 	bl	800190c <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d902      	bls.n	8005428 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	73fb      	strb	r3, [r7, #15]
        break;
 8005426:	e005      	b.n	8005434 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005428:	4b3b      	ldr	r3, [pc, #236]	; (8005518 <RCCEx_PLLSAI2_Config+0x1d8>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1ef      	bne.n	8005414 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005434:	7bfb      	ldrb	r3, [r7, #15]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d168      	bne.n	800550c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d113      	bne.n	8005468 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005440:	4b35      	ldr	r3, [pc, #212]	; (8005518 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005442:	695a      	ldr	r2, [r3, #20]
 8005444:	4b35      	ldr	r3, [pc, #212]	; (800551c <RCCEx_PLLSAI2_Config+0x1dc>)
 8005446:	4013      	ands	r3, r2
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	6892      	ldr	r2, [r2, #8]
 800544c:	0211      	lsls	r1, r2, #8
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	68d2      	ldr	r2, [r2, #12]
 8005452:	06d2      	lsls	r2, r2, #27
 8005454:	4311      	orrs	r1, r2
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6852      	ldr	r2, [r2, #4]
 800545a:	3a01      	subs	r2, #1
 800545c:	0112      	lsls	r2, r2, #4
 800545e:	430a      	orrs	r2, r1
 8005460:	492d      	ldr	r1, [pc, #180]	; (8005518 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005462:	4313      	orrs	r3, r2
 8005464:	614b      	str	r3, [r1, #20]
 8005466:	e02d      	b.n	80054c4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d115      	bne.n	800549a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800546e:	4b2a      	ldr	r3, [pc, #168]	; (8005518 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005470:	695a      	ldr	r2, [r3, #20]
 8005472:	4b2b      	ldr	r3, [pc, #172]	; (8005520 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005474:	4013      	ands	r3, r2
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6892      	ldr	r2, [r2, #8]
 800547a:	0211      	lsls	r1, r2, #8
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6912      	ldr	r2, [r2, #16]
 8005480:	0852      	lsrs	r2, r2, #1
 8005482:	3a01      	subs	r2, #1
 8005484:	0552      	lsls	r2, r2, #21
 8005486:	4311      	orrs	r1, r2
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6852      	ldr	r2, [r2, #4]
 800548c:	3a01      	subs	r2, #1
 800548e:	0112      	lsls	r2, r2, #4
 8005490:	430a      	orrs	r2, r1
 8005492:	4921      	ldr	r1, [pc, #132]	; (8005518 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005494:	4313      	orrs	r3, r2
 8005496:	614b      	str	r3, [r1, #20]
 8005498:	e014      	b.n	80054c4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800549a:	4b1f      	ldr	r3, [pc, #124]	; (8005518 <RCCEx_PLLSAI2_Config+0x1d8>)
 800549c:	695a      	ldr	r2, [r3, #20]
 800549e:	4b21      	ldr	r3, [pc, #132]	; (8005524 <RCCEx_PLLSAI2_Config+0x1e4>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6892      	ldr	r2, [r2, #8]
 80054a6:	0211      	lsls	r1, r2, #8
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6952      	ldr	r2, [r2, #20]
 80054ac:	0852      	lsrs	r2, r2, #1
 80054ae:	3a01      	subs	r2, #1
 80054b0:	0652      	lsls	r2, r2, #25
 80054b2:	4311      	orrs	r1, r2
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6852      	ldr	r2, [r2, #4]
 80054b8:	3a01      	subs	r2, #1
 80054ba:	0112      	lsls	r2, r2, #4
 80054bc:	430a      	orrs	r2, r1
 80054be:	4916      	ldr	r1, [pc, #88]	; (8005518 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80054c4:	4b14      	ldr	r3, [pc, #80]	; (8005518 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a13      	ldr	r2, [pc, #76]	; (8005518 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d0:	f7fc fa1c 	bl	800190c <HAL_GetTick>
 80054d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054d6:	e009      	b.n	80054ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054d8:	f7fc fa18 	bl	800190c <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d902      	bls.n	80054ec <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	73fb      	strb	r3, [r7, #15]
          break;
 80054ea:	e005      	b.n	80054f8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054ec:	4b0a      	ldr	r3, [pc, #40]	; (8005518 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0ef      	beq.n	80054d8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d106      	bne.n	800550c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80054fe:	4b06      	ldr	r3, [pc, #24]	; (8005518 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005500:	695a      	ldr	r2, [r3, #20]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	4904      	ldr	r1, [pc, #16]	; (8005518 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005508:	4313      	orrs	r3, r2
 800550a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800550c:	7bfb      	ldrb	r3, [r7, #15]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	40021000 	.word	0x40021000
 800551c:	07ff800f 	.word	0x07ff800f
 8005520:	ff9f800f 	.word	0xff9f800f
 8005524:	f9ff800f 	.word	0xf9ff800f

08005528 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e095      	b.n	8005666 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	2b00      	cmp	r3, #0
 8005540:	d108      	bne.n	8005554 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800554a:	d009      	beq.n	8005560 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	61da      	str	r2, [r3, #28]
 8005552:	e005      	b.n	8005560 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d106      	bne.n	8005580 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7fb feb8 	bl	80012f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005596:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055a0:	d902      	bls.n	80055a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055a2:	2300      	movs	r3, #0
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	e002      	b.n	80055ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80055b6:	d007      	beq.n	80055c8 <HAL_SPI_Init+0xa0>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055c0:	d002      	beq.n	80055c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055d8:	431a      	orrs	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	431a      	orrs	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560a:	ea42 0103 	orr.w	r1, r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005612:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	0c1b      	lsrs	r3, r3, #16
 8005624:	f003 0204 	and.w	r2, r3, #4
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	f003 0310 	and.w	r3, r3, #16
 8005630:	431a      	orrs	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005636:	f003 0308 	and.w	r3, r3, #8
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005644:	ea42 0103 	orr.w	r1, r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	4613      	mov	r3, r2
 800567c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d110      	bne.n	80056ac <HAL_SPI_Receive_IT+0x3c>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005692:	d10b      	bne.n	80056ac <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2204      	movs	r2, #4
 8005698:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800569c:	88fb      	ldrh	r3, [r7, #6]
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	68b9      	ldr	r1, [r7, #8]
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 f894 	bl	80057d0 <HAL_SPI_TransmitReceive_IT>
 80056a8:	4603      	mov	r3, r0
 80056aa:	e089      	b.n	80057c0 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d101      	bne.n	80056ba <HAL_SPI_Receive_IT+0x4a>
 80056b6:	2302      	movs	r3, #2
 80056b8:	e082      	b.n	80057c0 <HAL_SPI_Receive_IT+0x150>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d002      	beq.n	80056d4 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80056ce:	2302      	movs	r3, #2
 80056d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056d2:	e070      	b.n	80057b6 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <HAL_SPI_Receive_IT+0x70>
 80056da:	88fb      	ldrh	r3, [r7, #6]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d102      	bne.n	80056e6 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056e4:	e067      	b.n	80057b6 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2204      	movs	r2, #4
 80056ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	88fa      	ldrh	r2, [r7, #6]
 80056fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	88fa      	ldrh	r2, [r7, #6]
 8005706:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800572a:	d90b      	bls.n	8005744 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800573a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4a22      	ldr	r2, [pc, #136]	; (80057c8 <HAL_SPI_Receive_IT+0x158>)
 8005740:	64da      	str	r2, [r3, #76]	; 0x4c
 8005742:	e00a      	b.n	800575a <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005752:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	4a1d      	ldr	r2, [pc, #116]	; (80057cc <HAL_SPI_Receive_IT+0x15c>)
 8005758:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005762:	d10f      	bne.n	8005784 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005772:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005782:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005792:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579e:	2b40      	cmp	r3, #64	; 0x40
 80057a0:	d008      	beq.n	80057b4 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	e000      	b.n	80057b6 <HAL_SPI_Receive_IT+0x146>
  }

error :
 80057b4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80057be:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3718      	adds	r7, #24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	08005dd1 	.word	0x08005dd1
 80057cc:	08005d81 	.word	0x08005d81

080057d0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_SPI_TransmitReceive_IT+0x20>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e091      	b.n	8005914 <HAL_SPI_TransmitReceive_IT+0x144>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057fe:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005806:	7dbb      	ldrb	r3, [r7, #22]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d00d      	beq.n	8005828 <HAL_SPI_TransmitReceive_IT+0x58>
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005812:	d106      	bne.n	8005822 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d102      	bne.n	8005822 <HAL_SPI_TransmitReceive_IT+0x52>
 800581c:	7dbb      	ldrb	r3, [r7, #22]
 800581e:	2b04      	cmp	r3, #4
 8005820:	d002      	beq.n	8005828 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8005822:	2302      	movs	r3, #2
 8005824:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005826:	e070      	b.n	800590a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d005      	beq.n	800583a <HAL_SPI_TransmitReceive_IT+0x6a>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <HAL_SPI_TransmitReceive_IT+0x6a>
 8005834:	887b      	ldrh	r3, [r7, #2]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d102      	bne.n	8005840 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800583e:	e064      	b.n	800590a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b04      	cmp	r3, #4
 800584a:	d003      	beq.n	8005854 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2205      	movs	r2, #5
 8005850:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	887a      	ldrh	r2, [r7, #2]
 8005864:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	887a      	ldrh	r2, [r7, #2]
 800586a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	887a      	ldrh	r2, [r7, #2]
 8005876:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	887a      	ldrh	r2, [r7, #2]
 800587e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800588a:	d906      	bls.n	800589a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4a24      	ldr	r2, [pc, #144]	; (8005920 <HAL_SPI_TransmitReceive_IT+0x150>)
 8005890:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4a23      	ldr	r2, [pc, #140]	; (8005924 <HAL_SPI_TransmitReceive_IT+0x154>)
 8005896:	651a      	str	r2, [r3, #80]	; 0x50
 8005898:	e005      	b.n	80058a6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	4a22      	ldr	r2, [pc, #136]	; (8005928 <HAL_SPI_TransmitReceive_IT+0x158>)
 800589e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4a22      	ldr	r2, [pc, #136]	; (800592c <HAL_SPI_TransmitReceive_IT+0x15c>)
 80058a4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058ae:	d802      	bhi.n	80058b6 <HAL_SPI_TransmitReceive_IT+0xe6>
 80058b0:	887b      	ldrh	r3, [r7, #2]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d908      	bls.n	80058c8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058c4:	605a      	str	r2, [r3, #4]
 80058c6:	e007      	b.n	80058d8 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058d6:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80058e6:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f2:	2b40      	cmp	r3, #64	; 0x40
 80058f4:	d008      	beq.n	8005908 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	e000      	b.n	800590a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8005908:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005912:	7dfb      	ldrb	r3, [r7, #23]
}
 8005914:	4618      	mov	r0, r3
 8005916:	371c      	adds	r7, #28
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	08005cbb 	.word	0x08005cbb
 8005924:	08005d21 	.word	0x08005d21
 8005928:	08005b6b 	.word	0x08005b6b
 800592c:	08005c29 	.word	0x08005c29

08005930 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10e      	bne.n	8005970 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005958:	2b00      	cmp	r3, #0
 800595a:	d009      	beq.n	8005970 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005962:	2b00      	cmp	r3, #0
 8005964:	d004      	beq.n	8005970 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	4798      	blx	r3
    return;
 800596e:	e0ce      	b.n	8005b0e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d009      	beq.n	800598e <HAL_SPI_IRQHandler+0x5e>
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005980:	2b00      	cmp	r3, #0
 8005982:	d004      	beq.n	800598e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	4798      	blx	r3
    return;
 800598c:	e0bf      	b.n	8005b0e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	f003 0320 	and.w	r3, r3, #32
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10a      	bne.n	80059ae <HAL_SPI_IRQHandler+0x7e>
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d105      	bne.n	80059ae <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 80b0 	beq.w	8005b0e <HAL_SPI_IRQHandler+0x1de>
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	f003 0320 	and.w	r3, r3, #32
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 80aa 	beq.w	8005b0e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d023      	beq.n	8005a0c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	d011      	beq.n	80059f4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d4:	f043 0204 	orr.w	r2, r3, #4
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059dc:	2300      	movs	r3, #0
 80059de:	617b      	str	r3, [r7, #20]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	617b      	str	r3, [r7, #20]
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	e00b      	b.n	8005a0c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059f4:	2300      	movs	r3, #0
 80059f6:	613b      	str	r3, [r7, #16]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	613b      	str	r3, [r7, #16]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	613b      	str	r3, [r7, #16]
 8005a08:	693b      	ldr	r3, [r7, #16]
        return;
 8005a0a:	e080      	b.n	8005b0e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	f003 0320 	and.w	r3, r3, #32
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d014      	beq.n	8005a40 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a1a:	f043 0201 	orr.w	r2, r3, #1
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005a22:	2300      	movs	r3, #0
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	60fb      	str	r3, [r7, #12]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00c      	beq.n	8005a64 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a4e:	f043 0208 	orr.w	r2, r3, #8
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005a56:	2300      	movs	r3, #0
 8005a58:	60bb      	str	r3, [r7, #8]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	60bb      	str	r3, [r7, #8]
 8005a62:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d04f      	beq.n	8005b0c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a7a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d104      	bne.n	8005a98 <HAL_SPI_IRQHandler+0x168>
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d034      	beq.n	8005b02 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 0203 	bic.w	r2, r2, #3
 8005aa6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d011      	beq.n	8005ad4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab4:	4a17      	ldr	r2, [pc, #92]	; (8005b14 <HAL_SPI_IRQHandler+0x1e4>)
 8005ab6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fd f835 	bl	8002b2c <HAL_DMA_Abort_IT>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d005      	beq.n	8005ad4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005acc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d016      	beq.n	8005b0a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae0:	4a0c      	ldr	r2, [pc, #48]	; (8005b14 <HAL_SPI_IRQHandler+0x1e4>)
 8005ae2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7fd f81f 	bl	8002b2c <HAL_DMA_Abort_IT>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00a      	beq.n	8005b0a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005b00:	e003      	b.n	8005b0a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f812 	bl	8005b2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005b08:	e000      	b.n	8005b0c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005b0a:	bf00      	nop
    return;
 8005b0c:	bf00      	nop
  }
}
 8005b0e:	3720      	adds	r7, #32
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	08005b41 	.word	0x08005b41

08005b18 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f7ff ffe5 	bl	8005b2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b62:	bf00      	nop
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b082      	sub	sp, #8
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d923      	bls.n	8005bc6 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	b292      	uxth	r2, r2
 8005b8a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b90:	1c9a      	adds	r2, r3, #2
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	3b02      	subs	r3, #2
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d11f      	bne.n	8005bf4 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bc2:	605a      	str	r2, [r3, #4]
 8005bc4:	e016      	b.n	8005bf4 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f103 020c 	add.w	r2, r3, #12
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	7812      	ldrb	r2, [r2, #0]
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	3b01      	subs	r3, #1
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10f      	bne.n	8005c20 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c0e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d102      	bne.n	8005c20 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 faba 	bl	8006194 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005c20:	bf00      	nop
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d912      	bls.n	8005c60 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3e:	881a      	ldrh	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4a:	1c9a      	adds	r2, r3, #2
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	3b02      	subs	r3, #2
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c5e:	e012      	b.n	8005c86 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	330c      	adds	r3, #12
 8005c6a:	7812      	ldrb	r2, [r2, #0]
 8005c6c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c72:	1c5a      	adds	r2, r3, #1
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d110      	bne.n	8005cb2 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c9e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d102      	bne.n	8005cb2 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fa71 	bl	8006194 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005cb2:	bf00      	nop
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b082      	sub	sp, #8
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68da      	ldr	r2, [r3, #12]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	b292      	uxth	r2, r2
 8005cce:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	1c9a      	adds	r2, r3, #2
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10f      	bne.n	8005d18 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d06:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d102      	bne.n	8005d18 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fa3e 	bl	8006194 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005d18:	bf00      	nop
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2c:	881a      	ldrh	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d38:	1c9a      	adds	r2, r3, #2
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	3b01      	subs	r3, #1
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d110      	bne.n	8005d78 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d64:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d102      	bne.n	8005d78 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fa0e 	bl	8006194 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005d78:	bf00      	nop
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f103 020c 	add.w	r2, r3, #12
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d94:	7812      	ldrb	r2, [r2, #0]
 8005d96:	b2d2      	uxtb	r2, r2
 8005d98:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	3b01      	subs	r3, #1
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d102      	bne.n	8005dc8 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fa28 	bl	8006218 <SPI_CloseRx_ISR>
  }
}
 8005dc8:	bf00      	nop
 8005dca:	3708      	adds	r7, #8
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	b292      	uxth	r2, r2
 8005de4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	1c9a      	adds	r2, r3, #2
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d102      	bne.n	8005e14 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fa02 	bl	8006218 <SPI_CloseRx_ISR>
  }
}
 8005e14:	bf00      	nop
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b088      	sub	sp, #32
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e2c:	f7fb fd6e 	bl	800190c <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e34:	1a9b      	subs	r3, r3, r2
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	4413      	add	r3, r2
 8005e3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e3c:	f7fb fd66 	bl	800190c <HAL_GetTick>
 8005e40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e42:	4b39      	ldr	r3, [pc, #228]	; (8005f28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	015b      	lsls	r3, r3, #5
 8005e48:	0d1b      	lsrs	r3, r3, #20
 8005e4a:	69fa      	ldr	r2, [r7, #28]
 8005e4c:	fb02 f303 	mul.w	r3, r2, r3
 8005e50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e52:	e054      	b.n	8005efe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e5a:	d050      	beq.n	8005efe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e5c:	f7fb fd56 	bl	800190c <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	69fa      	ldr	r2, [r7, #28]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d902      	bls.n	8005e72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d13d      	bne.n	8005eee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e8a:	d111      	bne.n	8005eb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e94:	d004      	beq.n	8005ea0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e9e:	d107      	bne.n	8005eb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eb8:	d10f      	bne.n	8005eda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ed8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e017      	b.n	8005f1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	4013      	ands	r3, r2
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	bf0c      	ite	eq
 8005f0e:	2301      	moveq	r3, #1
 8005f10:	2300      	movne	r3, #0
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	461a      	mov	r2, r3
 8005f16:	79fb      	ldrb	r3, [r7, #7]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d19b      	bne.n	8005e54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3720      	adds	r7, #32
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	2000000c 	.word	0x2000000c

08005f2c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08a      	sub	sp, #40	; 0x28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
 8005f38:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f3e:	f7fb fce5 	bl	800190c <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f46:	1a9b      	subs	r3, r3, r2
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005f4e:	f7fb fcdd 	bl	800190c <HAL_GetTick>
 8005f52:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	330c      	adds	r3, #12
 8005f5a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f5c:	4b3d      	ldr	r3, [pc, #244]	; (8006054 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	00da      	lsls	r2, r3, #3
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	0d1b      	lsrs	r3, r3, #20
 8005f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f6e:	fb02 f303 	mul.w	r3, r2, r3
 8005f72:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f74:	e060      	b.n	8006038 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f7c:	d107      	bne.n	8005f8e <SPI_WaitFifoStateUntilTimeout+0x62>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d104      	bne.n	8005f8e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f8c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f94:	d050      	beq.n	8006038 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f96:	f7fb fcb9 	bl	800190c <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d902      	bls.n	8005fac <SPI_WaitFifoStateUntilTimeout+0x80>
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d13d      	bne.n	8006028 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fc4:	d111      	bne.n	8005fea <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fce:	d004      	beq.n	8005fda <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fd8:	d107      	bne.n	8005fea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fe8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff2:	d10f      	bne.n	8006014 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006012:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e010      	b.n	800604a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800602e:	2300      	movs	r3, #0
 8006030:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	3b01      	subs	r3, #1
 8006036:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689a      	ldr	r2, [r3, #8]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	4013      	ands	r3, r2
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	429a      	cmp	r2, r3
 8006046:	d196      	bne.n	8005f76 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3728      	adds	r7, #40	; 0x28
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	2000000c 	.word	0x2000000c

08006058 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af02      	add	r7, sp, #8
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800606c:	d111      	bne.n	8006092 <SPI_EndRxTransaction+0x3a>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006076:	d004      	beq.n	8006082 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006080:	d107      	bne.n	8006092 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006090:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2200      	movs	r2, #0
 800609a:	2180      	movs	r1, #128	; 0x80
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f7ff febd 	bl	8005e1c <SPI_WaitFlagStateUntilTimeout>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d007      	beq.n	80060b8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ac:	f043 0220 	orr.w	r2, r3, #32
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e023      	b.n	8006100 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060c0:	d11d      	bne.n	80060fe <SPI_EndRxTransaction+0xa6>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ca:	d004      	beq.n	80060d6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060d4:	d113      	bne.n	80060fe <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2200      	movs	r2, #0
 80060de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f7ff ff22 	bl	8005f2c <SPI_WaitFifoStateUntilTimeout>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d007      	beq.n	80060fe <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f2:	f043 0220 	orr.w	r2, r3, #32
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e000      	b.n	8006100 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af02      	add	r7, sp, #8
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2200      	movs	r2, #0
 800611c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f7ff ff03 	bl	8005f2c <SPI_WaitFifoStateUntilTimeout>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d007      	beq.n	800613c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006130:	f043 0220 	orr.w	r2, r3, #32
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e027      	b.n	800618c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2200      	movs	r2, #0
 8006144:	2180      	movs	r1, #128	; 0x80
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f7ff fe68 	bl	8005e1c <SPI_WaitFlagStateUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d007      	beq.n	8006162 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006156:	f043 0220 	orr.w	r2, r3, #32
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e014      	b.n	800618c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2200      	movs	r2, #0
 800616a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f7ff fedc 	bl	8005f2c <SPI_WaitFifoStateUntilTimeout>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d007      	beq.n	800618a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800617e:	f043 0220 	orr.w	r2, r3, #32
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e000      	b.n	800618c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800619c:	f7fb fbb6 	bl	800190c <HAL_GetTick>
 80061a0:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 0220 	bic.w	r2, r2, #32
 80061b0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	2164      	movs	r1, #100	; 0x64
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7ff ffa6 	bl	8006108 <SPI_EndRxTxTransaction>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d005      	beq.n	80061ce <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061c6:	f043 0220 	orr.w	r2, r3, #32
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d115      	bne.n	8006202 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b04      	cmp	r3, #4
 80061e0:	d107      	bne.n	80061f2 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7fa f87e 	bl	80002ec <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80061f0:	e00e      	b.n	8006210 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7ff fc8c 	bl	8005b18 <HAL_SPI_TxRxCpltCallback>
}
 8006200:	e006      	b.n	8006210 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7ff fc8e 	bl	8005b2c <HAL_SPI_ErrorCallback>
}
 8006210:	bf00      	nop
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800622e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8006230:	f7fb fb6c 	bl	800190c <HAL_GetTick>
 8006234:	4603      	mov	r3, r0
 8006236:	461a      	mov	r2, r3
 8006238:	2164      	movs	r1, #100	; 0x64
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7ff ff0c 	bl	8006058 <SPI_EndRxTransaction>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d005      	beq.n	8006252 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800624a:	f043 0220 	orr.w	r2, r3, #32
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800625e:	2b00      	cmp	r3, #0
 8006260:	d103      	bne.n	800626a <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7fa f842 	bl	80002ec <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006268:	e002      	b.n	8006270 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff fc5e 	bl	8005b2c <HAL_SPI_ErrorCallback>
}
 8006270:	bf00      	nop
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e049      	b.n	800631e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d106      	bne.n	80062a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7fb f8a4 	bl	80013ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	3304      	adds	r3, #4
 80062b4:	4619      	mov	r1, r3
 80062b6:	4610      	mov	r0, r2
 80062b8:	f000 fbe4 	bl	8006a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b01      	cmp	r3, #1
 800633a:	d001      	beq.n	8006340 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e047      	b.n	80063d0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a23      	ldr	r2, [pc, #140]	; (80063dc <HAL_TIM_Base_Start+0xb4>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d01d      	beq.n	800638e <HAL_TIM_Base_Start+0x66>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800635a:	d018      	beq.n	800638e <HAL_TIM_Base_Start+0x66>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a1f      	ldr	r2, [pc, #124]	; (80063e0 <HAL_TIM_Base_Start+0xb8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d013      	beq.n	800638e <HAL_TIM_Base_Start+0x66>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a1e      	ldr	r2, [pc, #120]	; (80063e4 <HAL_TIM_Base_Start+0xbc>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d00e      	beq.n	800638e <HAL_TIM_Base_Start+0x66>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a1c      	ldr	r2, [pc, #112]	; (80063e8 <HAL_TIM_Base_Start+0xc0>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d009      	beq.n	800638e <HAL_TIM_Base_Start+0x66>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a1b      	ldr	r2, [pc, #108]	; (80063ec <HAL_TIM_Base_Start+0xc4>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d004      	beq.n	800638e <HAL_TIM_Base_Start+0x66>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a19      	ldr	r2, [pc, #100]	; (80063f0 <HAL_TIM_Base_Start+0xc8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d115      	bne.n	80063ba <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689a      	ldr	r2, [r3, #8]
 8006394:	4b17      	ldr	r3, [pc, #92]	; (80063f4 <HAL_TIM_Base_Start+0xcc>)
 8006396:	4013      	ands	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2b06      	cmp	r3, #6
 800639e:	d015      	beq.n	80063cc <HAL_TIM_Base_Start+0xa4>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063a6:	d011      	beq.n	80063cc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0201 	orr.w	r2, r2, #1
 80063b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b8:	e008      	b.n	80063cc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f042 0201 	orr.w	r2, r2, #1
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	e000      	b.n	80063ce <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	40012c00 	.word	0x40012c00
 80063e0:	40000400 	.word	0x40000400
 80063e4:	40000800 	.word	0x40000800
 80063e8:	40000c00 	.word	0x40000c00
 80063ec:	40013400 	.word	0x40013400
 80063f0:	40014000 	.word	0x40014000
 80063f4:	00010007 	.word	0x00010007

080063f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e049      	b.n	800649e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d106      	bne.n	8006424 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f841 	bl	80064a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3304      	adds	r3, #4
 8006434:	4619      	mov	r1, r3
 8006436:	4610      	mov	r0, r2
 8006438:	f000 fb24 	bl	8006a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
	...

080064bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d109      	bne.n	80064e0 <HAL_TIM_PWM_Start+0x24>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	bf14      	ite	ne
 80064d8:	2301      	movne	r3, #1
 80064da:	2300      	moveq	r3, #0
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	e03c      	b.n	800655a <HAL_TIM_PWM_Start+0x9e>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	d109      	bne.n	80064fa <HAL_TIM_PWM_Start+0x3e>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	bf14      	ite	ne
 80064f2:	2301      	movne	r3, #1
 80064f4:	2300      	moveq	r3, #0
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	e02f      	b.n	800655a <HAL_TIM_PWM_Start+0x9e>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d109      	bne.n	8006514 <HAL_TIM_PWM_Start+0x58>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b01      	cmp	r3, #1
 800650a:	bf14      	ite	ne
 800650c:	2301      	movne	r3, #1
 800650e:	2300      	moveq	r3, #0
 8006510:	b2db      	uxtb	r3, r3
 8006512:	e022      	b.n	800655a <HAL_TIM_PWM_Start+0x9e>
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2b0c      	cmp	r3, #12
 8006518:	d109      	bne.n	800652e <HAL_TIM_PWM_Start+0x72>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b01      	cmp	r3, #1
 8006524:	bf14      	ite	ne
 8006526:	2301      	movne	r3, #1
 8006528:	2300      	moveq	r3, #0
 800652a:	b2db      	uxtb	r3, r3
 800652c:	e015      	b.n	800655a <HAL_TIM_PWM_Start+0x9e>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b10      	cmp	r3, #16
 8006532:	d109      	bne.n	8006548 <HAL_TIM_PWM_Start+0x8c>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b01      	cmp	r3, #1
 800653e:	bf14      	ite	ne
 8006540:	2301      	movne	r3, #1
 8006542:	2300      	moveq	r3, #0
 8006544:	b2db      	uxtb	r3, r3
 8006546:	e008      	b.n	800655a <HAL_TIM_PWM_Start+0x9e>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b01      	cmp	r3, #1
 8006552:	bf14      	ite	ne
 8006554:	2301      	movne	r3, #1
 8006556:	2300      	moveq	r3, #0
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e09c      	b.n	800669c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d104      	bne.n	8006572 <HAL_TIM_PWM_Start+0xb6>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006570:	e023      	b.n	80065ba <HAL_TIM_PWM_Start+0xfe>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b04      	cmp	r3, #4
 8006576:	d104      	bne.n	8006582 <HAL_TIM_PWM_Start+0xc6>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006580:	e01b      	b.n	80065ba <HAL_TIM_PWM_Start+0xfe>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b08      	cmp	r3, #8
 8006586:	d104      	bne.n	8006592 <HAL_TIM_PWM_Start+0xd6>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006590:	e013      	b.n	80065ba <HAL_TIM_PWM_Start+0xfe>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b0c      	cmp	r3, #12
 8006596:	d104      	bne.n	80065a2 <HAL_TIM_PWM_Start+0xe6>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2202      	movs	r2, #2
 800659c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065a0:	e00b      	b.n	80065ba <HAL_TIM_PWM_Start+0xfe>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b10      	cmp	r3, #16
 80065a6:	d104      	bne.n	80065b2 <HAL_TIM_PWM_Start+0xf6>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065b0:	e003      	b.n	80065ba <HAL_TIM_PWM_Start+0xfe>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2202      	movs	r2, #2
 80065b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2201      	movs	r2, #1
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fe68 	bl	8007298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a35      	ldr	r2, [pc, #212]	; (80066a4 <HAL_TIM_PWM_Start+0x1e8>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d013      	beq.n	80065fa <HAL_TIM_PWM_Start+0x13e>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a34      	ldr	r2, [pc, #208]	; (80066a8 <HAL_TIM_PWM_Start+0x1ec>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d00e      	beq.n	80065fa <HAL_TIM_PWM_Start+0x13e>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a32      	ldr	r2, [pc, #200]	; (80066ac <HAL_TIM_PWM_Start+0x1f0>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d009      	beq.n	80065fa <HAL_TIM_PWM_Start+0x13e>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a31      	ldr	r2, [pc, #196]	; (80066b0 <HAL_TIM_PWM_Start+0x1f4>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d004      	beq.n	80065fa <HAL_TIM_PWM_Start+0x13e>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a2f      	ldr	r2, [pc, #188]	; (80066b4 <HAL_TIM_PWM_Start+0x1f8>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d101      	bne.n	80065fe <HAL_TIM_PWM_Start+0x142>
 80065fa:	2301      	movs	r3, #1
 80065fc:	e000      	b.n	8006600 <HAL_TIM_PWM_Start+0x144>
 80065fe:	2300      	movs	r3, #0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d007      	beq.n	8006614 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006612:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a22      	ldr	r2, [pc, #136]	; (80066a4 <HAL_TIM_PWM_Start+0x1e8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d01d      	beq.n	800665a <HAL_TIM_PWM_Start+0x19e>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006626:	d018      	beq.n	800665a <HAL_TIM_PWM_Start+0x19e>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a22      	ldr	r2, [pc, #136]	; (80066b8 <HAL_TIM_PWM_Start+0x1fc>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d013      	beq.n	800665a <HAL_TIM_PWM_Start+0x19e>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a21      	ldr	r2, [pc, #132]	; (80066bc <HAL_TIM_PWM_Start+0x200>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00e      	beq.n	800665a <HAL_TIM_PWM_Start+0x19e>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a1f      	ldr	r2, [pc, #124]	; (80066c0 <HAL_TIM_PWM_Start+0x204>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d009      	beq.n	800665a <HAL_TIM_PWM_Start+0x19e>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a17      	ldr	r2, [pc, #92]	; (80066a8 <HAL_TIM_PWM_Start+0x1ec>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d004      	beq.n	800665a <HAL_TIM_PWM_Start+0x19e>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a15      	ldr	r2, [pc, #84]	; (80066ac <HAL_TIM_PWM_Start+0x1f0>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d115      	bne.n	8006686 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	4b18      	ldr	r3, [pc, #96]	; (80066c4 <HAL_TIM_PWM_Start+0x208>)
 8006662:	4013      	ands	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2b06      	cmp	r3, #6
 800666a:	d015      	beq.n	8006698 <HAL_TIM_PWM_Start+0x1dc>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006672:	d011      	beq.n	8006698 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0201 	orr.w	r2, r2, #1
 8006682:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006684:	e008      	b.n	8006698 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f042 0201 	orr.w	r2, r2, #1
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	e000      	b.n	800669a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006698:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	40012c00 	.word	0x40012c00
 80066a8:	40013400 	.word	0x40013400
 80066ac:	40014000 	.word	0x40014000
 80066b0:	40014400 	.word	0x40014400
 80066b4:	40014800 	.word	0x40014800
 80066b8:	40000400 	.word	0x40000400
 80066bc:	40000800 	.word	0x40000800
 80066c0:	40000c00 	.word	0x40000c00
 80066c4:	00010007 	.word	0x00010007

080066c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d101      	bne.n	80066e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066e2:	2302      	movs	r3, #2
 80066e4:	e0ff      	b.n	80068e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b14      	cmp	r3, #20
 80066f2:	f200 80f0 	bhi.w	80068d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80066f6:	a201      	add	r2, pc, #4	; (adr r2, 80066fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fc:	08006751 	.word	0x08006751
 8006700:	080068d7 	.word	0x080068d7
 8006704:	080068d7 	.word	0x080068d7
 8006708:	080068d7 	.word	0x080068d7
 800670c:	08006791 	.word	0x08006791
 8006710:	080068d7 	.word	0x080068d7
 8006714:	080068d7 	.word	0x080068d7
 8006718:	080068d7 	.word	0x080068d7
 800671c:	080067d3 	.word	0x080067d3
 8006720:	080068d7 	.word	0x080068d7
 8006724:	080068d7 	.word	0x080068d7
 8006728:	080068d7 	.word	0x080068d7
 800672c:	08006813 	.word	0x08006813
 8006730:	080068d7 	.word	0x080068d7
 8006734:	080068d7 	.word	0x080068d7
 8006738:	080068d7 	.word	0x080068d7
 800673c:	08006855 	.word	0x08006855
 8006740:	080068d7 	.word	0x080068d7
 8006744:	080068d7 	.word	0x080068d7
 8006748:	080068d7 	.word	0x080068d7
 800674c:	08006895 	.word	0x08006895
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68b9      	ldr	r1, [r7, #8]
 8006756:	4618      	mov	r0, r3
 8006758:	f000 fa2e 	bl	8006bb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699a      	ldr	r2, [r3, #24]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f042 0208 	orr.w	r2, r2, #8
 800676a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	699a      	ldr	r2, [r3, #24]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 0204 	bic.w	r2, r2, #4
 800677a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6999      	ldr	r1, [r3, #24]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	691a      	ldr	r2, [r3, #16]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	619a      	str	r2, [r3, #24]
      break;
 800678e:	e0a5      	b.n	80068dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68b9      	ldr	r1, [r7, #8]
 8006796:	4618      	mov	r0, r3
 8006798:	f000 fa9e 	bl	8006cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	699a      	ldr	r2, [r3, #24]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	699a      	ldr	r2, [r3, #24]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6999      	ldr	r1, [r3, #24]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	021a      	lsls	r2, r3, #8
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	430a      	orrs	r2, r1
 80067ce:	619a      	str	r2, [r3, #24]
      break;
 80067d0:	e084      	b.n	80068dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68b9      	ldr	r1, [r7, #8]
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 fb07 	bl	8006dec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69da      	ldr	r2, [r3, #28]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f042 0208 	orr.w	r2, r2, #8
 80067ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	69da      	ldr	r2, [r3, #28]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0204 	bic.w	r2, r2, #4
 80067fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69d9      	ldr	r1, [r3, #28]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	691a      	ldr	r2, [r3, #16]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	430a      	orrs	r2, r1
 800680e:	61da      	str	r2, [r3, #28]
      break;
 8006810:	e064      	b.n	80068dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68b9      	ldr	r1, [r7, #8]
 8006818:	4618      	mov	r0, r3
 800681a:	f000 fb6f 	bl	8006efc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	69da      	ldr	r2, [r3, #28]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800682c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	69da      	ldr	r2, [r3, #28]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800683c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69d9      	ldr	r1, [r3, #28]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	021a      	lsls	r2, r3, #8
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	430a      	orrs	r2, r1
 8006850:	61da      	str	r2, [r3, #28]
      break;
 8006852:	e043      	b.n	80068dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68b9      	ldr	r1, [r7, #8]
 800685a:	4618      	mov	r0, r3
 800685c:	f000 fbb8 	bl	8006fd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0208 	orr.w	r2, r2, #8
 800686e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0204 	bic.w	r2, r2, #4
 800687e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	691a      	ldr	r2, [r3, #16]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006892:	e023      	b.n	80068dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68b9      	ldr	r1, [r7, #8]
 800689a:	4618      	mov	r0, r3
 800689c:	f000 fbfc 	bl	8007098 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	021a      	lsls	r2, r3, #8
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068d4:	e002      	b.n	80068dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	75fb      	strb	r3, [r7, #23]
      break;
 80068da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3718      	adds	r7, #24
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop

080068f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006904:	2b01      	cmp	r3, #1
 8006906:	d101      	bne.n	800690c <HAL_TIM_ConfigClockSource+0x1c>
 8006908:	2302      	movs	r3, #2
 800690a:	e0b6      	b.n	8006a7a <HAL_TIM_ConfigClockSource+0x18a>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800692a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800692e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006936:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006948:	d03e      	beq.n	80069c8 <HAL_TIM_ConfigClockSource+0xd8>
 800694a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800694e:	f200 8087 	bhi.w	8006a60 <HAL_TIM_ConfigClockSource+0x170>
 8006952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006956:	f000 8086 	beq.w	8006a66 <HAL_TIM_ConfigClockSource+0x176>
 800695a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695e:	d87f      	bhi.n	8006a60 <HAL_TIM_ConfigClockSource+0x170>
 8006960:	2b70      	cmp	r3, #112	; 0x70
 8006962:	d01a      	beq.n	800699a <HAL_TIM_ConfigClockSource+0xaa>
 8006964:	2b70      	cmp	r3, #112	; 0x70
 8006966:	d87b      	bhi.n	8006a60 <HAL_TIM_ConfigClockSource+0x170>
 8006968:	2b60      	cmp	r3, #96	; 0x60
 800696a:	d050      	beq.n	8006a0e <HAL_TIM_ConfigClockSource+0x11e>
 800696c:	2b60      	cmp	r3, #96	; 0x60
 800696e:	d877      	bhi.n	8006a60 <HAL_TIM_ConfigClockSource+0x170>
 8006970:	2b50      	cmp	r3, #80	; 0x50
 8006972:	d03c      	beq.n	80069ee <HAL_TIM_ConfigClockSource+0xfe>
 8006974:	2b50      	cmp	r3, #80	; 0x50
 8006976:	d873      	bhi.n	8006a60 <HAL_TIM_ConfigClockSource+0x170>
 8006978:	2b40      	cmp	r3, #64	; 0x40
 800697a:	d058      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0x13e>
 800697c:	2b40      	cmp	r3, #64	; 0x40
 800697e:	d86f      	bhi.n	8006a60 <HAL_TIM_ConfigClockSource+0x170>
 8006980:	2b30      	cmp	r3, #48	; 0x30
 8006982:	d064      	beq.n	8006a4e <HAL_TIM_ConfigClockSource+0x15e>
 8006984:	2b30      	cmp	r3, #48	; 0x30
 8006986:	d86b      	bhi.n	8006a60 <HAL_TIM_ConfigClockSource+0x170>
 8006988:	2b20      	cmp	r3, #32
 800698a:	d060      	beq.n	8006a4e <HAL_TIM_ConfigClockSource+0x15e>
 800698c:	2b20      	cmp	r3, #32
 800698e:	d867      	bhi.n	8006a60 <HAL_TIM_ConfigClockSource+0x170>
 8006990:	2b00      	cmp	r3, #0
 8006992:	d05c      	beq.n	8006a4e <HAL_TIM_ConfigClockSource+0x15e>
 8006994:	2b10      	cmp	r3, #16
 8006996:	d05a      	beq.n	8006a4e <HAL_TIM_ConfigClockSource+0x15e>
 8006998:	e062      	b.n	8006a60 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069aa:	f000 fc55 	bl	8007258 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	609a      	str	r2, [r3, #8]
      break;
 80069c6:	e04f      	b.n	8006a68 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069d8:	f000 fc3e 	bl	8007258 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689a      	ldr	r2, [r3, #8]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069ea:	609a      	str	r2, [r3, #8]
      break;
 80069ec:	e03c      	b.n	8006a68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069fa:	461a      	mov	r2, r3
 80069fc:	f000 fbb2 	bl	8007164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2150      	movs	r1, #80	; 0x50
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 fc0b 	bl	8007222 <TIM_ITRx_SetConfig>
      break;
 8006a0c:	e02c      	b.n	8006a68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	f000 fbd1 	bl	80071c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2160      	movs	r1, #96	; 0x60
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 fbfb 	bl	8007222 <TIM_ITRx_SetConfig>
      break;
 8006a2c:	e01c      	b.n	8006a68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f000 fb92 	bl	8007164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2140      	movs	r1, #64	; 0x40
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 fbeb 	bl	8007222 <TIM_ITRx_SetConfig>
      break;
 8006a4c:	e00c      	b.n	8006a68 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4619      	mov	r1, r3
 8006a58:	4610      	mov	r0, r2
 8006a5a:	f000 fbe2 	bl	8007222 <TIM_ITRx_SetConfig>
      break;
 8006a5e:	e003      	b.n	8006a68 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	73fb      	strb	r3, [r7, #15]
      break;
 8006a64:	e000      	b.n	8006a68 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006a66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
	...

08006a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a40      	ldr	r2, [pc, #256]	; (8006b98 <TIM_Base_SetConfig+0x114>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d013      	beq.n	8006ac4 <TIM_Base_SetConfig+0x40>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa2:	d00f      	beq.n	8006ac4 <TIM_Base_SetConfig+0x40>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a3d      	ldr	r2, [pc, #244]	; (8006b9c <TIM_Base_SetConfig+0x118>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d00b      	beq.n	8006ac4 <TIM_Base_SetConfig+0x40>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a3c      	ldr	r2, [pc, #240]	; (8006ba0 <TIM_Base_SetConfig+0x11c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d007      	beq.n	8006ac4 <TIM_Base_SetConfig+0x40>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a3b      	ldr	r2, [pc, #236]	; (8006ba4 <TIM_Base_SetConfig+0x120>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d003      	beq.n	8006ac4 <TIM_Base_SetConfig+0x40>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a3a      	ldr	r2, [pc, #232]	; (8006ba8 <TIM_Base_SetConfig+0x124>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d108      	bne.n	8006ad6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a2f      	ldr	r2, [pc, #188]	; (8006b98 <TIM_Base_SetConfig+0x114>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d01f      	beq.n	8006b1e <TIM_Base_SetConfig+0x9a>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae4:	d01b      	beq.n	8006b1e <TIM_Base_SetConfig+0x9a>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a2c      	ldr	r2, [pc, #176]	; (8006b9c <TIM_Base_SetConfig+0x118>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d017      	beq.n	8006b1e <TIM_Base_SetConfig+0x9a>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a2b      	ldr	r2, [pc, #172]	; (8006ba0 <TIM_Base_SetConfig+0x11c>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d013      	beq.n	8006b1e <TIM_Base_SetConfig+0x9a>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a2a      	ldr	r2, [pc, #168]	; (8006ba4 <TIM_Base_SetConfig+0x120>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d00f      	beq.n	8006b1e <TIM_Base_SetConfig+0x9a>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a29      	ldr	r2, [pc, #164]	; (8006ba8 <TIM_Base_SetConfig+0x124>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d00b      	beq.n	8006b1e <TIM_Base_SetConfig+0x9a>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a28      	ldr	r2, [pc, #160]	; (8006bac <TIM_Base_SetConfig+0x128>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d007      	beq.n	8006b1e <TIM_Base_SetConfig+0x9a>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a27      	ldr	r2, [pc, #156]	; (8006bb0 <TIM_Base_SetConfig+0x12c>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d003      	beq.n	8006b1e <TIM_Base_SetConfig+0x9a>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a26      	ldr	r2, [pc, #152]	; (8006bb4 <TIM_Base_SetConfig+0x130>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d108      	bne.n	8006b30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	689a      	ldr	r2, [r3, #8]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a10      	ldr	r2, [pc, #64]	; (8006b98 <TIM_Base_SetConfig+0x114>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d00f      	beq.n	8006b7c <TIM_Base_SetConfig+0xf8>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a12      	ldr	r2, [pc, #72]	; (8006ba8 <TIM_Base_SetConfig+0x124>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d00b      	beq.n	8006b7c <TIM_Base_SetConfig+0xf8>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a11      	ldr	r2, [pc, #68]	; (8006bac <TIM_Base_SetConfig+0x128>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d007      	beq.n	8006b7c <TIM_Base_SetConfig+0xf8>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a10      	ldr	r2, [pc, #64]	; (8006bb0 <TIM_Base_SetConfig+0x12c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d003      	beq.n	8006b7c <TIM_Base_SetConfig+0xf8>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a0f      	ldr	r2, [pc, #60]	; (8006bb4 <TIM_Base_SetConfig+0x130>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d103      	bne.n	8006b84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	691a      	ldr	r2, [r3, #16]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	615a      	str	r2, [r3, #20]
}
 8006b8a:	bf00      	nop
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	40012c00 	.word	0x40012c00
 8006b9c:	40000400 	.word	0x40000400
 8006ba0:	40000800 	.word	0x40000800
 8006ba4:	40000c00 	.word	0x40000c00
 8006ba8:	40013400 	.word	0x40013400
 8006bac:	40014000 	.word	0x40014000
 8006bb0:	40014400 	.word	0x40014400
 8006bb4:	40014800 	.word	0x40014800

08006bb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	f023 0201 	bic.w	r2, r3, #1
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0303 	bic.w	r3, r3, #3
 8006bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f023 0302 	bic.w	r3, r3, #2
 8006c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a2c      	ldr	r2, [pc, #176]	; (8006cc4 <TIM_OC1_SetConfig+0x10c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d00f      	beq.n	8006c38 <TIM_OC1_SetConfig+0x80>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a2b      	ldr	r2, [pc, #172]	; (8006cc8 <TIM_OC1_SetConfig+0x110>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d00b      	beq.n	8006c38 <TIM_OC1_SetConfig+0x80>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a2a      	ldr	r2, [pc, #168]	; (8006ccc <TIM_OC1_SetConfig+0x114>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d007      	beq.n	8006c38 <TIM_OC1_SetConfig+0x80>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a29      	ldr	r2, [pc, #164]	; (8006cd0 <TIM_OC1_SetConfig+0x118>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d003      	beq.n	8006c38 <TIM_OC1_SetConfig+0x80>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a28      	ldr	r2, [pc, #160]	; (8006cd4 <TIM_OC1_SetConfig+0x11c>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d10c      	bne.n	8006c52 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f023 0308 	bic.w	r3, r3, #8
 8006c3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f023 0304 	bic.w	r3, r3, #4
 8006c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a1b      	ldr	r2, [pc, #108]	; (8006cc4 <TIM_OC1_SetConfig+0x10c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d00f      	beq.n	8006c7a <TIM_OC1_SetConfig+0xc2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a1a      	ldr	r2, [pc, #104]	; (8006cc8 <TIM_OC1_SetConfig+0x110>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d00b      	beq.n	8006c7a <TIM_OC1_SetConfig+0xc2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a19      	ldr	r2, [pc, #100]	; (8006ccc <TIM_OC1_SetConfig+0x114>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d007      	beq.n	8006c7a <TIM_OC1_SetConfig+0xc2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a18      	ldr	r2, [pc, #96]	; (8006cd0 <TIM_OC1_SetConfig+0x118>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d003      	beq.n	8006c7a <TIM_OC1_SetConfig+0xc2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a17      	ldr	r2, [pc, #92]	; (8006cd4 <TIM_OC1_SetConfig+0x11c>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d111      	bne.n	8006c9e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	621a      	str	r2, [r3, #32]
}
 8006cb8:	bf00      	nop
 8006cba:	371c      	adds	r7, #28
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	40012c00 	.word	0x40012c00
 8006cc8:	40013400 	.word	0x40013400
 8006ccc:	40014000 	.word	0x40014000
 8006cd0:	40014400 	.word	0x40014400
 8006cd4:	40014800 	.word	0x40014800

08006cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	f023 0210 	bic.w	r2, r3, #16
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	021b      	lsls	r3, r3, #8
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f023 0320 	bic.w	r3, r3, #32
 8006d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	011b      	lsls	r3, r3, #4
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a28      	ldr	r2, [pc, #160]	; (8006dd8 <TIM_OC2_SetConfig+0x100>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d003      	beq.n	8006d44 <TIM_OC2_SetConfig+0x6c>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a27      	ldr	r2, [pc, #156]	; (8006ddc <TIM_OC2_SetConfig+0x104>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d10d      	bne.n	8006d60 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	011b      	lsls	r3, r3, #4
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a1d      	ldr	r2, [pc, #116]	; (8006dd8 <TIM_OC2_SetConfig+0x100>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00f      	beq.n	8006d88 <TIM_OC2_SetConfig+0xb0>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a1c      	ldr	r2, [pc, #112]	; (8006ddc <TIM_OC2_SetConfig+0x104>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00b      	beq.n	8006d88 <TIM_OC2_SetConfig+0xb0>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a1b      	ldr	r2, [pc, #108]	; (8006de0 <TIM_OC2_SetConfig+0x108>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d007      	beq.n	8006d88 <TIM_OC2_SetConfig+0xb0>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a1a      	ldr	r2, [pc, #104]	; (8006de4 <TIM_OC2_SetConfig+0x10c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d003      	beq.n	8006d88 <TIM_OC2_SetConfig+0xb0>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a19      	ldr	r2, [pc, #100]	; (8006de8 <TIM_OC2_SetConfig+0x110>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d113      	bne.n	8006db0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	621a      	str	r2, [r3, #32]
}
 8006dca:	bf00      	nop
 8006dcc:	371c      	adds	r7, #28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	40012c00 	.word	0x40012c00
 8006ddc:	40013400 	.word	0x40013400
 8006de0:	40014000 	.word	0x40014000
 8006de4:	40014400 	.word	0x40014400
 8006de8:	40014800 	.word	0x40014800

08006dec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f023 0303 	bic.w	r3, r3, #3
 8006e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	021b      	lsls	r3, r3, #8
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a27      	ldr	r2, [pc, #156]	; (8006ee8 <TIM_OC3_SetConfig+0xfc>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d003      	beq.n	8006e56 <TIM_OC3_SetConfig+0x6a>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a26      	ldr	r2, [pc, #152]	; (8006eec <TIM_OC3_SetConfig+0x100>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d10d      	bne.n	8006e72 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	021b      	lsls	r3, r3, #8
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a1c      	ldr	r2, [pc, #112]	; (8006ee8 <TIM_OC3_SetConfig+0xfc>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d00f      	beq.n	8006e9a <TIM_OC3_SetConfig+0xae>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a1b      	ldr	r2, [pc, #108]	; (8006eec <TIM_OC3_SetConfig+0x100>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d00b      	beq.n	8006e9a <TIM_OC3_SetConfig+0xae>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a1a      	ldr	r2, [pc, #104]	; (8006ef0 <TIM_OC3_SetConfig+0x104>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d007      	beq.n	8006e9a <TIM_OC3_SetConfig+0xae>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a19      	ldr	r2, [pc, #100]	; (8006ef4 <TIM_OC3_SetConfig+0x108>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d003      	beq.n	8006e9a <TIM_OC3_SetConfig+0xae>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a18      	ldr	r2, [pc, #96]	; (8006ef8 <TIM_OC3_SetConfig+0x10c>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d113      	bne.n	8006ec2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	011b      	lsls	r3, r3, #4
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	011b      	lsls	r3, r3, #4
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	621a      	str	r2, [r3, #32]
}
 8006edc:	bf00      	nop
 8006ede:	371c      	adds	r7, #28
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	40012c00 	.word	0x40012c00
 8006eec:	40013400 	.word	0x40013400
 8006ef0:	40014000 	.word	0x40014000
 8006ef4:	40014400 	.word	0x40014400
 8006ef8:	40014800 	.word	0x40014800

08006efc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	021b      	lsls	r3, r3, #8
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	031b      	lsls	r3, r3, #12
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a18      	ldr	r2, [pc, #96]	; (8006fbc <TIM_OC4_SetConfig+0xc0>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d00f      	beq.n	8006f80 <TIM_OC4_SetConfig+0x84>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a17      	ldr	r2, [pc, #92]	; (8006fc0 <TIM_OC4_SetConfig+0xc4>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d00b      	beq.n	8006f80 <TIM_OC4_SetConfig+0x84>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a16      	ldr	r2, [pc, #88]	; (8006fc4 <TIM_OC4_SetConfig+0xc8>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d007      	beq.n	8006f80 <TIM_OC4_SetConfig+0x84>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a15      	ldr	r2, [pc, #84]	; (8006fc8 <TIM_OC4_SetConfig+0xcc>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d003      	beq.n	8006f80 <TIM_OC4_SetConfig+0x84>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a14      	ldr	r2, [pc, #80]	; (8006fcc <TIM_OC4_SetConfig+0xd0>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d109      	bne.n	8006f94 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	695b      	ldr	r3, [r3, #20]
 8006f8c:	019b      	lsls	r3, r3, #6
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	621a      	str	r2, [r3, #32]
}
 8006fae:	bf00      	nop
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	40012c00 	.word	0x40012c00
 8006fc0:	40013400 	.word	0x40013400
 8006fc4:	40014000 	.word	0x40014000
 8006fc8:	40014400 	.word	0x40014400
 8006fcc:	40014800 	.word	0x40014800

08006fd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b087      	sub	sp, #28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	4313      	orrs	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007014:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	041b      	lsls	r3, r3, #16
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	4313      	orrs	r3, r2
 8007020:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a17      	ldr	r2, [pc, #92]	; (8007084 <TIM_OC5_SetConfig+0xb4>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d00f      	beq.n	800704a <TIM_OC5_SetConfig+0x7a>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a16      	ldr	r2, [pc, #88]	; (8007088 <TIM_OC5_SetConfig+0xb8>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d00b      	beq.n	800704a <TIM_OC5_SetConfig+0x7a>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a15      	ldr	r2, [pc, #84]	; (800708c <TIM_OC5_SetConfig+0xbc>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d007      	beq.n	800704a <TIM_OC5_SetConfig+0x7a>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a14      	ldr	r2, [pc, #80]	; (8007090 <TIM_OC5_SetConfig+0xc0>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d003      	beq.n	800704a <TIM_OC5_SetConfig+0x7a>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a13      	ldr	r2, [pc, #76]	; (8007094 <TIM_OC5_SetConfig+0xc4>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d109      	bne.n	800705e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007050:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	021b      	lsls	r3, r3, #8
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	4313      	orrs	r3, r2
 800705c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	685a      	ldr	r2, [r3, #4]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	621a      	str	r2, [r3, #32]
}
 8007078:	bf00      	nop
 800707a:	371c      	adds	r7, #28
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr
 8007084:	40012c00 	.word	0x40012c00
 8007088:	40013400 	.word	0x40013400
 800708c:	40014000 	.word	0x40014000
 8007090:	40014400 	.word	0x40014400
 8007094:	40014800 	.word	0x40014800

08007098 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007098:	b480      	push	{r7}
 800709a:	b087      	sub	sp, #28
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	021b      	lsls	r3, r3, #8
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	051b      	lsls	r3, r3, #20
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a18      	ldr	r2, [pc, #96]	; (8007150 <TIM_OC6_SetConfig+0xb8>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d00f      	beq.n	8007114 <TIM_OC6_SetConfig+0x7c>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a17      	ldr	r2, [pc, #92]	; (8007154 <TIM_OC6_SetConfig+0xbc>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d00b      	beq.n	8007114 <TIM_OC6_SetConfig+0x7c>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a16      	ldr	r2, [pc, #88]	; (8007158 <TIM_OC6_SetConfig+0xc0>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d007      	beq.n	8007114 <TIM_OC6_SetConfig+0x7c>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a15      	ldr	r2, [pc, #84]	; (800715c <TIM_OC6_SetConfig+0xc4>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d003      	beq.n	8007114 <TIM_OC6_SetConfig+0x7c>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a14      	ldr	r2, [pc, #80]	; (8007160 <TIM_OC6_SetConfig+0xc8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d109      	bne.n	8007128 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800711a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	029b      	lsls	r3, r3, #10
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	4313      	orrs	r3, r2
 8007126:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	621a      	str	r2, [r3, #32]
}
 8007142:	bf00      	nop
 8007144:	371c      	adds	r7, #28
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	40012c00 	.word	0x40012c00
 8007154:	40013400 	.word	0x40013400
 8007158:	40014000 	.word	0x40014000
 800715c:	40014400 	.word	0x40014400
 8007160:	40014800 	.word	0x40014800

08007164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007164:	b480      	push	{r7}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	f023 0201 	bic.w	r2, r3, #1
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800718e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	011b      	lsls	r3, r3, #4
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	4313      	orrs	r3, r2
 8007198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f023 030a 	bic.w	r3, r3, #10
 80071a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	621a      	str	r2, [r3, #32]
}
 80071b6:	bf00      	nop
 80071b8:	371c      	adds	r7, #28
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b087      	sub	sp, #28
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	60f8      	str	r0, [r7, #12]
 80071ca:	60b9      	str	r1, [r7, #8]
 80071cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	f023 0210 	bic.w	r2, r3, #16
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	031b      	lsls	r3, r3, #12
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	011b      	lsls	r3, r3, #4
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	4313      	orrs	r3, r2
 8007208:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	621a      	str	r2, [r3, #32]
}
 8007216:	bf00      	nop
 8007218:	371c      	adds	r7, #28
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007222:	b480      	push	{r7}
 8007224:	b085      	sub	sp, #20
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4313      	orrs	r3, r2
 8007240:	f043 0307 	orr.w	r3, r3, #7
 8007244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	609a      	str	r2, [r3, #8]
}
 800724c:	bf00      	nop
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
 8007264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	021a      	lsls	r2, r3, #8
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	431a      	orrs	r2, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	4313      	orrs	r3, r2
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	609a      	str	r2, [r3, #8]
}
 800728c:	bf00      	nop
 800728e:	371c      	adds	r7, #28
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007298:	b480      	push	{r7}
 800729a:	b087      	sub	sp, #28
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	f003 031f 	and.w	r3, r3, #31
 80072aa:	2201      	movs	r2, #1
 80072ac:	fa02 f303 	lsl.w	r3, r2, r3
 80072b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6a1a      	ldr	r2, [r3, #32]
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	43db      	mvns	r3, r3
 80072ba:	401a      	ands	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6a1a      	ldr	r2, [r3, #32]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f003 031f 	and.w	r3, r3, #31
 80072ca:	6879      	ldr	r1, [r7, #4]
 80072cc:	fa01 f303 	lsl.w	r3, r1, r3
 80072d0:	431a      	orrs	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	621a      	str	r2, [r3, #32]
}
 80072d6:	bf00      	nop
 80072d8:	371c      	adds	r7, #28
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
	...

080072e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d101      	bne.n	80072fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072f8:	2302      	movs	r3, #2
 80072fa:	e068      	b.n	80073ce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2202      	movs	r2, #2
 8007308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a2e      	ldr	r2, [pc, #184]	; (80073dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d004      	beq.n	8007330 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a2d      	ldr	r2, [pc, #180]	; (80073e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d108      	bne.n	8007342 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007336:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	4313      	orrs	r3, r2
 8007340:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007348:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	4313      	orrs	r3, r2
 8007352:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a1e      	ldr	r2, [pc, #120]	; (80073dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d01d      	beq.n	80073a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800736e:	d018      	beq.n	80073a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a1b      	ldr	r2, [pc, #108]	; (80073e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d013      	beq.n	80073a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a1a      	ldr	r2, [pc, #104]	; (80073e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d00e      	beq.n	80073a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a18      	ldr	r2, [pc, #96]	; (80073ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d009      	beq.n	80073a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a13      	ldr	r2, [pc, #76]	; (80073e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d004      	beq.n	80073a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a14      	ldr	r2, [pc, #80]	; (80073f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d10c      	bne.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	40012c00 	.word	0x40012c00
 80073e0:	40013400 	.word	0x40013400
 80073e4:	40000400 	.word	0x40000400
 80073e8:	40000800 	.word	0x40000800
 80073ec:	40000c00 	.word	0x40000c00
 80073f0:	40014000 	.word	0x40014000

080073f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e042      	b.n	800748c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800740c:	2b00      	cmp	r3, #0
 800740e:	d106      	bne.n	800741e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7fa f83f 	bl	800149c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2224      	movs	r2, #36	; 0x24
 8007422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f022 0201 	bic.w	r2, r2, #1
 8007434:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f82c 	bl	8007494 <UART_SetConfig>
 800743c:	4603      	mov	r3, r0
 800743e:	2b01      	cmp	r3, #1
 8007440:	d101      	bne.n	8007446 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e022      	b.n	800748c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744a:	2b00      	cmp	r3, #0
 800744c:	d002      	beq.n	8007454 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fb1c 	bl	8007a8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685a      	ldr	r2, [r3, #4]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007462:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	689a      	ldr	r2, [r3, #8]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007472:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f042 0201 	orr.w	r2, r2, #1
 8007482:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fba3 	bl	8007bd0 <UART_CheckIdleState>
 800748a:	4603      	mov	r3, r0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007498:	b08c      	sub	sp, #48	; 0x30
 800749a:	af00      	add	r7, sp, #0
 800749c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800749e:	2300      	movs	r3, #0
 80074a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	689a      	ldr	r2, [r3, #8]
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	431a      	orrs	r2, r3
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	431a      	orrs	r2, r3
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	69db      	ldr	r3, [r3, #28]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	4baa      	ldr	r3, [pc, #680]	; (800776c <UART_SetConfig+0x2d8>)
 80074c4:	4013      	ands	r3, r2
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	6812      	ldr	r2, [r2, #0]
 80074ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074cc:	430b      	orrs	r3, r1
 80074ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	68da      	ldr	r2, [r3, #12]
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a9f      	ldr	r2, [pc, #636]	; (8007770 <UART_SetConfig+0x2dc>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d004      	beq.n	8007500 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074fc:	4313      	orrs	r3, r2
 80074fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800750a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	6812      	ldr	r2, [r2, #0]
 8007512:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007514:	430b      	orrs	r3, r1
 8007516:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751e:	f023 010f 	bic.w	r1, r3, #15
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	430a      	orrs	r2, r1
 800752c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a90      	ldr	r2, [pc, #576]	; (8007774 <UART_SetConfig+0x2e0>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d125      	bne.n	8007584 <UART_SetConfig+0xf0>
 8007538:	4b8f      	ldr	r3, [pc, #572]	; (8007778 <UART_SetConfig+0x2e4>)
 800753a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800753e:	f003 0303 	and.w	r3, r3, #3
 8007542:	2b03      	cmp	r3, #3
 8007544:	d81a      	bhi.n	800757c <UART_SetConfig+0xe8>
 8007546:	a201      	add	r2, pc, #4	; (adr r2, 800754c <UART_SetConfig+0xb8>)
 8007548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754c:	0800755d 	.word	0x0800755d
 8007550:	0800756d 	.word	0x0800756d
 8007554:	08007565 	.word	0x08007565
 8007558:	08007575 	.word	0x08007575
 800755c:	2301      	movs	r3, #1
 800755e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007562:	e116      	b.n	8007792 <UART_SetConfig+0x2fe>
 8007564:	2302      	movs	r3, #2
 8007566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800756a:	e112      	b.n	8007792 <UART_SetConfig+0x2fe>
 800756c:	2304      	movs	r3, #4
 800756e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007572:	e10e      	b.n	8007792 <UART_SetConfig+0x2fe>
 8007574:	2308      	movs	r3, #8
 8007576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800757a:	e10a      	b.n	8007792 <UART_SetConfig+0x2fe>
 800757c:	2310      	movs	r3, #16
 800757e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007582:	e106      	b.n	8007792 <UART_SetConfig+0x2fe>
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a7c      	ldr	r2, [pc, #496]	; (800777c <UART_SetConfig+0x2e8>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d138      	bne.n	8007600 <UART_SetConfig+0x16c>
 800758e:	4b7a      	ldr	r3, [pc, #488]	; (8007778 <UART_SetConfig+0x2e4>)
 8007590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007594:	f003 030c 	and.w	r3, r3, #12
 8007598:	2b0c      	cmp	r3, #12
 800759a:	d82d      	bhi.n	80075f8 <UART_SetConfig+0x164>
 800759c:	a201      	add	r2, pc, #4	; (adr r2, 80075a4 <UART_SetConfig+0x110>)
 800759e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a2:	bf00      	nop
 80075a4:	080075d9 	.word	0x080075d9
 80075a8:	080075f9 	.word	0x080075f9
 80075ac:	080075f9 	.word	0x080075f9
 80075b0:	080075f9 	.word	0x080075f9
 80075b4:	080075e9 	.word	0x080075e9
 80075b8:	080075f9 	.word	0x080075f9
 80075bc:	080075f9 	.word	0x080075f9
 80075c0:	080075f9 	.word	0x080075f9
 80075c4:	080075e1 	.word	0x080075e1
 80075c8:	080075f9 	.word	0x080075f9
 80075cc:	080075f9 	.word	0x080075f9
 80075d0:	080075f9 	.word	0x080075f9
 80075d4:	080075f1 	.word	0x080075f1
 80075d8:	2300      	movs	r3, #0
 80075da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075de:	e0d8      	b.n	8007792 <UART_SetConfig+0x2fe>
 80075e0:	2302      	movs	r3, #2
 80075e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075e6:	e0d4      	b.n	8007792 <UART_SetConfig+0x2fe>
 80075e8:	2304      	movs	r3, #4
 80075ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075ee:	e0d0      	b.n	8007792 <UART_SetConfig+0x2fe>
 80075f0:	2308      	movs	r3, #8
 80075f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075f6:	e0cc      	b.n	8007792 <UART_SetConfig+0x2fe>
 80075f8:	2310      	movs	r3, #16
 80075fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075fe:	e0c8      	b.n	8007792 <UART_SetConfig+0x2fe>
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a5e      	ldr	r2, [pc, #376]	; (8007780 <UART_SetConfig+0x2ec>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d125      	bne.n	8007656 <UART_SetConfig+0x1c2>
 800760a:	4b5b      	ldr	r3, [pc, #364]	; (8007778 <UART_SetConfig+0x2e4>)
 800760c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007610:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007614:	2b30      	cmp	r3, #48	; 0x30
 8007616:	d016      	beq.n	8007646 <UART_SetConfig+0x1b2>
 8007618:	2b30      	cmp	r3, #48	; 0x30
 800761a:	d818      	bhi.n	800764e <UART_SetConfig+0x1ba>
 800761c:	2b20      	cmp	r3, #32
 800761e:	d00a      	beq.n	8007636 <UART_SetConfig+0x1a2>
 8007620:	2b20      	cmp	r3, #32
 8007622:	d814      	bhi.n	800764e <UART_SetConfig+0x1ba>
 8007624:	2b00      	cmp	r3, #0
 8007626:	d002      	beq.n	800762e <UART_SetConfig+0x19a>
 8007628:	2b10      	cmp	r3, #16
 800762a:	d008      	beq.n	800763e <UART_SetConfig+0x1aa>
 800762c:	e00f      	b.n	800764e <UART_SetConfig+0x1ba>
 800762e:	2300      	movs	r3, #0
 8007630:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007634:	e0ad      	b.n	8007792 <UART_SetConfig+0x2fe>
 8007636:	2302      	movs	r3, #2
 8007638:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800763c:	e0a9      	b.n	8007792 <UART_SetConfig+0x2fe>
 800763e:	2304      	movs	r3, #4
 8007640:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007644:	e0a5      	b.n	8007792 <UART_SetConfig+0x2fe>
 8007646:	2308      	movs	r3, #8
 8007648:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800764c:	e0a1      	b.n	8007792 <UART_SetConfig+0x2fe>
 800764e:	2310      	movs	r3, #16
 8007650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007654:	e09d      	b.n	8007792 <UART_SetConfig+0x2fe>
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a4a      	ldr	r2, [pc, #296]	; (8007784 <UART_SetConfig+0x2f0>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d125      	bne.n	80076ac <UART_SetConfig+0x218>
 8007660:	4b45      	ldr	r3, [pc, #276]	; (8007778 <UART_SetConfig+0x2e4>)
 8007662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007666:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800766a:	2bc0      	cmp	r3, #192	; 0xc0
 800766c:	d016      	beq.n	800769c <UART_SetConfig+0x208>
 800766e:	2bc0      	cmp	r3, #192	; 0xc0
 8007670:	d818      	bhi.n	80076a4 <UART_SetConfig+0x210>
 8007672:	2b80      	cmp	r3, #128	; 0x80
 8007674:	d00a      	beq.n	800768c <UART_SetConfig+0x1f8>
 8007676:	2b80      	cmp	r3, #128	; 0x80
 8007678:	d814      	bhi.n	80076a4 <UART_SetConfig+0x210>
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <UART_SetConfig+0x1f0>
 800767e:	2b40      	cmp	r3, #64	; 0x40
 8007680:	d008      	beq.n	8007694 <UART_SetConfig+0x200>
 8007682:	e00f      	b.n	80076a4 <UART_SetConfig+0x210>
 8007684:	2300      	movs	r3, #0
 8007686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800768a:	e082      	b.n	8007792 <UART_SetConfig+0x2fe>
 800768c:	2302      	movs	r3, #2
 800768e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007692:	e07e      	b.n	8007792 <UART_SetConfig+0x2fe>
 8007694:	2304      	movs	r3, #4
 8007696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800769a:	e07a      	b.n	8007792 <UART_SetConfig+0x2fe>
 800769c:	2308      	movs	r3, #8
 800769e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076a2:	e076      	b.n	8007792 <UART_SetConfig+0x2fe>
 80076a4:	2310      	movs	r3, #16
 80076a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076aa:	e072      	b.n	8007792 <UART_SetConfig+0x2fe>
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a35      	ldr	r2, [pc, #212]	; (8007788 <UART_SetConfig+0x2f4>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d12a      	bne.n	800770c <UART_SetConfig+0x278>
 80076b6:	4b30      	ldr	r3, [pc, #192]	; (8007778 <UART_SetConfig+0x2e4>)
 80076b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076c4:	d01a      	beq.n	80076fc <UART_SetConfig+0x268>
 80076c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076ca:	d81b      	bhi.n	8007704 <UART_SetConfig+0x270>
 80076cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076d0:	d00c      	beq.n	80076ec <UART_SetConfig+0x258>
 80076d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076d6:	d815      	bhi.n	8007704 <UART_SetConfig+0x270>
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d003      	beq.n	80076e4 <UART_SetConfig+0x250>
 80076dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076e0:	d008      	beq.n	80076f4 <UART_SetConfig+0x260>
 80076e2:	e00f      	b.n	8007704 <UART_SetConfig+0x270>
 80076e4:	2300      	movs	r3, #0
 80076e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076ea:	e052      	b.n	8007792 <UART_SetConfig+0x2fe>
 80076ec:	2302      	movs	r3, #2
 80076ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076f2:	e04e      	b.n	8007792 <UART_SetConfig+0x2fe>
 80076f4:	2304      	movs	r3, #4
 80076f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076fa:	e04a      	b.n	8007792 <UART_SetConfig+0x2fe>
 80076fc:	2308      	movs	r3, #8
 80076fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007702:	e046      	b.n	8007792 <UART_SetConfig+0x2fe>
 8007704:	2310      	movs	r3, #16
 8007706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800770a:	e042      	b.n	8007792 <UART_SetConfig+0x2fe>
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a17      	ldr	r2, [pc, #92]	; (8007770 <UART_SetConfig+0x2dc>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d13a      	bne.n	800778c <UART_SetConfig+0x2f8>
 8007716:	4b18      	ldr	r3, [pc, #96]	; (8007778 <UART_SetConfig+0x2e4>)
 8007718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800771c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007720:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007724:	d01a      	beq.n	800775c <UART_SetConfig+0x2c8>
 8007726:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800772a:	d81b      	bhi.n	8007764 <UART_SetConfig+0x2d0>
 800772c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007730:	d00c      	beq.n	800774c <UART_SetConfig+0x2b8>
 8007732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007736:	d815      	bhi.n	8007764 <UART_SetConfig+0x2d0>
 8007738:	2b00      	cmp	r3, #0
 800773a:	d003      	beq.n	8007744 <UART_SetConfig+0x2b0>
 800773c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007740:	d008      	beq.n	8007754 <UART_SetConfig+0x2c0>
 8007742:	e00f      	b.n	8007764 <UART_SetConfig+0x2d0>
 8007744:	2300      	movs	r3, #0
 8007746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800774a:	e022      	b.n	8007792 <UART_SetConfig+0x2fe>
 800774c:	2302      	movs	r3, #2
 800774e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007752:	e01e      	b.n	8007792 <UART_SetConfig+0x2fe>
 8007754:	2304      	movs	r3, #4
 8007756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800775a:	e01a      	b.n	8007792 <UART_SetConfig+0x2fe>
 800775c:	2308      	movs	r3, #8
 800775e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007762:	e016      	b.n	8007792 <UART_SetConfig+0x2fe>
 8007764:	2310      	movs	r3, #16
 8007766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800776a:	e012      	b.n	8007792 <UART_SetConfig+0x2fe>
 800776c:	cfff69f3 	.word	0xcfff69f3
 8007770:	40008000 	.word	0x40008000
 8007774:	40013800 	.word	0x40013800
 8007778:	40021000 	.word	0x40021000
 800777c:	40004400 	.word	0x40004400
 8007780:	40004800 	.word	0x40004800
 8007784:	40004c00 	.word	0x40004c00
 8007788:	40005000 	.word	0x40005000
 800778c:	2310      	movs	r3, #16
 800778e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4aae      	ldr	r2, [pc, #696]	; (8007a50 <UART_SetConfig+0x5bc>)
 8007798:	4293      	cmp	r3, r2
 800779a:	f040 8097 	bne.w	80078cc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800779e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077a2:	2b08      	cmp	r3, #8
 80077a4:	d823      	bhi.n	80077ee <UART_SetConfig+0x35a>
 80077a6:	a201      	add	r2, pc, #4	; (adr r2, 80077ac <UART_SetConfig+0x318>)
 80077a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ac:	080077d1 	.word	0x080077d1
 80077b0:	080077ef 	.word	0x080077ef
 80077b4:	080077d9 	.word	0x080077d9
 80077b8:	080077ef 	.word	0x080077ef
 80077bc:	080077df 	.word	0x080077df
 80077c0:	080077ef 	.word	0x080077ef
 80077c4:	080077ef 	.word	0x080077ef
 80077c8:	080077ef 	.word	0x080077ef
 80077cc:	080077e7 	.word	0x080077e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077d0:	f7fd f896 	bl	8004900 <HAL_RCC_GetPCLK1Freq>
 80077d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077d6:	e010      	b.n	80077fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077d8:	4b9e      	ldr	r3, [pc, #632]	; (8007a54 <UART_SetConfig+0x5c0>)
 80077da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80077dc:	e00d      	b.n	80077fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077de:	f7fc fff7 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 80077e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077e4:	e009      	b.n	80077fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80077ec:	e005      	b.n	80077fa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80077f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 8130 	beq.w	8007a62 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007806:	4a94      	ldr	r2, [pc, #592]	; (8007a58 <UART_SetConfig+0x5c4>)
 8007808:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800780c:	461a      	mov	r2, r3
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	fbb3 f3f2 	udiv	r3, r3, r2
 8007814:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	4613      	mov	r3, r2
 800781c:	005b      	lsls	r3, r3, #1
 800781e:	4413      	add	r3, r2
 8007820:	69ba      	ldr	r2, [r7, #24]
 8007822:	429a      	cmp	r2, r3
 8007824:	d305      	bcc.n	8007832 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800782c:	69ba      	ldr	r2, [r7, #24]
 800782e:	429a      	cmp	r2, r3
 8007830:	d903      	bls.n	800783a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007838:	e113      	b.n	8007a62 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	2200      	movs	r2, #0
 800783e:	60bb      	str	r3, [r7, #8]
 8007840:	60fa      	str	r2, [r7, #12]
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007846:	4a84      	ldr	r2, [pc, #528]	; (8007a58 <UART_SetConfig+0x5c4>)
 8007848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800784c:	b29b      	uxth	r3, r3
 800784e:	2200      	movs	r2, #0
 8007850:	603b      	str	r3, [r7, #0]
 8007852:	607a      	str	r2, [r7, #4]
 8007854:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007858:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800785c:	f7f8 fcae 	bl	80001bc <__aeabi_uldivmod>
 8007860:	4602      	mov	r2, r0
 8007862:	460b      	mov	r3, r1
 8007864:	4610      	mov	r0, r2
 8007866:	4619      	mov	r1, r3
 8007868:	f04f 0200 	mov.w	r2, #0
 800786c:	f04f 0300 	mov.w	r3, #0
 8007870:	020b      	lsls	r3, r1, #8
 8007872:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007876:	0202      	lsls	r2, r0, #8
 8007878:	6979      	ldr	r1, [r7, #20]
 800787a:	6849      	ldr	r1, [r1, #4]
 800787c:	0849      	lsrs	r1, r1, #1
 800787e:	2000      	movs	r0, #0
 8007880:	460c      	mov	r4, r1
 8007882:	4605      	mov	r5, r0
 8007884:	eb12 0804 	adds.w	r8, r2, r4
 8007888:	eb43 0905 	adc.w	r9, r3, r5
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	469a      	mov	sl, r3
 8007894:	4693      	mov	fp, r2
 8007896:	4652      	mov	r2, sl
 8007898:	465b      	mov	r3, fp
 800789a:	4640      	mov	r0, r8
 800789c:	4649      	mov	r1, r9
 800789e:	f7f8 fc8d 	bl	80001bc <__aeabi_uldivmod>
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	4613      	mov	r3, r2
 80078a8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078b0:	d308      	bcc.n	80078c4 <UART_SetConfig+0x430>
 80078b2:	6a3b      	ldr	r3, [r7, #32]
 80078b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078b8:	d204      	bcs.n	80078c4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6a3a      	ldr	r2, [r7, #32]
 80078c0:	60da      	str	r2, [r3, #12]
 80078c2:	e0ce      	b.n	8007a62 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80078ca:	e0ca      	b.n	8007a62 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078d4:	d166      	bne.n	80079a4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80078d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80078da:	2b08      	cmp	r3, #8
 80078dc:	d827      	bhi.n	800792e <UART_SetConfig+0x49a>
 80078de:	a201      	add	r2, pc, #4	; (adr r2, 80078e4 <UART_SetConfig+0x450>)
 80078e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e4:	08007909 	.word	0x08007909
 80078e8:	08007911 	.word	0x08007911
 80078ec:	08007919 	.word	0x08007919
 80078f0:	0800792f 	.word	0x0800792f
 80078f4:	0800791f 	.word	0x0800791f
 80078f8:	0800792f 	.word	0x0800792f
 80078fc:	0800792f 	.word	0x0800792f
 8007900:	0800792f 	.word	0x0800792f
 8007904:	08007927 	.word	0x08007927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007908:	f7fc fffa 	bl	8004900 <HAL_RCC_GetPCLK1Freq>
 800790c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800790e:	e014      	b.n	800793a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007910:	f7fd f80c 	bl	800492c <HAL_RCC_GetPCLK2Freq>
 8007914:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007916:	e010      	b.n	800793a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007918:	4b4e      	ldr	r3, [pc, #312]	; (8007a54 <UART_SetConfig+0x5c0>)
 800791a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800791c:	e00d      	b.n	800793a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800791e:	f7fc ff57 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 8007922:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007924:	e009      	b.n	800793a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800792a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800792c:	e005      	b.n	800793a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800792e:	2300      	movs	r3, #0
 8007930:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007938:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 8090 	beq.w	8007a62 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007946:	4a44      	ldr	r2, [pc, #272]	; (8007a58 <UART_SetConfig+0x5c4>)
 8007948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800794c:	461a      	mov	r2, r3
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	fbb3 f3f2 	udiv	r3, r3, r2
 8007954:	005a      	lsls	r2, r3, #1
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	085b      	lsrs	r3, r3, #1
 800795c:	441a      	add	r2, r3
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	fbb2 f3f3 	udiv	r3, r2, r3
 8007966:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007968:	6a3b      	ldr	r3, [r7, #32]
 800796a:	2b0f      	cmp	r3, #15
 800796c:	d916      	bls.n	800799c <UART_SetConfig+0x508>
 800796e:	6a3b      	ldr	r3, [r7, #32]
 8007970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007974:	d212      	bcs.n	800799c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	b29b      	uxth	r3, r3
 800797a:	f023 030f 	bic.w	r3, r3, #15
 800797e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	085b      	lsrs	r3, r3, #1
 8007984:	b29b      	uxth	r3, r3
 8007986:	f003 0307 	and.w	r3, r3, #7
 800798a:	b29a      	uxth	r2, r3
 800798c:	8bfb      	ldrh	r3, [r7, #30]
 800798e:	4313      	orrs	r3, r2
 8007990:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	8bfa      	ldrh	r2, [r7, #30]
 8007998:	60da      	str	r2, [r3, #12]
 800799a:	e062      	b.n	8007a62 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80079a2:	e05e      	b.n	8007a62 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80079a8:	2b08      	cmp	r3, #8
 80079aa:	d828      	bhi.n	80079fe <UART_SetConfig+0x56a>
 80079ac:	a201      	add	r2, pc, #4	; (adr r2, 80079b4 <UART_SetConfig+0x520>)
 80079ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b2:	bf00      	nop
 80079b4:	080079d9 	.word	0x080079d9
 80079b8:	080079e1 	.word	0x080079e1
 80079bc:	080079e9 	.word	0x080079e9
 80079c0:	080079ff 	.word	0x080079ff
 80079c4:	080079ef 	.word	0x080079ef
 80079c8:	080079ff 	.word	0x080079ff
 80079cc:	080079ff 	.word	0x080079ff
 80079d0:	080079ff 	.word	0x080079ff
 80079d4:	080079f7 	.word	0x080079f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079d8:	f7fc ff92 	bl	8004900 <HAL_RCC_GetPCLK1Freq>
 80079dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80079de:	e014      	b.n	8007a0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079e0:	f7fc ffa4 	bl	800492c <HAL_RCC_GetPCLK2Freq>
 80079e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80079e6:	e010      	b.n	8007a0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079e8:	4b1a      	ldr	r3, [pc, #104]	; (8007a54 <UART_SetConfig+0x5c0>)
 80079ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80079ec:	e00d      	b.n	8007a0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079ee:	f7fc feef 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 80079f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80079f4:	e009      	b.n	8007a0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80079fc:	e005      	b.n	8007a0a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80079fe:	2300      	movs	r3, #0
 8007a00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007a08:	bf00      	nop
    }

    if (pclk != 0U)
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d028      	beq.n	8007a62 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a14:	4a10      	ldr	r2, [pc, #64]	; (8007a58 <UART_SetConfig+0x5c4>)
 8007a16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	085b      	lsrs	r3, r3, #1
 8007a28:	441a      	add	r2, r3
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a32:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	2b0f      	cmp	r3, #15
 8007a38:	d910      	bls.n	8007a5c <UART_SetConfig+0x5c8>
 8007a3a:	6a3b      	ldr	r3, [r7, #32]
 8007a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a40:	d20c      	bcs.n	8007a5c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a42:	6a3b      	ldr	r3, [r7, #32]
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	60da      	str	r2, [r3, #12]
 8007a4c:	e009      	b.n	8007a62 <UART_SetConfig+0x5ce>
 8007a4e:	bf00      	nop
 8007a50:	40008000 	.word	0x40008000
 8007a54:	00f42400 	.word	0x00f42400
 8007a58:	0800837c 	.word	0x0800837c
      }
      else
      {
        ret = HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2200      	movs	r2, #0
 8007a76:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007a7e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3730      	adds	r7, #48	; 0x30
 8007a86:	46bd      	mov	sp, r7
 8007a88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007a8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00a      	beq.n	8007ab6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aba:	f003 0302 	and.w	r3, r3, #2
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00a      	beq.n	8007ad8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007adc:	f003 0304 	and.w	r3, r3, #4
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00a      	beq.n	8007afa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	430a      	orrs	r2, r1
 8007af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afe:	f003 0308 	and.w	r3, r3, #8
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00a      	beq.n	8007b1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	430a      	orrs	r2, r1
 8007b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b20:	f003 0310 	and.w	r3, r3, #16
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00a      	beq.n	8007b3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b42:	f003 0320 	and.w	r3, r3, #32
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00a      	beq.n	8007b60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	430a      	orrs	r2, r1
 8007b5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d01a      	beq.n	8007ba2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b8a:	d10a      	bne.n	8007ba2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00a      	beq.n	8007bc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	605a      	str	r2, [r3, #4]
  }
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af02      	add	r7, sp, #8
 8007bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007be0:	f7f9 fe94 	bl	800190c <HAL_GetTick>
 8007be4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0308 	and.w	r3, r3, #8
 8007bf0:	2b08      	cmp	r3, #8
 8007bf2:	d10e      	bne.n	8007c12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f82f 	bl	8007c66 <UART_WaitOnFlagUntilTimeout>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e025      	b.n	8007c5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 0304 	and.w	r3, r3, #4
 8007c1c:	2b04      	cmp	r3, #4
 8007c1e:	d10e      	bne.n	8007c3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f819 	bl	8007c66 <UART_WaitOnFlagUntilTimeout>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d001      	beq.n	8007c3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e00f      	b.n	8007c5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2220      	movs	r2, #32
 8007c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b09c      	sub	sp, #112	; 0x70
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	60f8      	str	r0, [r7, #12]
 8007c6e:	60b9      	str	r1, [r7, #8]
 8007c70:	603b      	str	r3, [r7, #0]
 8007c72:	4613      	mov	r3, r2
 8007c74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c76:	e0a9      	b.n	8007dcc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c7e:	f000 80a5 	beq.w	8007dcc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c82:	f7f9 fe43 	bl	800190c <HAL_GetTick>
 8007c86:	4602      	mov	r2, r0
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d302      	bcc.n	8007c98 <UART_WaitOnFlagUntilTimeout+0x32>
 8007c92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d140      	bne.n	8007d1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ca0:	e853 3f00 	ldrex	r3, [r3]
 8007ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007cac:	667b      	str	r3, [r7, #100]	; 0x64
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cb8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007cbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007cbe:	e841 2300 	strex	r3, r2, [r1]
 8007cc2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1e6      	bne.n	8007c98 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	3308      	adds	r3, #8
 8007cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cd4:	e853 3f00 	ldrex	r3, [r3]
 8007cd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cdc:	f023 0301 	bic.w	r3, r3, #1
 8007ce0:	663b      	str	r3, [r7, #96]	; 0x60
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3308      	adds	r3, #8
 8007ce8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007cea:	64ba      	str	r2, [r7, #72]	; 0x48
 8007cec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007cf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cf2:	e841 2300 	strex	r3, r2, [r1]
 8007cf6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1e5      	bne.n	8007cca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2220      	movs	r2, #32
 8007d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2220      	movs	r2, #32
 8007d0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e069      	b.n	8007dee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0304 	and.w	r3, r3, #4
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d051      	beq.n	8007dcc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d36:	d149      	bne.n	8007dcc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4a:	e853 3f00 	ldrex	r3, [r3]
 8007d4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d60:	637b      	str	r3, [r7, #52]	; 0x34
 8007d62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d68:	e841 2300 	strex	r3, r2, [r1]
 8007d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1e6      	bne.n	8007d42 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	3308      	adds	r3, #8
 8007d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	e853 3f00 	ldrex	r3, [r3]
 8007d82:	613b      	str	r3, [r7, #16]
   return(result);
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	f023 0301 	bic.w	r3, r3, #1
 8007d8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	3308      	adds	r3, #8
 8007d92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d94:	623a      	str	r2, [r7, #32]
 8007d96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d98:	69f9      	ldr	r1, [r7, #28]
 8007d9a:	6a3a      	ldr	r2, [r7, #32]
 8007d9c:	e841 2300 	strex	r3, r2, [r1]
 8007da0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1e5      	bne.n	8007d74 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2220      	movs	r2, #32
 8007dac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2220      	movs	r2, #32
 8007db4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2220      	movs	r2, #32
 8007dbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e010      	b.n	8007dee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	69da      	ldr	r2, [r3, #28]
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	bf0c      	ite	eq
 8007ddc:	2301      	moveq	r3, #1
 8007dde:	2300      	movne	r3, #0
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	461a      	mov	r2, r3
 8007de4:	79fb      	ldrb	r3, [r7, #7]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	f43f af46 	beq.w	8007c78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3770      	adds	r7, #112	; 0x70
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b085      	sub	sp, #20
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d101      	bne.n	8007e0c <HAL_UARTEx_DisableFifoMode+0x16>
 8007e08:	2302      	movs	r3, #2
 8007e0a:	e027      	b.n	8007e5c <HAL_UARTEx_DisableFifoMode+0x66>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2224      	movs	r2, #36	; 0x24
 8007e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f022 0201 	bic.w	r2, r2, #1
 8007e32:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007e3a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3714      	adds	r7, #20
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d101      	bne.n	8007e80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	e02d      	b.n	8007edc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2224      	movs	r2, #36	; 0x24
 8007e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 0201 	bic.w	r2, r2, #1
 8007ea6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f84f 	bl	8007f60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2220      	movs	r2, #32
 8007ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d101      	bne.n	8007efc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ef8:	2302      	movs	r3, #2
 8007efa:	e02d      	b.n	8007f58 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2224      	movs	r2, #36	; 0x24
 8007f08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f022 0201 	bic.w	r2, r2, #1
 8007f22:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	430a      	orrs	r2, r1
 8007f36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f811 	bl	8007f60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2220      	movs	r2, #32
 8007f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d108      	bne.n	8007f82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007f80:	e031      	b.n	8007fe6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007f82:	2308      	movs	r3, #8
 8007f84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007f86:	2308      	movs	r3, #8
 8007f88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	0e5b      	lsrs	r3, r3, #25
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	f003 0307 	and.w	r3, r3, #7
 8007f98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	0f5b      	lsrs	r3, r3, #29
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	f003 0307 	and.w	r3, r3, #7
 8007fa8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007faa:	7bbb      	ldrb	r3, [r7, #14]
 8007fac:	7b3a      	ldrb	r2, [r7, #12]
 8007fae:	4911      	ldr	r1, [pc, #68]	; (8007ff4 <UARTEx_SetNbDataToProcess+0x94>)
 8007fb0:	5c8a      	ldrb	r2, [r1, r2]
 8007fb2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007fb6:	7b3a      	ldrb	r2, [r7, #12]
 8007fb8:	490f      	ldr	r1, [pc, #60]	; (8007ff8 <UARTEx_SetNbDataToProcess+0x98>)
 8007fba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
 8007fca:	7b7a      	ldrb	r2, [r7, #13]
 8007fcc:	4909      	ldr	r1, [pc, #36]	; (8007ff4 <UARTEx_SetNbDataToProcess+0x94>)
 8007fce:	5c8a      	ldrb	r2, [r1, r2]
 8007fd0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007fd4:	7b7a      	ldrb	r2, [r7, #13]
 8007fd6:	4908      	ldr	r1, [pc, #32]	; (8007ff8 <UARTEx_SetNbDataToProcess+0x98>)
 8007fd8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fda:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007fe6:	bf00      	nop
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	08008394 	.word	0x08008394
 8007ff8:	0800839c 	.word	0x0800839c

08007ffc <__libc_init_array>:
 8007ffc:	b570      	push	{r4, r5, r6, lr}
 8007ffe:	4d0d      	ldr	r5, [pc, #52]	; (8008034 <__libc_init_array+0x38>)
 8008000:	4c0d      	ldr	r4, [pc, #52]	; (8008038 <__libc_init_array+0x3c>)
 8008002:	1b64      	subs	r4, r4, r5
 8008004:	10a4      	asrs	r4, r4, #2
 8008006:	2600      	movs	r6, #0
 8008008:	42a6      	cmp	r6, r4
 800800a:	d109      	bne.n	8008020 <__libc_init_array+0x24>
 800800c:	4d0b      	ldr	r5, [pc, #44]	; (800803c <__libc_init_array+0x40>)
 800800e:	4c0c      	ldr	r4, [pc, #48]	; (8008040 <__libc_init_array+0x44>)
 8008010:	f000 f984 	bl	800831c <_init>
 8008014:	1b64      	subs	r4, r4, r5
 8008016:	10a4      	asrs	r4, r4, #2
 8008018:	2600      	movs	r6, #0
 800801a:	42a6      	cmp	r6, r4
 800801c:	d105      	bne.n	800802a <__libc_init_array+0x2e>
 800801e:	bd70      	pop	{r4, r5, r6, pc}
 8008020:	f855 3b04 	ldr.w	r3, [r5], #4
 8008024:	4798      	blx	r3
 8008026:	3601      	adds	r6, #1
 8008028:	e7ee      	b.n	8008008 <__libc_init_array+0xc>
 800802a:	f855 3b04 	ldr.w	r3, [r5], #4
 800802e:	4798      	blx	r3
 8008030:	3601      	adds	r6, #1
 8008032:	e7f2      	b.n	800801a <__libc_init_array+0x1e>
 8008034:	080083ac 	.word	0x080083ac
 8008038:	080083ac 	.word	0x080083ac
 800803c:	080083ac 	.word	0x080083ac
 8008040:	080083b0 	.word	0x080083b0

08008044 <memset>:
 8008044:	4402      	add	r2, r0
 8008046:	4603      	mov	r3, r0
 8008048:	4293      	cmp	r3, r2
 800804a:	d100      	bne.n	800804e <memset+0xa>
 800804c:	4770      	bx	lr
 800804e:	f803 1b01 	strb.w	r1, [r3], #1
 8008052:	e7f9      	b.n	8008048 <memset+0x4>

08008054 <__udivmoddi4>:
 8008054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008058:	9e08      	ldr	r6, [sp, #32]
 800805a:	460d      	mov	r5, r1
 800805c:	4604      	mov	r4, r0
 800805e:	460f      	mov	r7, r1
 8008060:	2b00      	cmp	r3, #0
 8008062:	d14a      	bne.n	80080fa <__udivmoddi4+0xa6>
 8008064:	428a      	cmp	r2, r1
 8008066:	4694      	mov	ip, r2
 8008068:	d965      	bls.n	8008136 <__udivmoddi4+0xe2>
 800806a:	fab2 f382 	clz	r3, r2
 800806e:	b143      	cbz	r3, 8008082 <__udivmoddi4+0x2e>
 8008070:	fa02 fc03 	lsl.w	ip, r2, r3
 8008074:	f1c3 0220 	rsb	r2, r3, #32
 8008078:	409f      	lsls	r7, r3
 800807a:	fa20 f202 	lsr.w	r2, r0, r2
 800807e:	4317      	orrs	r7, r2
 8008080:	409c      	lsls	r4, r3
 8008082:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8008086:	fa1f f58c 	uxth.w	r5, ip
 800808a:	fbb7 f1fe 	udiv	r1, r7, lr
 800808e:	0c22      	lsrs	r2, r4, #16
 8008090:	fb0e 7711 	mls	r7, lr, r1, r7
 8008094:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8008098:	fb01 f005 	mul.w	r0, r1, r5
 800809c:	4290      	cmp	r0, r2
 800809e:	d90a      	bls.n	80080b6 <__udivmoddi4+0x62>
 80080a0:	eb1c 0202 	adds.w	r2, ip, r2
 80080a4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80080a8:	f080 811c 	bcs.w	80082e4 <__udivmoddi4+0x290>
 80080ac:	4290      	cmp	r0, r2
 80080ae:	f240 8119 	bls.w	80082e4 <__udivmoddi4+0x290>
 80080b2:	3902      	subs	r1, #2
 80080b4:	4462      	add	r2, ip
 80080b6:	1a12      	subs	r2, r2, r0
 80080b8:	b2a4      	uxth	r4, r4
 80080ba:	fbb2 f0fe 	udiv	r0, r2, lr
 80080be:	fb0e 2210 	mls	r2, lr, r0, r2
 80080c2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80080c6:	fb00 f505 	mul.w	r5, r0, r5
 80080ca:	42a5      	cmp	r5, r4
 80080cc:	d90a      	bls.n	80080e4 <__udivmoddi4+0x90>
 80080ce:	eb1c 0404 	adds.w	r4, ip, r4
 80080d2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80080d6:	f080 8107 	bcs.w	80082e8 <__udivmoddi4+0x294>
 80080da:	42a5      	cmp	r5, r4
 80080dc:	f240 8104 	bls.w	80082e8 <__udivmoddi4+0x294>
 80080e0:	4464      	add	r4, ip
 80080e2:	3802      	subs	r0, #2
 80080e4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80080e8:	1b64      	subs	r4, r4, r5
 80080ea:	2100      	movs	r1, #0
 80080ec:	b11e      	cbz	r6, 80080f6 <__udivmoddi4+0xa2>
 80080ee:	40dc      	lsrs	r4, r3
 80080f0:	2300      	movs	r3, #0
 80080f2:	e9c6 4300 	strd	r4, r3, [r6]
 80080f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080fa:	428b      	cmp	r3, r1
 80080fc:	d908      	bls.n	8008110 <__udivmoddi4+0xbc>
 80080fe:	2e00      	cmp	r6, #0
 8008100:	f000 80ed 	beq.w	80082de <__udivmoddi4+0x28a>
 8008104:	2100      	movs	r1, #0
 8008106:	e9c6 0500 	strd	r0, r5, [r6]
 800810a:	4608      	mov	r0, r1
 800810c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008110:	fab3 f183 	clz	r1, r3
 8008114:	2900      	cmp	r1, #0
 8008116:	d149      	bne.n	80081ac <__udivmoddi4+0x158>
 8008118:	42ab      	cmp	r3, r5
 800811a:	d302      	bcc.n	8008122 <__udivmoddi4+0xce>
 800811c:	4282      	cmp	r2, r0
 800811e:	f200 80f8 	bhi.w	8008312 <__udivmoddi4+0x2be>
 8008122:	1a84      	subs	r4, r0, r2
 8008124:	eb65 0203 	sbc.w	r2, r5, r3
 8008128:	2001      	movs	r0, #1
 800812a:	4617      	mov	r7, r2
 800812c:	2e00      	cmp	r6, #0
 800812e:	d0e2      	beq.n	80080f6 <__udivmoddi4+0xa2>
 8008130:	e9c6 4700 	strd	r4, r7, [r6]
 8008134:	e7df      	b.n	80080f6 <__udivmoddi4+0xa2>
 8008136:	b902      	cbnz	r2, 800813a <__udivmoddi4+0xe6>
 8008138:	deff      	udf	#255	; 0xff
 800813a:	fab2 f382 	clz	r3, r2
 800813e:	2b00      	cmp	r3, #0
 8008140:	f040 8090 	bne.w	8008264 <__udivmoddi4+0x210>
 8008144:	1a8a      	subs	r2, r1, r2
 8008146:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800814a:	fa1f fe8c 	uxth.w	lr, ip
 800814e:	2101      	movs	r1, #1
 8008150:	fbb2 f5f7 	udiv	r5, r2, r7
 8008154:	fb07 2015 	mls	r0, r7, r5, r2
 8008158:	0c22      	lsrs	r2, r4, #16
 800815a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800815e:	fb0e f005 	mul.w	r0, lr, r5
 8008162:	4290      	cmp	r0, r2
 8008164:	d908      	bls.n	8008178 <__udivmoddi4+0x124>
 8008166:	eb1c 0202 	adds.w	r2, ip, r2
 800816a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800816e:	d202      	bcs.n	8008176 <__udivmoddi4+0x122>
 8008170:	4290      	cmp	r0, r2
 8008172:	f200 80cb 	bhi.w	800830c <__udivmoddi4+0x2b8>
 8008176:	4645      	mov	r5, r8
 8008178:	1a12      	subs	r2, r2, r0
 800817a:	b2a4      	uxth	r4, r4
 800817c:	fbb2 f0f7 	udiv	r0, r2, r7
 8008180:	fb07 2210 	mls	r2, r7, r0, r2
 8008184:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008188:	fb0e fe00 	mul.w	lr, lr, r0
 800818c:	45a6      	cmp	lr, r4
 800818e:	d908      	bls.n	80081a2 <__udivmoddi4+0x14e>
 8008190:	eb1c 0404 	adds.w	r4, ip, r4
 8008194:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8008198:	d202      	bcs.n	80081a0 <__udivmoddi4+0x14c>
 800819a:	45a6      	cmp	lr, r4
 800819c:	f200 80bb 	bhi.w	8008316 <__udivmoddi4+0x2c2>
 80081a0:	4610      	mov	r0, r2
 80081a2:	eba4 040e 	sub.w	r4, r4, lr
 80081a6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80081aa:	e79f      	b.n	80080ec <__udivmoddi4+0x98>
 80081ac:	f1c1 0720 	rsb	r7, r1, #32
 80081b0:	408b      	lsls	r3, r1
 80081b2:	fa22 fc07 	lsr.w	ip, r2, r7
 80081b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80081ba:	fa05 f401 	lsl.w	r4, r5, r1
 80081be:	fa20 f307 	lsr.w	r3, r0, r7
 80081c2:	40fd      	lsrs	r5, r7
 80081c4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80081c8:	4323      	orrs	r3, r4
 80081ca:	fbb5 f8f9 	udiv	r8, r5, r9
 80081ce:	fa1f fe8c 	uxth.w	lr, ip
 80081d2:	fb09 5518 	mls	r5, r9, r8, r5
 80081d6:	0c1c      	lsrs	r4, r3, #16
 80081d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80081dc:	fb08 f50e 	mul.w	r5, r8, lr
 80081e0:	42a5      	cmp	r5, r4
 80081e2:	fa02 f201 	lsl.w	r2, r2, r1
 80081e6:	fa00 f001 	lsl.w	r0, r0, r1
 80081ea:	d90b      	bls.n	8008204 <__udivmoddi4+0x1b0>
 80081ec:	eb1c 0404 	adds.w	r4, ip, r4
 80081f0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80081f4:	f080 8088 	bcs.w	8008308 <__udivmoddi4+0x2b4>
 80081f8:	42a5      	cmp	r5, r4
 80081fa:	f240 8085 	bls.w	8008308 <__udivmoddi4+0x2b4>
 80081fe:	f1a8 0802 	sub.w	r8, r8, #2
 8008202:	4464      	add	r4, ip
 8008204:	1b64      	subs	r4, r4, r5
 8008206:	b29d      	uxth	r5, r3
 8008208:	fbb4 f3f9 	udiv	r3, r4, r9
 800820c:	fb09 4413 	mls	r4, r9, r3, r4
 8008210:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8008214:	fb03 fe0e 	mul.w	lr, r3, lr
 8008218:	45a6      	cmp	lr, r4
 800821a:	d908      	bls.n	800822e <__udivmoddi4+0x1da>
 800821c:	eb1c 0404 	adds.w	r4, ip, r4
 8008220:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8008224:	d26c      	bcs.n	8008300 <__udivmoddi4+0x2ac>
 8008226:	45a6      	cmp	lr, r4
 8008228:	d96a      	bls.n	8008300 <__udivmoddi4+0x2ac>
 800822a:	3b02      	subs	r3, #2
 800822c:	4464      	add	r4, ip
 800822e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008232:	fba3 9502 	umull	r9, r5, r3, r2
 8008236:	eba4 040e 	sub.w	r4, r4, lr
 800823a:	42ac      	cmp	r4, r5
 800823c:	46c8      	mov	r8, r9
 800823e:	46ae      	mov	lr, r5
 8008240:	d356      	bcc.n	80082f0 <__udivmoddi4+0x29c>
 8008242:	d053      	beq.n	80082ec <__udivmoddi4+0x298>
 8008244:	b156      	cbz	r6, 800825c <__udivmoddi4+0x208>
 8008246:	ebb0 0208 	subs.w	r2, r0, r8
 800824a:	eb64 040e 	sbc.w	r4, r4, lr
 800824e:	fa04 f707 	lsl.w	r7, r4, r7
 8008252:	40ca      	lsrs	r2, r1
 8008254:	40cc      	lsrs	r4, r1
 8008256:	4317      	orrs	r7, r2
 8008258:	e9c6 7400 	strd	r7, r4, [r6]
 800825c:	4618      	mov	r0, r3
 800825e:	2100      	movs	r1, #0
 8008260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008264:	f1c3 0120 	rsb	r1, r3, #32
 8008268:	fa02 fc03 	lsl.w	ip, r2, r3
 800826c:	fa20 f201 	lsr.w	r2, r0, r1
 8008270:	fa25 f101 	lsr.w	r1, r5, r1
 8008274:	409d      	lsls	r5, r3
 8008276:	432a      	orrs	r2, r5
 8008278:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800827c:	fa1f fe8c 	uxth.w	lr, ip
 8008280:	fbb1 f0f7 	udiv	r0, r1, r7
 8008284:	fb07 1510 	mls	r5, r7, r0, r1
 8008288:	0c11      	lsrs	r1, r2, #16
 800828a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800828e:	fb00 f50e 	mul.w	r5, r0, lr
 8008292:	428d      	cmp	r5, r1
 8008294:	fa04 f403 	lsl.w	r4, r4, r3
 8008298:	d908      	bls.n	80082ac <__udivmoddi4+0x258>
 800829a:	eb1c 0101 	adds.w	r1, ip, r1
 800829e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80082a2:	d22f      	bcs.n	8008304 <__udivmoddi4+0x2b0>
 80082a4:	428d      	cmp	r5, r1
 80082a6:	d92d      	bls.n	8008304 <__udivmoddi4+0x2b0>
 80082a8:	3802      	subs	r0, #2
 80082aa:	4461      	add	r1, ip
 80082ac:	1b49      	subs	r1, r1, r5
 80082ae:	b292      	uxth	r2, r2
 80082b0:	fbb1 f5f7 	udiv	r5, r1, r7
 80082b4:	fb07 1115 	mls	r1, r7, r5, r1
 80082b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80082bc:	fb05 f10e 	mul.w	r1, r5, lr
 80082c0:	4291      	cmp	r1, r2
 80082c2:	d908      	bls.n	80082d6 <__udivmoddi4+0x282>
 80082c4:	eb1c 0202 	adds.w	r2, ip, r2
 80082c8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80082cc:	d216      	bcs.n	80082fc <__udivmoddi4+0x2a8>
 80082ce:	4291      	cmp	r1, r2
 80082d0:	d914      	bls.n	80082fc <__udivmoddi4+0x2a8>
 80082d2:	3d02      	subs	r5, #2
 80082d4:	4462      	add	r2, ip
 80082d6:	1a52      	subs	r2, r2, r1
 80082d8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80082dc:	e738      	b.n	8008150 <__udivmoddi4+0xfc>
 80082de:	4631      	mov	r1, r6
 80082e0:	4630      	mov	r0, r6
 80082e2:	e708      	b.n	80080f6 <__udivmoddi4+0xa2>
 80082e4:	4639      	mov	r1, r7
 80082e6:	e6e6      	b.n	80080b6 <__udivmoddi4+0x62>
 80082e8:	4610      	mov	r0, r2
 80082ea:	e6fb      	b.n	80080e4 <__udivmoddi4+0x90>
 80082ec:	4548      	cmp	r0, r9
 80082ee:	d2a9      	bcs.n	8008244 <__udivmoddi4+0x1f0>
 80082f0:	ebb9 0802 	subs.w	r8, r9, r2
 80082f4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80082f8:	3b01      	subs	r3, #1
 80082fa:	e7a3      	b.n	8008244 <__udivmoddi4+0x1f0>
 80082fc:	4645      	mov	r5, r8
 80082fe:	e7ea      	b.n	80082d6 <__udivmoddi4+0x282>
 8008300:	462b      	mov	r3, r5
 8008302:	e794      	b.n	800822e <__udivmoddi4+0x1da>
 8008304:	4640      	mov	r0, r8
 8008306:	e7d1      	b.n	80082ac <__udivmoddi4+0x258>
 8008308:	46d0      	mov	r8, sl
 800830a:	e77b      	b.n	8008204 <__udivmoddi4+0x1b0>
 800830c:	3d02      	subs	r5, #2
 800830e:	4462      	add	r2, ip
 8008310:	e732      	b.n	8008178 <__udivmoddi4+0x124>
 8008312:	4608      	mov	r0, r1
 8008314:	e70a      	b.n	800812c <__udivmoddi4+0xd8>
 8008316:	4464      	add	r4, ip
 8008318:	3802      	subs	r0, #2
 800831a:	e742      	b.n	80081a2 <__udivmoddi4+0x14e>

0800831c <_init>:
 800831c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800831e:	bf00      	nop
 8008320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008322:	bc08      	pop	{r3}
 8008324:	469e      	mov	lr, r3
 8008326:	4770      	bx	lr

08008328 <_fini>:
 8008328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832a:	bf00      	nop
 800832c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800832e:	bc08      	pop	{r3}
 8008330:	469e      	mov	lr, r3
 8008332:	4770      	bx	lr
